//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.42
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LTZN.技术日报 {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("技术日报数据集")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class 技术日报数据集 : System.Data.DataSet {
        
        private 技术日报DataTable table技术日报;
        
        private 休风DataTable table休风;
        
        private 慢风DataTable table慢风;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public 技术日报数据集() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected 技术日报数据集(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["技术日报"] != null)) {
                    base.Tables.Add(new 技术日报DataTable(ds.Tables["技术日报"]));
                }
                if ((ds.Tables["休风"] != null)) {
                    base.Tables.Add(new 休风DataTable(ds.Tables["休风"]));
                }
                if ((ds.Tables["慢风"] != null)) {
                    base.Tables.Add(new 慢风DataTable(ds.Tables["慢风"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 技术日报DataTable 技术日报 {
            get {
                return this.table技术日报;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 休风DataTable 休风 {
            get {
                return this.table休风;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 慢风DataTable 慢风 {
            get {
                return this.table慢风;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            技术日报数据集 cln = ((技术日报数据集)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["技术日报"] != null)) {
                    base.Tables.Add(new 技术日报DataTable(ds.Tables["技术日报"]));
                }
                if ((ds.Tables["休风"] != null)) {
                    base.Tables.Add(new 休风DataTable(ds.Tables["休风"]));
                }
                if ((ds.Tables["慢风"] != null)) {
                    base.Tables.Add(new 慢风DataTable(ds.Tables["慢风"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table技术日报 = ((技术日报DataTable)(base.Tables["技术日报"]));
            if ((initTable == true)) {
                if ((this.table技术日报 != null)) {
                    this.table技术日报.InitVars();
                }
            }
            this.table休风 = ((休风DataTable)(base.Tables["休风"]));
            if ((initTable == true)) {
                if ((this.table休风 != null)) {
                    this.table休风.InitVars();
                }
            }
            this.table慢风 = ((慢风DataTable)(base.Tables["慢风"]));
            if ((initTable == true)) {
                if ((this.table慢风 != null)) {
                    this.table慢风.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "技术日报数据集";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/技术日报数据集.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.table技术日报 = new 技术日报DataTable();
            base.Tables.Add(this.table技术日报);
            this.table休风 = new 休风DataTable();
            base.Tables.Add(this.table休风);
            this.table慢风 = new 慢风DataTable();
            base.Tables.Add(this.table慢风);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize技术日报() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize休风() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize慢风() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            技术日报数据集 ds = new 技术日报数据集();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void 技术日报RowChangeEventHandler(object sender, 技术日报RowChangeEvent e);
        
        public delegate void 休风RowChangeEventHandler(object sender, 休风RowChangeEvent e);
        
        public delegate void 慢风RowChangeEventHandler(object sender, 慢风RowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 技术日报DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnP日期;
            
            private System.Data.DataColumn columnP01单位;
            
            private System.Data.DataColumn columnP02项目;
            
            private System.Data.DataColumn columnP03合格铁;
            
            private System.Data.DataColumn columnP04炼钢铁;
            
            private System.Data.DataColumn columnP05铸造铁;
            
            private System.Data.DataColumn columnP06号外铁;
            
            private System.Data.DataColumn columnP07合格率;
            
            private System.Data.DataColumn columnP08高炉利用系数;
            
            private System.Data.DataColumn columnP09高炉实物系数;
            
            private System.Data.DataColumn columnP10原料矿合计总耗;
            
            private System.Data.DataColumn columnP11原料矿合计单耗;
            
            private System.Data.DataColumn columnP12原料矿机烧;
            
            private System.Data.DataColumn columnP13原料矿竖炉球;
            
            private System.Data.DataColumn columnP14原料矿CT;
            
            private System.Data.DataColumn columnP15原料矿其它熟料;
            
            private System.Data.DataColumn columnP16原料矿本溪矿;
            
            private System.Data.DataColumn columnP17原料矿其它生料;
            
            private System.Data.DataColumn columnP18废铁总耗;
            
            private System.Data.DataColumn columnP19废铁单耗;
            
            private System.Data.DataColumn columnP20回收率;
            
            private System.Data.DataColumn columnP21熟料比;
            
            private System.Data.DataColumn columnP22平均风温;
            
            private System.Data.DataColumn columnP23炉顶温度;
            
            private System.Data.DataColumn columnP24热风压力;
            
            private System.Data.DataColumn columnP25炉顶压力;
            
            private System.Data.DataColumn columnP26富氧率;
            
            private System.Data.DataColumn columnP27入炉焦炭总耗;
            
            private System.Data.DataColumn columnP28入炉焦炭单耗;
            
            private System.Data.DataColumn columnP29煤粉总耗;
            
            private System.Data.DataColumn columnP30煤粉单耗;
            
            private System.Data.DataColumn columnP31焦丁总耗;
            
            private System.Data.DataColumn columnP32焦丁单耗;
            
            private System.Data.DataColumn columnP33综合焦炭总耗;
            
            private System.Data.DataColumn columnP34综合焦炭单耗;
            
            private System.Data.DataColumn columnP35综合折算焦比;
            
            private System.Data.DataColumn columnP36冶炼强度;
            
            private System.Data.DataColumn columnP37焦炭负荷;
            
            private System.Data.DataColumn columnP38干毛焦;
            
            private System.Data.DataColumn columnP39炼钢铁SI;
            
            private System.Data.DataColumn columnP40炼钢铁MN;
            
            private System.Data.DataColumn columnP41炼钢铁P;
            
            private System.Data.DataColumn columnP42炼钢铁S;
            
            private System.Data.DataColumn columnP43铸造铁SI;
            
            private System.Data.DataColumn columnP44铸造铁MN;
            
            private System.Data.DataColumn columnP45铸造铁P;
            
            private System.Data.DataColumn columnP46铸造铁S;
            
            private System.Data.DataColumn columnP47炉渣碱度;
            
            private System.Data.DataColumn columnP48休风情况;
            
            private System.Data.DataColumn columnP49慢风;
            
            private System.Data.DataColumn columnP50坐料次数;
            
            private System.Data.DataColumn columnP51悬料次数;
            
            private System.Data.DataColumn columnP52崩料次数;
            
            private System.Data.DataColumn columnP53风口损坏数大;
            
            private System.Data.DataColumn columnP54风口损坏数中;
            
            private System.Data.DataColumn columnP55风口损坏数小;
            
            private System.Data.DataColumn columnP56渣口损坏数大;
            
            private System.Data.DataColumn columnP57渣口损坏数中;
            
            private System.Data.DataColumn columnP58渣口损坏数小;
            
            private System.Data.DataColumn columnP59本厂铸造SI大;
            
            private System.Data.DataColumn columnP60本厂铸造SI小;
            
            private System.Data.DataColumn columnP61送炼钢厂SI大;
            
            private System.Data.DataColumn columnP62送炼钢厂SI中;
            
            private System.Data.DataColumn columnP63送炼钢厂SI小;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 技术日报DataTable() {
                this.TableName = "技术日报";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 技术日报DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 技术日报DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P日期Column {
                get {
                    return this.columnP日期;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P01单位Column {
                get {
                    return this.columnP01单位;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P02项目Column {
                get {
                    return this.columnP02项目;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P03合格铁Column {
                get {
                    return this.columnP03合格铁;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P04炼钢铁Column {
                get {
                    return this.columnP04炼钢铁;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P05铸造铁Column {
                get {
                    return this.columnP05铸造铁;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P06号外铁Column {
                get {
                    return this.columnP06号外铁;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P07合格率Column {
                get {
                    return this.columnP07合格率;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P08高炉利用系数Column {
                get {
                    return this.columnP08高炉利用系数;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P09高炉实物系数Column {
                get {
                    return this.columnP09高炉实物系数;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P10原料矿合计总耗Column {
                get {
                    return this.columnP10原料矿合计总耗;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P11原料矿合计单耗Column {
                get {
                    return this.columnP11原料矿合计单耗;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P12原料矿机烧Column {
                get {
                    return this.columnP12原料矿机烧;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P13原料矿竖炉球Column {
                get {
                    return this.columnP13原料矿竖炉球;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P14原料矿CTColumn {
                get {
                    return this.columnP14原料矿CT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P15原料矿其它熟料Column {
                get {
                    return this.columnP15原料矿其它熟料;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P16原料矿本溪矿Column {
                get {
                    return this.columnP16原料矿本溪矿;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P17原料矿其它生料Column {
                get {
                    return this.columnP17原料矿其它生料;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P18废铁总耗Column {
                get {
                    return this.columnP18废铁总耗;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P19废铁单耗Column {
                get {
                    return this.columnP19废铁单耗;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P20回收率Column {
                get {
                    return this.columnP20回收率;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P21熟料比Column {
                get {
                    return this.columnP21熟料比;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P22平均风温Column {
                get {
                    return this.columnP22平均风温;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P23炉顶温度Column {
                get {
                    return this.columnP23炉顶温度;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P24热风压力Column {
                get {
                    return this.columnP24热风压力;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P25炉顶压力Column {
                get {
                    return this.columnP25炉顶压力;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P26富氧率Column {
                get {
                    return this.columnP26富氧率;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P27入炉焦炭总耗Column {
                get {
                    return this.columnP27入炉焦炭总耗;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P28入炉焦炭单耗Column {
                get {
                    return this.columnP28入炉焦炭单耗;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P29煤粉总耗Column {
                get {
                    return this.columnP29煤粉总耗;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P30煤粉单耗Column {
                get {
                    return this.columnP30煤粉单耗;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P31焦丁总耗Column {
                get {
                    return this.columnP31焦丁总耗;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P32焦丁单耗Column {
                get {
                    return this.columnP32焦丁单耗;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P33综合焦炭总耗Column {
                get {
                    return this.columnP33综合焦炭总耗;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P34综合焦炭单耗Column {
                get {
                    return this.columnP34综合焦炭单耗;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P35综合折算焦比Column {
                get {
                    return this.columnP35综合折算焦比;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P36冶炼强度Column {
                get {
                    return this.columnP36冶炼强度;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P37焦炭负荷Column {
                get {
                    return this.columnP37焦炭负荷;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P38干毛焦Column {
                get {
                    return this.columnP38干毛焦;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P39炼钢铁SIColumn {
                get {
                    return this.columnP39炼钢铁SI;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P40炼钢铁MNColumn {
                get {
                    return this.columnP40炼钢铁MN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P41炼钢铁PColumn {
                get {
                    return this.columnP41炼钢铁P;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P42炼钢铁SColumn {
                get {
                    return this.columnP42炼钢铁S;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P43铸造铁SIColumn {
                get {
                    return this.columnP43铸造铁SI;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P44铸造铁MNColumn {
                get {
                    return this.columnP44铸造铁MN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P45铸造铁PColumn {
                get {
                    return this.columnP45铸造铁P;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P46铸造铁SColumn {
                get {
                    return this.columnP46铸造铁S;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P47炉渣碱度Column {
                get {
                    return this.columnP47炉渣碱度;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P48休风情况Column {
                get {
                    return this.columnP48休风情况;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P49慢风Column {
                get {
                    return this.columnP49慢风;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P50坐料次数Column {
                get {
                    return this.columnP50坐料次数;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P51悬料次数Column {
                get {
                    return this.columnP51悬料次数;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P52崩料次数Column {
                get {
                    return this.columnP52崩料次数;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P53风口损坏数大Column {
                get {
                    return this.columnP53风口损坏数大;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P54风口损坏数中Column {
                get {
                    return this.columnP54风口损坏数中;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P55风口损坏数小Column {
                get {
                    return this.columnP55风口损坏数小;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P56渣口损坏数大Column {
                get {
                    return this.columnP56渣口损坏数大;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P57渣口损坏数中Column {
                get {
                    return this.columnP57渣口损坏数中;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P58渣口损坏数小Column {
                get {
                    return this.columnP58渣口损坏数小;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P59本厂铸造SI大Column {
                get {
                    return this.columnP59本厂铸造SI大;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P60本厂铸造SI小Column {
                get {
                    return this.columnP60本厂铸造SI小;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P61送炼钢厂SI大Column {
                get {
                    return this.columnP61送炼钢厂SI大;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P62送炼钢厂SI中Column {
                get {
                    return this.columnP62送炼钢厂SI中;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P63送炼钢厂SI小Column {
                get {
                    return this.columnP63送炼钢厂SI小;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 技术日报Row this[int index] {
                get {
                    return ((技术日报Row)(this.Rows[index]));
                }
            }
            
            public event 技术日报RowChangeEventHandler 技术日报RowChanging;
            
            public event 技术日报RowChangeEventHandler 技术日报RowChanged;
            
            public event 技术日报RowChangeEventHandler 技术日报RowDeleting;
            
            public event 技术日报RowChangeEventHandler 技术日报RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add技术日报Row(技术日报Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 技术日报Row Add技术日报Row(
                        System.DateTime P日期, 
                        string P01单位, 
                        string P02项目, 
                        double P03合格铁, 
                        double P04炼钢铁, 
                        double P05铸造铁, 
                        double P06号外铁, 
                        double P07合格率, 
                        double P08高炉利用系数, 
                        double P09高炉实物系数, 
                        double P10原料矿合计总耗, 
                        double P11原料矿合计单耗, 
                        double P12原料矿机烧, 
                        double P13原料矿竖炉球, 
                        double P14原料矿CT, 
                        double P15原料矿其它熟料, 
                        double P16原料矿本溪矿, 
                        double P17原料矿其它生料, 
                        double P18废铁总耗, 
                        double P19废铁单耗, 
                        double P20回收率, 
                        double P21熟料比, 
                        double P22平均风温, 
                        double P23炉顶温度, 
                        double P24热风压力, 
                        double P25炉顶压力, 
                        double P26富氧率, 
                        double P27入炉焦炭总耗, 
                        double P28入炉焦炭单耗, 
                        double P29煤粉总耗, 
                        double P30煤粉单耗, 
                        double P31焦丁总耗, 
                        double P32焦丁单耗, 
                        double P33综合焦炭总耗, 
                        double P34综合焦炭单耗, 
                        double P35综合折算焦比, 
                        double P36冶炼强度, 
                        double P37焦炭负荷, 
                        double P38干毛焦, 
                        double P39炼钢铁SI, 
                        double P40炼钢铁MN, 
                        double P41炼钢铁P, 
                        double P42炼钢铁S, 
                        double P43铸造铁SI, 
                        double P44铸造铁MN, 
                        double P45铸造铁P, 
                        double P46铸造铁S, 
                        double P47炉渣碱度, 
                        double P48休风情况, 
                        double P49慢风, 
                        double P50坐料次数, 
                        double P51悬料次数, 
                        double P52崩料次数, 
                        double P53风口损坏数大, 
                        double P54风口损坏数中, 
                        double P55风口损坏数小, 
                        double P56渣口损坏数大, 
                        double P57渣口损坏数中, 
                        double P58渣口损坏数小, 
                        double P59本厂铸造SI大, 
                        double P60本厂铸造SI小, 
                        double P61送炼钢厂SI大, 
                        double P62送炼钢厂SI中, 
                        double P63送炼钢厂SI小) {
                技术日报Row row技术日报Row = ((技术日报Row)(this.NewRow()));
                row技术日报Row.ItemArray = new object[] {
                        P日期,
                        P01单位,
                        P02项目,
                        P03合格铁,
                        P04炼钢铁,
                        P05铸造铁,
                        P06号外铁,
                        P07合格率,
                        P08高炉利用系数,
                        P09高炉实物系数,
                        P10原料矿合计总耗,
                        P11原料矿合计单耗,
                        P12原料矿机烧,
                        P13原料矿竖炉球,
                        P14原料矿CT,
                        P15原料矿其它熟料,
                        P16原料矿本溪矿,
                        P17原料矿其它生料,
                        P18废铁总耗,
                        P19废铁单耗,
                        P20回收率,
                        P21熟料比,
                        P22平均风温,
                        P23炉顶温度,
                        P24热风压力,
                        P25炉顶压力,
                        P26富氧率,
                        P27入炉焦炭总耗,
                        P28入炉焦炭单耗,
                        P29煤粉总耗,
                        P30煤粉单耗,
                        P31焦丁总耗,
                        P32焦丁单耗,
                        P33综合焦炭总耗,
                        P34综合焦炭单耗,
                        P35综合折算焦比,
                        P36冶炼强度,
                        P37焦炭负荷,
                        P38干毛焦,
                        P39炼钢铁SI,
                        P40炼钢铁MN,
                        P41炼钢铁P,
                        P42炼钢铁S,
                        P43铸造铁SI,
                        P44铸造铁MN,
                        P45铸造铁P,
                        P46铸造铁S,
                        P47炉渣碱度,
                        P48休风情况,
                        P49慢风,
                        P50坐料次数,
                        P51悬料次数,
                        P52崩料次数,
                        P53风口损坏数大,
                        P54风口损坏数中,
                        P55风口损坏数小,
                        P56渣口损坏数大,
                        P57渣口损坏数中,
                        P58渣口损坏数小,
                        P59本厂铸造SI大,
                        P60本厂铸造SI小,
                        P61送炼钢厂SI大,
                        P62送炼钢厂SI中,
                        P63送炼钢厂SI小};
                this.Rows.Add(row技术日报Row);
                return row技术日报Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 技术日报Row FindByP日期P01单位P02项目(System.DateTime P日期, string P01单位, string P02项目) {
                return ((技术日报Row)(this.Rows.Find(new object[] {
                            P日期,
                            P01单位,
                            P02项目})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                技术日报DataTable cln = ((技术日报DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new 技术日报DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnP日期 = base.Columns["P日期"];
                this.columnP01单位 = base.Columns["P01单位"];
                this.columnP02项目 = base.Columns["P02项目"];
                this.columnP03合格铁 = base.Columns["P03合格铁"];
                this.columnP04炼钢铁 = base.Columns["P04炼钢铁"];
                this.columnP05铸造铁 = base.Columns["P05铸造铁"];
                this.columnP06号外铁 = base.Columns["P06号外铁"];
                this.columnP07合格率 = base.Columns["P07合格率"];
                this.columnP08高炉利用系数 = base.Columns["P08高炉利用系数"];
                this.columnP09高炉实物系数 = base.Columns["P09高炉实物系数"];
                this.columnP10原料矿合计总耗 = base.Columns["P10原料矿合计总耗"];
                this.columnP11原料矿合计单耗 = base.Columns["P11原料矿合计单耗"];
                this.columnP12原料矿机烧 = base.Columns["P12原料矿机烧"];
                this.columnP13原料矿竖炉球 = base.Columns["P13原料矿竖炉球"];
                this.columnP14原料矿CT = base.Columns["P14原料矿CT"];
                this.columnP15原料矿其它熟料 = base.Columns["P15原料矿其它熟料"];
                this.columnP16原料矿本溪矿 = base.Columns["P16原料矿本溪矿"];
                this.columnP17原料矿其它生料 = base.Columns["P17原料矿其它生料"];
                this.columnP18废铁总耗 = base.Columns["P18废铁总耗"];
                this.columnP19废铁单耗 = base.Columns["P19废铁单耗"];
                this.columnP20回收率 = base.Columns["P20回收率"];
                this.columnP21熟料比 = base.Columns["P21熟料比"];
                this.columnP22平均风温 = base.Columns["P22平均风温"];
                this.columnP23炉顶温度 = base.Columns["P23炉顶温度"];
                this.columnP24热风压力 = base.Columns["P24热风压力"];
                this.columnP25炉顶压力 = base.Columns["P25炉顶压力"];
                this.columnP26富氧率 = base.Columns["P26富氧率"];
                this.columnP27入炉焦炭总耗 = base.Columns["P27入炉焦炭总耗"];
                this.columnP28入炉焦炭单耗 = base.Columns["P28入炉焦炭单耗"];
                this.columnP29煤粉总耗 = base.Columns["P29煤粉总耗"];
                this.columnP30煤粉单耗 = base.Columns["P30煤粉单耗"];
                this.columnP31焦丁总耗 = base.Columns["P31焦丁总耗"];
                this.columnP32焦丁单耗 = base.Columns["P32焦丁单耗"];
                this.columnP33综合焦炭总耗 = base.Columns["P33综合焦炭总耗"];
                this.columnP34综合焦炭单耗 = base.Columns["P34综合焦炭单耗"];
                this.columnP35综合折算焦比 = base.Columns["P35综合折算焦比"];
                this.columnP36冶炼强度 = base.Columns["P36冶炼强度"];
                this.columnP37焦炭负荷 = base.Columns["P37焦炭负荷"];
                this.columnP38干毛焦 = base.Columns["P38干毛焦"];
                this.columnP39炼钢铁SI = base.Columns["P39炼钢铁SI"];
                this.columnP40炼钢铁MN = base.Columns["P40炼钢铁MN"];
                this.columnP41炼钢铁P = base.Columns["P41炼钢铁P"];
                this.columnP42炼钢铁S = base.Columns["P42炼钢铁S"];
                this.columnP43铸造铁SI = base.Columns["P43铸造铁SI"];
                this.columnP44铸造铁MN = base.Columns["P44铸造铁MN"];
                this.columnP45铸造铁P = base.Columns["P45铸造铁P"];
                this.columnP46铸造铁S = base.Columns["P46铸造铁S"];
                this.columnP47炉渣碱度 = base.Columns["P47炉渣碱度"];
                this.columnP48休风情况 = base.Columns["P48休风情况"];
                this.columnP49慢风 = base.Columns["P49慢风"];
                this.columnP50坐料次数 = base.Columns["P50坐料次数"];
                this.columnP51悬料次数 = base.Columns["P51悬料次数"];
                this.columnP52崩料次数 = base.Columns["P52崩料次数"];
                this.columnP53风口损坏数大 = base.Columns["P53风口损坏数大"];
                this.columnP54风口损坏数中 = base.Columns["P54风口损坏数中"];
                this.columnP55风口损坏数小 = base.Columns["P55风口损坏数小"];
                this.columnP56渣口损坏数大 = base.Columns["P56渣口损坏数大"];
                this.columnP57渣口损坏数中 = base.Columns["P57渣口损坏数中"];
                this.columnP58渣口损坏数小 = base.Columns["P58渣口损坏数小"];
                this.columnP59本厂铸造SI大 = base.Columns["P59本厂铸造SI大"];
                this.columnP60本厂铸造SI小 = base.Columns["P60本厂铸造SI小"];
                this.columnP61送炼钢厂SI大 = base.Columns["P61送炼钢厂SI大"];
                this.columnP62送炼钢厂SI中 = base.Columns["P62送炼钢厂SI中"];
                this.columnP63送炼钢厂SI小 = base.Columns["P63送炼钢厂SI小"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnP日期 = new System.Data.DataColumn("P日期", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP日期);
                this.columnP01单位 = new System.Data.DataColumn("P01单位", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP01单位);
                this.columnP02项目 = new System.Data.DataColumn("P02项目", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP02项目);
                this.columnP03合格铁 = new System.Data.DataColumn("P03合格铁", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP03合格铁);
                this.columnP04炼钢铁 = new System.Data.DataColumn("P04炼钢铁", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP04炼钢铁);
                this.columnP05铸造铁 = new System.Data.DataColumn("P05铸造铁", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP05铸造铁);
                this.columnP06号外铁 = new System.Data.DataColumn("P06号外铁", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP06号外铁);
                this.columnP07合格率 = new System.Data.DataColumn("P07合格率", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP07合格率);
                this.columnP08高炉利用系数 = new System.Data.DataColumn("P08高炉利用系数", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP08高炉利用系数);
                this.columnP09高炉实物系数 = new System.Data.DataColumn("P09高炉实物系数", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP09高炉实物系数);
                this.columnP10原料矿合计总耗 = new System.Data.DataColumn("P10原料矿合计总耗", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP10原料矿合计总耗);
                this.columnP11原料矿合计单耗 = new System.Data.DataColumn("P11原料矿合计单耗", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP11原料矿合计单耗);
                this.columnP12原料矿机烧 = new System.Data.DataColumn("P12原料矿机烧", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP12原料矿机烧);
                this.columnP13原料矿竖炉球 = new System.Data.DataColumn("P13原料矿竖炉球", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP13原料矿竖炉球);
                this.columnP14原料矿CT = new System.Data.DataColumn("P14原料矿CT", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP14原料矿CT);
                this.columnP15原料矿其它熟料 = new System.Data.DataColumn("P15原料矿其它熟料", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP15原料矿其它熟料);
                this.columnP16原料矿本溪矿 = new System.Data.DataColumn("P16原料矿本溪矿", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP16原料矿本溪矿);
                this.columnP17原料矿其它生料 = new System.Data.DataColumn("P17原料矿其它生料", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP17原料矿其它生料);
                this.columnP18废铁总耗 = new System.Data.DataColumn("P18废铁总耗", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP18废铁总耗);
                this.columnP19废铁单耗 = new System.Data.DataColumn("P19废铁单耗", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP19废铁单耗);
                this.columnP20回收率 = new System.Data.DataColumn("P20回收率", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP20回收率);
                this.columnP21熟料比 = new System.Data.DataColumn("P21熟料比", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP21熟料比);
                this.columnP22平均风温 = new System.Data.DataColumn("P22平均风温", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP22平均风温);
                this.columnP23炉顶温度 = new System.Data.DataColumn("P23炉顶温度", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP23炉顶温度);
                this.columnP24热风压力 = new System.Data.DataColumn("P24热风压力", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP24热风压力);
                this.columnP25炉顶压力 = new System.Data.DataColumn("P25炉顶压力", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP25炉顶压力);
                this.columnP26富氧率 = new System.Data.DataColumn("P26富氧率", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP26富氧率);
                this.columnP27入炉焦炭总耗 = new System.Data.DataColumn("P27入炉焦炭总耗", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP27入炉焦炭总耗);
                this.columnP28入炉焦炭单耗 = new System.Data.DataColumn("P28入炉焦炭单耗", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP28入炉焦炭单耗);
                this.columnP29煤粉总耗 = new System.Data.DataColumn("P29煤粉总耗", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP29煤粉总耗);
                this.columnP30煤粉单耗 = new System.Data.DataColumn("P30煤粉单耗", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP30煤粉单耗);
                this.columnP31焦丁总耗 = new System.Data.DataColumn("P31焦丁总耗", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP31焦丁总耗);
                this.columnP32焦丁单耗 = new System.Data.DataColumn("P32焦丁单耗", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP32焦丁单耗);
                this.columnP33综合焦炭总耗 = new System.Data.DataColumn("P33综合焦炭总耗", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP33综合焦炭总耗);
                this.columnP34综合焦炭单耗 = new System.Data.DataColumn("P34综合焦炭单耗", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP34综合焦炭单耗);
                this.columnP35综合折算焦比 = new System.Data.DataColumn("P35综合折算焦比", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP35综合折算焦比);
                this.columnP36冶炼强度 = new System.Data.DataColumn("P36冶炼强度", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP36冶炼强度);
                this.columnP37焦炭负荷 = new System.Data.DataColumn("P37焦炭负荷", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP37焦炭负荷);
                this.columnP38干毛焦 = new System.Data.DataColumn("P38干毛焦", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP38干毛焦);
                this.columnP39炼钢铁SI = new System.Data.DataColumn("P39炼钢铁SI", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP39炼钢铁SI);
                this.columnP40炼钢铁MN = new System.Data.DataColumn("P40炼钢铁MN", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP40炼钢铁MN);
                this.columnP41炼钢铁P = new System.Data.DataColumn("P41炼钢铁P", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP41炼钢铁P);
                this.columnP42炼钢铁S = new System.Data.DataColumn("P42炼钢铁S", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP42炼钢铁S);
                this.columnP43铸造铁SI = new System.Data.DataColumn("P43铸造铁SI", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP43铸造铁SI);
                this.columnP44铸造铁MN = new System.Data.DataColumn("P44铸造铁MN", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP44铸造铁MN);
                this.columnP45铸造铁P = new System.Data.DataColumn("P45铸造铁P", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP45铸造铁P);
                this.columnP46铸造铁S = new System.Data.DataColumn("P46铸造铁S", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP46铸造铁S);
                this.columnP47炉渣碱度 = new System.Data.DataColumn("P47炉渣碱度", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP47炉渣碱度);
                this.columnP48休风情况 = new System.Data.DataColumn("P48休风情况", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP48休风情况);
                this.columnP49慢风 = new System.Data.DataColumn("P49慢风", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP49慢风);
                this.columnP50坐料次数 = new System.Data.DataColumn("P50坐料次数", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP50坐料次数);
                this.columnP51悬料次数 = new System.Data.DataColumn("P51悬料次数", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP51悬料次数);
                this.columnP52崩料次数 = new System.Data.DataColumn("P52崩料次数", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP52崩料次数);
                this.columnP53风口损坏数大 = new System.Data.DataColumn("P53风口损坏数大", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP53风口损坏数大);
                this.columnP54风口损坏数中 = new System.Data.DataColumn("P54风口损坏数中", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP54风口损坏数中);
                this.columnP55风口损坏数小 = new System.Data.DataColumn("P55风口损坏数小", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP55风口损坏数小);
                this.columnP56渣口损坏数大 = new System.Data.DataColumn("P56渣口损坏数大", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP56渣口损坏数大);
                this.columnP57渣口损坏数中 = new System.Data.DataColumn("P57渣口损坏数中", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP57渣口损坏数中);
                this.columnP58渣口损坏数小 = new System.Data.DataColumn("P58渣口损坏数小", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP58渣口损坏数小);
                this.columnP59本厂铸造SI大 = new System.Data.DataColumn("P59本厂铸造SI大", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP59本厂铸造SI大);
                this.columnP60本厂铸造SI小 = new System.Data.DataColumn("P60本厂铸造SI小", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP60本厂铸造SI小);
                this.columnP61送炼钢厂SI大 = new System.Data.DataColumn("P61送炼钢厂SI大", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP61送炼钢厂SI大);
                this.columnP62送炼钢厂SI中 = new System.Data.DataColumn("P62送炼钢厂SI中", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP62送炼钢厂SI中);
                this.columnP63送炼钢厂SI小 = new System.Data.DataColumn("P63送炼钢厂SI小", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP63送炼钢厂SI小);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnP日期,
                                this.columnP01单位,
                                this.columnP02项目}, true));
                this.columnP日期.AllowDBNull = false;
                this.columnP01单位.AllowDBNull = false;
                this.columnP01单位.MaxLength = 20;
                this.columnP02项目.AllowDBNull = false;
                this.columnP02项目.MaxLength = 20;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 技术日报Row New技术日报Row() {
                return ((技术日报Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new 技术日报Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(技术日报Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.技术日报RowChanged != null)) {
                    this.技术日报RowChanged(this, new 技术日报RowChangeEvent(((技术日报Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.技术日报RowChanging != null)) {
                    this.技术日报RowChanging(this, new 技术日报RowChangeEvent(((技术日报Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.技术日报RowDeleted != null)) {
                    this.技术日报RowDeleted(this, new 技术日报RowChangeEvent(((技术日报Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.技术日报RowDeleting != null)) {
                    this.技术日报RowDeleting(this, new 技术日报RowChangeEvent(((技术日报Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove技术日报Row(技术日报Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                技术日报数据集 ds = new 技术日报数据集();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "技术日报DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 休风DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column时间;
            
            private System.Data.DataColumn column高炉;
            
            private System.Data.DataColumn column间隔;
            
            private System.Data.DataColumn column分类;
            
            private System.Data.DataColumn column原因;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 休风DataTable() {
                this.TableName = "休风";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 休风DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 休风DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 时间Column {
                get {
                    return this.column时间;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 高炉Column {
                get {
                    return this.column高炉;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 间隔Column {
                get {
                    return this.column间隔;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 分类Column {
                get {
                    return this.column分类;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 原因Column {
                get {
                    return this.column原因;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 休风Row this[int index] {
                get {
                    return ((休风Row)(this.Rows[index]));
                }
            }
            
            public event 休风RowChangeEventHandler 休风RowChanging;
            
            public event 休风RowChangeEventHandler 休风RowChanged;
            
            public event 休风RowChangeEventHandler 休风RowDeleting;
            
            public event 休风RowChangeEventHandler 休风RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add休风Row(休风Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 休风Row Add休风Row(System.DateTime 时间, decimal 高炉, decimal 间隔, string 分类, string 原因) {
                休风Row row休风Row = ((休风Row)(this.NewRow()));
                row休风Row.ItemArray = new object[] {
                        时间,
                        高炉,
                        间隔,
                        分类,
                        原因};
                this.Rows.Add(row休风Row);
                return row休风Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 休风Row FindBy时间高炉(System.DateTime 时间, decimal 高炉) {
                return ((休风Row)(this.Rows.Find(new object[] {
                            时间,
                            高炉})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                休风DataTable cln = ((休风DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new 休风DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column时间 = base.Columns["时间"];
                this.column高炉 = base.Columns["高炉"];
                this.column间隔 = base.Columns["间隔"];
                this.column分类 = base.Columns["分类"];
                this.column原因 = base.Columns["原因"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column时间 = new System.Data.DataColumn("时间", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column时间);
                this.column高炉 = new System.Data.DataColumn("高炉", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column高炉);
                this.column间隔 = new System.Data.DataColumn("间隔", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column间隔);
                this.column分类 = new System.Data.DataColumn("分类", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column分类);
                this.column原因 = new System.Data.DataColumn("原因", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column原因);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.column时间,
                                this.column高炉}, true));
                this.column时间.AllowDBNull = false;
                this.column高炉.AllowDBNull = false;
                this.column分类.MaxLength = 100;
                this.column原因.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 休风Row New休风Row() {
                return ((休风Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new 休风Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(休风Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.休风RowChanged != null)) {
                    this.休风RowChanged(this, new 休风RowChangeEvent(((休风Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.休风RowChanging != null)) {
                    this.休风RowChanging(this, new 休风RowChangeEvent(((休风Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.休风RowDeleted != null)) {
                    this.休风RowDeleted(this, new 休风RowChangeEvent(((休风Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.休风RowDeleting != null)) {
                    this.休风RowDeleting(this, new 休风RowChangeEvent(((休风Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove休风Row(休风Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                技术日报数据集 ds = new 技术日报数据集();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "休风DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 慢风DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column时间;
            
            private System.Data.DataColumn column高炉;
            
            private System.Data.DataColumn column间隔;
            
            private System.Data.DataColumn column分类;
            
            private System.Data.DataColumn column原因;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 慢风DataTable() {
                this.TableName = "慢风";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 慢风DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 慢风DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 时间Column {
                get {
                    return this.column时间;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 高炉Column {
                get {
                    return this.column高炉;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 间隔Column {
                get {
                    return this.column间隔;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 分类Column {
                get {
                    return this.column分类;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 原因Column {
                get {
                    return this.column原因;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 慢风Row this[int index] {
                get {
                    return ((慢风Row)(this.Rows[index]));
                }
            }
            
            public event 慢风RowChangeEventHandler 慢风RowChanging;
            
            public event 慢风RowChangeEventHandler 慢风RowChanged;
            
            public event 慢风RowChangeEventHandler 慢风RowDeleting;
            
            public event 慢风RowChangeEventHandler 慢风RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add慢风Row(慢风Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 慢风Row Add慢风Row(System.DateTime 时间, decimal 高炉, decimal 间隔, string 分类, string 原因) {
                慢风Row row慢风Row = ((慢风Row)(this.NewRow()));
                row慢风Row.ItemArray = new object[] {
                        时间,
                        高炉,
                        间隔,
                        分类,
                        原因};
                this.Rows.Add(row慢风Row);
                return row慢风Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 慢风Row FindBy时间高炉(System.DateTime 时间, decimal 高炉) {
                return ((慢风Row)(this.Rows.Find(new object[] {
                            时间,
                            高炉})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                慢风DataTable cln = ((慢风DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new 慢风DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column时间 = base.Columns["时间"];
                this.column高炉 = base.Columns["高炉"];
                this.column间隔 = base.Columns["间隔"];
                this.column分类 = base.Columns["分类"];
                this.column原因 = base.Columns["原因"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column时间 = new System.Data.DataColumn("时间", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column时间);
                this.column高炉 = new System.Data.DataColumn("高炉", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column高炉);
                this.column间隔 = new System.Data.DataColumn("间隔", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column间隔);
                this.column分类 = new System.Data.DataColumn("分类", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column分类);
                this.column原因 = new System.Data.DataColumn("原因", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column原因);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.column时间,
                                this.column高炉}, true));
                this.column时间.AllowDBNull = false;
                this.column高炉.AllowDBNull = false;
                this.column分类.MaxLength = 100;
                this.column原因.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 慢风Row New慢风Row() {
                return ((慢风Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new 慢风Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(慢风Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.慢风RowChanged != null)) {
                    this.慢风RowChanged(this, new 慢风RowChangeEvent(((慢风Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.慢风RowChanging != null)) {
                    this.慢风RowChanging(this, new 慢风RowChangeEvent(((慢风Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.慢风RowDeleted != null)) {
                    this.慢风RowDeleted(this, new 慢风RowChangeEvent(((慢风Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.慢风RowDeleting != null)) {
                    this.慢风RowDeleting(this, new 慢风RowChangeEvent(((慢风Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove慢风Row(慢风Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                技术日报数据集 ds = new 技术日报数据集();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "慢风DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 技术日报Row : System.Data.DataRow {
            
            private 技术日报DataTable table技术日报;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 技术日报Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table技术日报 = ((技术日报DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime P日期 {
                get {
                    return ((System.DateTime)(this[this.table技术日报.P日期Column]));
                }
                set {
                    this[this.table技术日报.P日期Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string P01单位 {
                get {
                    return ((string)(this[this.table技术日报.P01单位Column]));
                }
                set {
                    this[this.table技术日报.P01单位Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string P02项目 {
                get {
                    return ((string)(this[this.table技术日报.P02项目Column]));
                }
                set {
                    this[this.table技术日报.P02项目Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P03合格铁 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P03合格铁Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P03合格铁”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P03合格铁Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P04炼钢铁 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P04炼钢铁Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P04炼钢铁”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P04炼钢铁Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P05铸造铁 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P05铸造铁Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P05铸造铁”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P05铸造铁Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P06号外铁 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P06号外铁Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P06号外铁”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P06号外铁Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P07合格率 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P07合格率Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P07合格率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P07合格率Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P08高炉利用系数 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P08高炉利用系数Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P08高炉利用系数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P08高炉利用系数Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P09高炉实物系数 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P09高炉实物系数Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P09高炉实物系数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P09高炉实物系数Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P10原料矿合计总耗 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P10原料矿合计总耗Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P10原料矿合计总耗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P10原料矿合计总耗Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P11原料矿合计单耗 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P11原料矿合计单耗Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P11原料矿合计单耗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P11原料矿合计单耗Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P12原料矿机烧 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P12原料矿机烧Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P12原料矿机烧”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P12原料矿机烧Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P13原料矿竖炉球 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P13原料矿竖炉球Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P13原料矿竖炉球”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P13原料矿竖炉球Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P14原料矿CT {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P14原料矿CTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P14原料矿CT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P14原料矿CTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P15原料矿其它熟料 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P15原料矿其它熟料Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P15原料矿其它熟料”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P15原料矿其它熟料Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P16原料矿本溪矿 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P16原料矿本溪矿Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P16原料矿本溪矿”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P16原料矿本溪矿Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P17原料矿其它生料 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P17原料矿其它生料Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P17原料矿其它生料”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P17原料矿其它生料Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P18废铁总耗 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P18废铁总耗Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P18废铁总耗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P18废铁总耗Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P19废铁单耗 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P19废铁单耗Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P19废铁单耗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P19废铁单耗Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P20回收率 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P20回收率Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P20回收率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P20回收率Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P21熟料比 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P21熟料比Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P21熟料比”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P21熟料比Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P22平均风温 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P22平均风温Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P22平均风温”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P22平均风温Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P23炉顶温度 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P23炉顶温度Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P23炉顶温度”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P23炉顶温度Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P24热风压力 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P24热风压力Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P24热风压力”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P24热风压力Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P25炉顶压力 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P25炉顶压力Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P25炉顶压力”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P25炉顶压力Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P26富氧率 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P26富氧率Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P26富氧率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P26富氧率Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P27入炉焦炭总耗 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P27入炉焦炭总耗Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P27入炉焦炭总耗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P27入炉焦炭总耗Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P28入炉焦炭单耗 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P28入炉焦炭单耗Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P28入炉焦炭单耗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P28入炉焦炭单耗Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P29煤粉总耗 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P29煤粉总耗Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P29煤粉总耗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P29煤粉总耗Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P30煤粉单耗 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P30煤粉单耗Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P30煤粉单耗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P30煤粉单耗Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P31焦丁总耗 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P31焦丁总耗Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P31焦丁总耗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P31焦丁总耗Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P32焦丁单耗 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P32焦丁单耗Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P32焦丁单耗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P32焦丁单耗Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P33综合焦炭总耗 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P33综合焦炭总耗Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P33综合焦炭总耗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P33综合焦炭总耗Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P34综合焦炭单耗 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P34综合焦炭单耗Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P34综合焦炭单耗”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P34综合焦炭单耗Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P35综合折算焦比 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P35综合折算焦比Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P35综合折算焦比”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P35综合折算焦比Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P36冶炼强度 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P36冶炼强度Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P36冶炼强度”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P36冶炼强度Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P37焦炭负荷 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P37焦炭负荷Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P37焦炭负荷”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P37焦炭负荷Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P38干毛焦 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P38干毛焦Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P38干毛焦”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P38干毛焦Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P39炼钢铁SI {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P39炼钢铁SIColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P39炼钢铁SI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P39炼钢铁SIColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P40炼钢铁MN {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P40炼钢铁MNColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P40炼钢铁MN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P40炼钢铁MNColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P41炼钢铁P {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P41炼钢铁PColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P41炼钢铁P”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P41炼钢铁PColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P42炼钢铁S {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P42炼钢铁SColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P42炼钢铁S”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P42炼钢铁SColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P43铸造铁SI {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P43铸造铁SIColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P43铸造铁SI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P43铸造铁SIColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P44铸造铁MN {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P44铸造铁MNColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P44铸造铁MN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P44铸造铁MNColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P45铸造铁P {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P45铸造铁PColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P45铸造铁P”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P45铸造铁PColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P46铸造铁S {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P46铸造铁SColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P46铸造铁S”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P46铸造铁SColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P47炉渣碱度 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P47炉渣碱度Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P47炉渣碱度”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P47炉渣碱度Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P48休风情况 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P48休风情况Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P48休风情况”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P48休风情况Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P49慢风 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P49慢风Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P49慢风”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P49慢风Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P50坐料次数 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P50坐料次数Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P50坐料次数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P50坐料次数Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P51悬料次数 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P51悬料次数Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P51悬料次数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P51悬料次数Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P52崩料次数 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P52崩料次数Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P52崩料次数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P52崩料次数Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P53风口损坏数大 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P53风口损坏数大Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P53风口损坏数大”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P53风口损坏数大Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P54风口损坏数中 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P54风口损坏数中Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P54风口损坏数中”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P54风口损坏数中Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P55风口损坏数小 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P55风口损坏数小Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P55风口损坏数小”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P55风口损坏数小Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P56渣口损坏数大 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P56渣口损坏数大Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P56渣口损坏数大”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P56渣口损坏数大Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P57渣口损坏数中 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P57渣口损坏数中Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P57渣口损坏数中”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P57渣口损坏数中Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P58渣口损坏数小 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P58渣口损坏数小Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P58渣口损坏数小”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P58渣口损坏数小Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P59本厂铸造SI大 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P59本厂铸造SI大Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P59本厂铸造SI大”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P59本厂铸造SI大Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P60本厂铸造SI小 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P60本厂铸造SI小Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P60本厂铸造SI小”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P60本厂铸造SI小Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P61送炼钢厂SI大 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P61送炼钢厂SI大Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P61送炼钢厂SI大”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P61送炼钢厂SI大Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P62送炼钢厂SI中 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P62送炼钢厂SI中Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P62送炼钢厂SI中”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P62送炼钢厂SI中Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P63送炼钢厂SI小 {
                get {
                    try {
                        return ((double)(this[this.table技术日报.P63送炼钢厂SI小Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“技术日报”中列“P63送炼钢厂SI小”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table技术日报.P63送炼钢厂SI小Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP03合格铁Null() {
                return this.IsNull(this.table技术日报.P03合格铁Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP03合格铁Null() {
                this[this.table技术日报.P03合格铁Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP04炼钢铁Null() {
                return this.IsNull(this.table技术日报.P04炼钢铁Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP04炼钢铁Null() {
                this[this.table技术日报.P04炼钢铁Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP05铸造铁Null() {
                return this.IsNull(this.table技术日报.P05铸造铁Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP05铸造铁Null() {
                this[this.table技术日报.P05铸造铁Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP06号外铁Null() {
                return this.IsNull(this.table技术日报.P06号外铁Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP06号外铁Null() {
                this[this.table技术日报.P06号外铁Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP07合格率Null() {
                return this.IsNull(this.table技术日报.P07合格率Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP07合格率Null() {
                this[this.table技术日报.P07合格率Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP08高炉利用系数Null() {
                return this.IsNull(this.table技术日报.P08高炉利用系数Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP08高炉利用系数Null() {
                this[this.table技术日报.P08高炉利用系数Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP09高炉实物系数Null() {
                return this.IsNull(this.table技术日报.P09高炉实物系数Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP09高炉实物系数Null() {
                this[this.table技术日报.P09高炉实物系数Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP10原料矿合计总耗Null() {
                return this.IsNull(this.table技术日报.P10原料矿合计总耗Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP10原料矿合计总耗Null() {
                this[this.table技术日报.P10原料矿合计总耗Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP11原料矿合计单耗Null() {
                return this.IsNull(this.table技术日报.P11原料矿合计单耗Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP11原料矿合计单耗Null() {
                this[this.table技术日报.P11原料矿合计单耗Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP12原料矿机烧Null() {
                return this.IsNull(this.table技术日报.P12原料矿机烧Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP12原料矿机烧Null() {
                this[this.table技术日报.P12原料矿机烧Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP13原料矿竖炉球Null() {
                return this.IsNull(this.table技术日报.P13原料矿竖炉球Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP13原料矿竖炉球Null() {
                this[this.table技术日报.P13原料矿竖炉球Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP14原料矿CTNull() {
                return this.IsNull(this.table技术日报.P14原料矿CTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP14原料矿CTNull() {
                this[this.table技术日报.P14原料矿CTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP15原料矿其它熟料Null() {
                return this.IsNull(this.table技术日报.P15原料矿其它熟料Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP15原料矿其它熟料Null() {
                this[this.table技术日报.P15原料矿其它熟料Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP16原料矿本溪矿Null() {
                return this.IsNull(this.table技术日报.P16原料矿本溪矿Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP16原料矿本溪矿Null() {
                this[this.table技术日报.P16原料矿本溪矿Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP17原料矿其它生料Null() {
                return this.IsNull(this.table技术日报.P17原料矿其它生料Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP17原料矿其它生料Null() {
                this[this.table技术日报.P17原料矿其它生料Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP18废铁总耗Null() {
                return this.IsNull(this.table技术日报.P18废铁总耗Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP18废铁总耗Null() {
                this[this.table技术日报.P18废铁总耗Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP19废铁单耗Null() {
                return this.IsNull(this.table技术日报.P19废铁单耗Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP19废铁单耗Null() {
                this[this.table技术日报.P19废铁单耗Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP20回收率Null() {
                return this.IsNull(this.table技术日报.P20回收率Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP20回收率Null() {
                this[this.table技术日报.P20回收率Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP21熟料比Null() {
                return this.IsNull(this.table技术日报.P21熟料比Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP21熟料比Null() {
                this[this.table技术日报.P21熟料比Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP22平均风温Null() {
                return this.IsNull(this.table技术日报.P22平均风温Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP22平均风温Null() {
                this[this.table技术日报.P22平均风温Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP23炉顶温度Null() {
                return this.IsNull(this.table技术日报.P23炉顶温度Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP23炉顶温度Null() {
                this[this.table技术日报.P23炉顶温度Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP24热风压力Null() {
                return this.IsNull(this.table技术日报.P24热风压力Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP24热风压力Null() {
                this[this.table技术日报.P24热风压力Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP25炉顶压力Null() {
                return this.IsNull(this.table技术日报.P25炉顶压力Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP25炉顶压力Null() {
                this[this.table技术日报.P25炉顶压力Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP26富氧率Null() {
                return this.IsNull(this.table技术日报.P26富氧率Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP26富氧率Null() {
                this[this.table技术日报.P26富氧率Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP27入炉焦炭总耗Null() {
                return this.IsNull(this.table技术日报.P27入炉焦炭总耗Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP27入炉焦炭总耗Null() {
                this[this.table技术日报.P27入炉焦炭总耗Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP28入炉焦炭单耗Null() {
                return this.IsNull(this.table技术日报.P28入炉焦炭单耗Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP28入炉焦炭单耗Null() {
                this[this.table技术日报.P28入炉焦炭单耗Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP29煤粉总耗Null() {
                return this.IsNull(this.table技术日报.P29煤粉总耗Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP29煤粉总耗Null() {
                this[this.table技术日报.P29煤粉总耗Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP30煤粉单耗Null() {
                return this.IsNull(this.table技术日报.P30煤粉单耗Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP30煤粉单耗Null() {
                this[this.table技术日报.P30煤粉单耗Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP31焦丁总耗Null() {
                return this.IsNull(this.table技术日报.P31焦丁总耗Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP31焦丁总耗Null() {
                this[this.table技术日报.P31焦丁总耗Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP32焦丁单耗Null() {
                return this.IsNull(this.table技术日报.P32焦丁单耗Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP32焦丁单耗Null() {
                this[this.table技术日报.P32焦丁单耗Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP33综合焦炭总耗Null() {
                return this.IsNull(this.table技术日报.P33综合焦炭总耗Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP33综合焦炭总耗Null() {
                this[this.table技术日报.P33综合焦炭总耗Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP34综合焦炭单耗Null() {
                return this.IsNull(this.table技术日报.P34综合焦炭单耗Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP34综合焦炭单耗Null() {
                this[this.table技术日报.P34综合焦炭单耗Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP35综合折算焦比Null() {
                return this.IsNull(this.table技术日报.P35综合折算焦比Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP35综合折算焦比Null() {
                this[this.table技术日报.P35综合折算焦比Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP36冶炼强度Null() {
                return this.IsNull(this.table技术日报.P36冶炼强度Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP36冶炼强度Null() {
                this[this.table技术日报.P36冶炼强度Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP37焦炭负荷Null() {
                return this.IsNull(this.table技术日报.P37焦炭负荷Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP37焦炭负荷Null() {
                this[this.table技术日报.P37焦炭负荷Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP38干毛焦Null() {
                return this.IsNull(this.table技术日报.P38干毛焦Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP38干毛焦Null() {
                this[this.table技术日报.P38干毛焦Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP39炼钢铁SINull() {
                return this.IsNull(this.table技术日报.P39炼钢铁SIColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP39炼钢铁SINull() {
                this[this.table技术日报.P39炼钢铁SIColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP40炼钢铁MNNull() {
                return this.IsNull(this.table技术日报.P40炼钢铁MNColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP40炼钢铁MNNull() {
                this[this.table技术日报.P40炼钢铁MNColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP41炼钢铁PNull() {
                return this.IsNull(this.table技术日报.P41炼钢铁PColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP41炼钢铁PNull() {
                this[this.table技术日报.P41炼钢铁PColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP42炼钢铁SNull() {
                return this.IsNull(this.table技术日报.P42炼钢铁SColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP42炼钢铁SNull() {
                this[this.table技术日报.P42炼钢铁SColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP43铸造铁SINull() {
                return this.IsNull(this.table技术日报.P43铸造铁SIColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP43铸造铁SINull() {
                this[this.table技术日报.P43铸造铁SIColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP44铸造铁MNNull() {
                return this.IsNull(this.table技术日报.P44铸造铁MNColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP44铸造铁MNNull() {
                this[this.table技术日报.P44铸造铁MNColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP45铸造铁PNull() {
                return this.IsNull(this.table技术日报.P45铸造铁PColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP45铸造铁PNull() {
                this[this.table技术日报.P45铸造铁PColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP46铸造铁SNull() {
                return this.IsNull(this.table技术日报.P46铸造铁SColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP46铸造铁SNull() {
                this[this.table技术日报.P46铸造铁SColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP47炉渣碱度Null() {
                return this.IsNull(this.table技术日报.P47炉渣碱度Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP47炉渣碱度Null() {
                this[this.table技术日报.P47炉渣碱度Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP48休风情况Null() {
                return this.IsNull(this.table技术日报.P48休风情况Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP48休风情况Null() {
                this[this.table技术日报.P48休风情况Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP49慢风Null() {
                return this.IsNull(this.table技术日报.P49慢风Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP49慢风Null() {
                this[this.table技术日报.P49慢风Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP50坐料次数Null() {
                return this.IsNull(this.table技术日报.P50坐料次数Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP50坐料次数Null() {
                this[this.table技术日报.P50坐料次数Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP51悬料次数Null() {
                return this.IsNull(this.table技术日报.P51悬料次数Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP51悬料次数Null() {
                this[this.table技术日报.P51悬料次数Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP52崩料次数Null() {
                return this.IsNull(this.table技术日报.P52崩料次数Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP52崩料次数Null() {
                this[this.table技术日报.P52崩料次数Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP53风口损坏数大Null() {
                return this.IsNull(this.table技术日报.P53风口损坏数大Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP53风口损坏数大Null() {
                this[this.table技术日报.P53风口损坏数大Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP54风口损坏数中Null() {
                return this.IsNull(this.table技术日报.P54风口损坏数中Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP54风口损坏数中Null() {
                this[this.table技术日报.P54风口损坏数中Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP55风口损坏数小Null() {
                return this.IsNull(this.table技术日报.P55风口损坏数小Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP55风口损坏数小Null() {
                this[this.table技术日报.P55风口损坏数小Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP56渣口损坏数大Null() {
                return this.IsNull(this.table技术日报.P56渣口损坏数大Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP56渣口损坏数大Null() {
                this[this.table技术日报.P56渣口损坏数大Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP57渣口损坏数中Null() {
                return this.IsNull(this.table技术日报.P57渣口损坏数中Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP57渣口损坏数中Null() {
                this[this.table技术日报.P57渣口损坏数中Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP58渣口损坏数小Null() {
                return this.IsNull(this.table技术日报.P58渣口损坏数小Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP58渣口损坏数小Null() {
                this[this.table技术日报.P58渣口损坏数小Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP59本厂铸造SI大Null() {
                return this.IsNull(this.table技术日报.P59本厂铸造SI大Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP59本厂铸造SI大Null() {
                this[this.table技术日报.P59本厂铸造SI大Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP60本厂铸造SI小Null() {
                return this.IsNull(this.table技术日报.P60本厂铸造SI小Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP60本厂铸造SI小Null() {
                this[this.table技术日报.P60本厂铸造SI小Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP61送炼钢厂SI大Null() {
                return this.IsNull(this.table技术日报.P61送炼钢厂SI大Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP61送炼钢厂SI大Null() {
                this[this.table技术日报.P61送炼钢厂SI大Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP62送炼钢厂SI中Null() {
                return this.IsNull(this.table技术日报.P62送炼钢厂SI中Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP62送炼钢厂SI中Null() {
                this[this.table技术日报.P62送炼钢厂SI中Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP63送炼钢厂SI小Null() {
                return this.IsNull(this.table技术日报.P63送炼钢厂SI小Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP63送炼钢厂SI小Null() {
                this[this.table技术日报.P63送炼钢厂SI小Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 休风Row : System.Data.DataRow {
            
            private 休风DataTable table休风;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 休风Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table休风 = ((休风DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 时间 {
                get {
                    return ((System.DateTime)(this[this.table休风.时间Column]));
                }
                set {
                    this[this.table休风.时间Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 高炉 {
                get {
                    return ((decimal)(this[this.table休风.高炉Column]));
                }
                set {
                    this[this.table休风.高炉Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 间隔 {
                get {
                    try {
                        return ((decimal)(this[this.table休风.间隔Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“休风”中列“间隔”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table休风.间隔Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 分类 {
                get {
                    try {
                        return ((string)(this[this.table休风.分类Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“休风”中列“分类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table休风.分类Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 原因 {
                get {
                    try {
                        return ((string)(this[this.table休风.原因Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“休风”中列“原因”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table休风.原因Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is间隔Null() {
                return this.IsNull(this.table休风.间隔Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set间隔Null() {
                this[this.table休风.间隔Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is分类Null() {
                return this.IsNull(this.table休风.分类Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set分类Null() {
                this[this.table休风.分类Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is原因Null() {
                return this.IsNull(this.table休风.原因Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set原因Null() {
                this[this.table休风.原因Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 慢风Row : System.Data.DataRow {
            
            private 慢风DataTable table慢风;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 慢风Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table慢风 = ((慢风DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 时间 {
                get {
                    return ((System.DateTime)(this[this.table慢风.时间Column]));
                }
                set {
                    this[this.table慢风.时间Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 高炉 {
                get {
                    return ((decimal)(this[this.table慢风.高炉Column]));
                }
                set {
                    this[this.table慢风.高炉Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 间隔 {
                get {
                    try {
                        return ((decimal)(this[this.table慢风.间隔Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“慢风”中列“间隔”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table慢风.间隔Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 分类 {
                get {
                    try {
                        return ((string)(this[this.table慢风.分类Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“慢风”中列“分类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table慢风.分类Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 原因 {
                get {
                    try {
                        return ((string)(this[this.table慢风.原因Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“慢风”中列“原因”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table慢风.原因Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is间隔Null() {
                return this.IsNull(this.table慢风.间隔Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set间隔Null() {
                this[this.table慢风.间隔Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is分类Null() {
                return this.IsNull(this.table慢风.分类Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set分类Null() {
                this[this.table慢风.分类Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is原因Null() {
                return this.IsNull(this.table慢风.原因Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set原因Null() {
                this[this.table慢风.原因Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 技术日报RowChangeEvent : System.EventArgs {
            
            private 技术日报Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 技术日报RowChangeEvent(技术日报Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 技术日报Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 休风RowChangeEvent : System.EventArgs {
            
            private 休风Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 休风RowChangeEvent(休风Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 休风Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 慢风RowChangeEvent : System.EventArgs {
            
            private 慢风Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 慢风RowChangeEvent(慢风Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 慢风Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace LTZN.技术日报.技术日报数据集TableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class 技术日报TableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public 技术日报TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "技术日报";
            tableMapping.ColumnMappings.Add("P日期", "P日期");
            tableMapping.ColumnMappings.Add("P01单位", "P01单位");
            tableMapping.ColumnMappings.Add("P02项目", "P02项目");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"技术日报\" WHERE ((\"P日期\" = :Original_P日期) AND (\"P01单位\" = :Original_P01单位)" +
                " AND (\"P02项目\" = :Original_P02项目))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_P日期", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "P日期", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_P01单位", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "P01单位", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_P02项目", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "P02项目", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"技术日报\" (\"P日期\", \"P01单位\", \"P02项目\") VALUES (:P日期, :P01单位, :P02项目)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("P日期", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "P日期", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("P01单位", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "P01单位", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("P02项目", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "P02项目", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"技术日报\" SET \"P日期\" = :P日期, \"P01单位\" = :P01单位, \"P02项目\" = :P02项目 WHERE ((\"P日期\" " +
                "= :Original_P日期) AND (\"P01单位\" = :Original_P01单位) AND (\"P02项目\" = :Original_P02项目)" +
                ")";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("P日期", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "P日期", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("P01单位", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "P01单位", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("P02项目", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "P02项目", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_P日期", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "P日期", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_P01单位", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "P01单位", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_P02项目", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "P02项目", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::LTZN.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT P日期, P01单位, P02项目 FROM 技术日报 WHERE (P日期 = :P日期)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.OracleClient.OracleParameter("P日期", System.Data.OracleClient.OracleType.DateTime, 7, System.Data.ParameterDirection.Input, "P日期", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillByRq(技术日报数据集.技术日报DataTable dataTable, System.DateTime P日期) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(P日期));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual 技术日报数据集.技术日报DataTable GetDataByRq(System.DateTime P日期) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(P日期));
            技术日报数据集.技术日报DataTable dataTable = new 技术日报数据集.技术日报DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(技术日报数据集.技术日报DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(技术日报数据集 dataSet) {
            return this.Adapter.Update(dataSet, "技术日报");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class 休风TableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public 休风TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "休风";
            tableMapping.ColumnMappings.Add("时间", "时间");
            tableMapping.ColumnMappings.Add("高炉", "高炉");
            tableMapping.ColumnMappings.Add("间隔", "间隔");
            tableMapping.ColumnMappings.Add("分类", "分类");
            tableMapping.ColumnMappings.Add("原因", "原因");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""LF"".""休风"" WHERE ((""时间"" = :Original_时间) AND (""高炉"" = :Original_高炉) AND ((:IsNull_间隔 = 1 AND ""间隔"" IS NULL) OR (""间隔"" = :Original_间隔)) AND ((:IsNull_分类 = 1 AND ""分类"" IS NULL) OR (""分类"" = :Original_分类)) AND ((:IsNull_原因 = 1 AND ""原因"" IS NULL) OR (""原因"" = :Original_原因)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_时间", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "时间", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_高炉", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "高炉", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_间隔", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "间隔", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_间隔", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "间隔", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_分类", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "分类", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_分类", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "分类", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_原因", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "原因", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_原因", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "原因", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"LF\".\"休风\" (\"时间\", \"高炉\", \"间隔\", \"分类\", \"原因\") VALUES (:时间, :高炉, :间隔, :分类, " +
                ":原因)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("时间", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "时间", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("高炉", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "高炉", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("间隔", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "间隔", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("分类", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "分类", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("原因", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "原因", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""LF"".""休风"" SET ""时间"" = :时间, ""高炉"" = :高炉, ""间隔"" = :间隔, ""分类"" = :分类, ""原因"" = :原因 WHERE ((""时间"" = :Original_时间) AND (""高炉"" = :Original_高炉) AND ((:IsNull_间隔 = 1 AND ""间隔"" IS NULL) OR (""间隔"" = :Original_间隔)) AND ((:IsNull_分类 = 1 AND ""分类"" IS NULL) OR (""分类"" = :Original_分类)) AND ((:IsNull_原因 = 1 AND ""原因"" IS NULL) OR (""原因"" = :Original_原因)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("时间", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "时间", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("高炉", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "高炉", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("间隔", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "间隔", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("分类", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "分类", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("原因", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "原因", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_时间", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "时间", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_高炉", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "高炉", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_间隔", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "间隔", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_间隔", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "间隔", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_分类", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "分类", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_分类", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "分类", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_原因", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "原因", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_原因", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "原因", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::LTZN.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 时间, 高炉, 间隔, 分类, 原因 FROM LF.休风";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(技术日报数据集.休风DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual 技术日报数据集.休风DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            技术日报数据集.休风DataTable dataTable = new 技术日报数据集.休风DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(技术日报数据集.休风DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(技术日报数据集 dataSet) {
            return this.Adapter.Update(dataSet, "休风");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.DateTime Original_时间, decimal Original_高炉, System.Nullable<decimal> Original_间隔, string Original_分类, string Original_原因) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.DateTime)(Original_时间));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_高炉));
            if ((Original_间隔.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_间隔.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Original_分类 == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_分类));
            }
            if ((Original_原因 == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_原因));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.DateTime 时间, decimal 高炉, System.Nullable<decimal> 间隔, string 分类, string 原因) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(时间));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(高炉));
            if ((间隔.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(间隔.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((分类 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(分类));
            }
            if ((原因 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(原因));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime 时间, decimal 高炉, System.Nullable<decimal> 间隔, string 分类, string 原因, System.DateTime Original_时间, decimal Original_高炉, System.Nullable<decimal> Original_间隔, string Original_分类, string Original_原因) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.DateTime)(时间));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(高炉));
            if ((间隔.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(间隔.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((分类 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(分类));
            }
            if ((原因 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(原因));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(Original_时间));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_高炉));
            if ((Original_间隔.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_间隔.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_分类 == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_分类));
            }
            if ((Original_原因 == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_原因));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class 慢风TableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public 慢风TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "慢风";
            tableMapping.ColumnMappings.Add("时间", "时间");
            tableMapping.ColumnMappings.Add("高炉", "高炉");
            tableMapping.ColumnMappings.Add("间隔", "间隔");
            tableMapping.ColumnMappings.Add("分类", "分类");
            tableMapping.ColumnMappings.Add("原因", "原因");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""LF"".""慢风"" WHERE ((""时间"" = :Original_时间) AND (""高炉"" = :Original_高炉) AND ((:IsNull_间隔 = 1 AND ""间隔"" IS NULL) OR (""间隔"" = :Original_间隔)) AND ((:IsNull_分类 = 1 AND ""分类"" IS NULL) OR (""分类"" = :Original_分类)) AND ((:IsNull_原因 = 1 AND ""原因"" IS NULL) OR (""原因"" = :Original_原因)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_时间", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "时间", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_高炉", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "高炉", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_间隔", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "间隔", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_间隔", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "间隔", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_分类", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "分类", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_分类", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "分类", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_原因", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "原因", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_原因", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "原因", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"LF\".\"慢风\" (\"时间\", \"高炉\", \"间隔\", \"分类\", \"原因\") VALUES (:时间, :高炉, :间隔, :分类, " +
                ":原因)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("时间", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "时间", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("高炉", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "高炉", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("间隔", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "间隔", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("分类", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "分类", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("原因", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "原因", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""LF"".""慢风"" SET ""时间"" = :时间, ""高炉"" = :高炉, ""间隔"" = :间隔, ""分类"" = :分类, ""原因"" = :原因 WHERE ((""时间"" = :Original_时间) AND (""高炉"" = :Original_高炉) AND ((:IsNull_间隔 = 1 AND ""间隔"" IS NULL) OR (""间隔"" = :Original_间隔)) AND ((:IsNull_分类 = 1 AND ""分类"" IS NULL) OR (""分类"" = :Original_分类)) AND ((:IsNull_原因 = 1 AND ""原因"" IS NULL) OR (""原因"" = :Original_原因)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("时间", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "时间", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("高炉", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "高炉", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("间隔", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "间隔", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("分类", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "分类", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("原因", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "原因", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_时间", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "时间", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_高炉", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "高炉", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_间隔", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "间隔", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_间隔", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "间隔", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_分类", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "分类", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_分类", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "分类", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_原因", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "原因", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_原因", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "原因", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::LTZN.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 时间, 高炉, 间隔, 分类, 原因 FROM LF.慢风";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(技术日报数据集.慢风DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual 技术日报数据集.慢风DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            技术日报数据集.慢风DataTable dataTable = new 技术日报数据集.慢风DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(技术日报数据集.慢风DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(技术日报数据集 dataSet) {
            return this.Adapter.Update(dataSet, "慢风");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.DateTime Original_时间, decimal Original_高炉, System.Nullable<decimal> Original_间隔, string Original_分类, string Original_原因) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.DateTime)(Original_时间));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_高炉));
            if ((Original_间隔.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_间隔.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Original_分类 == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_分类));
            }
            if ((Original_原因 == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_原因));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.DateTime 时间, decimal 高炉, System.Nullable<decimal> 间隔, string 分类, string 原因) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(时间));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(高炉));
            if ((间隔.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(间隔.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((分类 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(分类));
            }
            if ((原因 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(原因));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime 时间, decimal 高炉, System.Nullable<decimal> 间隔, string 分类, string 原因, System.DateTime Original_时间, decimal Original_高炉, System.Nullable<decimal> Original_间隔, string Original_分类, string Original_原因) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.DateTime)(时间));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(高炉));
            if ((间隔.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(间隔.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((分类 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(分类));
            }
            if ((原因 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(原因));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(Original_时间));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_高炉));
            if ((Original_间隔.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_间隔.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_分类 == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_分类));
            }
            if ((Original_原因 == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_原因));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591