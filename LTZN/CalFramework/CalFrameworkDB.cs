//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace LTZN.CalFramework {
    using System;
    using System.Data;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Reflection;
    using System.Data.OracleClient;
    
    public enum DataStateType {
UnChanged,Add,Update,Delete
    }
    public interface IFilter {
void Filter(Dictionary<string, string> para);
    }
    public partial class Calf_Calmodel : INotifyPropertyChanged {
        private string _EID = "";
        private string _Ori_EID = "";
        private string _MODELNAME = "";
        private Calf_TagorganizationTable _Calf_TagorganizationTable = null;
        private Calf_GraphTable _Calf_GraphTable = null;
        private Calf_CaltagTable _Calf_CaltagTable = null;
  //ConStr 
  public DataStateType DataState = DataStateType.Add;

   public event PropertyChangedEventHandler PropertyChanged;

   private void RaisePropertyChanged(string propertyName,bool induceChanged)
   {
      if (PropertyChanged != null)
      {
         PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
         if(induceChanged)
         {
            if (this.DataState == DataStateType.UnChanged)
               this.DataState = DataStateType.Update;
         }
      }
   }

   public void ClearDataState()
   {
     this.DataState = DataStateType.UnChanged;
   }
         
   private bool Initing=false;        

   public void BeginInit()
   {
     Initing=true;
   }
 
   public void EndInit()
   {
      Initing=false;
   }

   public void Save()
   {
     OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
     con.Open();
     OracleTransaction trans = con.BeginTransaction();
     Save(trans);
     trans.Commit();
     con.Close();
   }

   public void Save(OracleTransaction trans)
   {
      OracleConnection con = trans.Connection;
      DbDelete(trans);
      DbInsert(trans);
      DbUpdate(trans);
      ClearDataState();
      SaveOther(trans);
   }
  
   public void Delete()
   {
      if (this.DataState == DataStateType.Add)
           this.DataState = DataStateType.UnChanged;
      else
           this.DataState = DataStateType.Delete;
   }

        
        public string EID {
            get {
                return this._EID;
            }
            set {
if (Initing) Ori_EID= value;
 if (!_EID.Equals(value)){
_EID= value;
 RaisePropertyChanged("EID",true);}

            }
        }
        [Browsable(false)]
        public string Ori_EID {
            get {
                return this._Ori_EID;
            }
            set {
 if (!_Ori_EID.Equals(value)){
_Ori_EID= value;
}

            }
        }
        public string MODELNAME {
            get {
                return this._MODELNAME;
            }
            set {
 if (!_MODELNAME.Equals(value)){
_MODELNAME= value;
 RaisePropertyChanged("MODELNAME",true);}

            }
        }
        [Browsable(false)]
        public virtual Calf_TagorganizationTable Calf_TagorganizationTable {
            get {
if (_Calf_TagorganizationTable == null){
_Calf_TagorganizationTable = new Calf_TagorganizationTable();
if (this.DataState != DataStateType.Add){
_Calf_TagorganizationTable.LoadByCALMODELID(this.EID);}}
return _Calf_TagorganizationTable;

            }
        }
        [Browsable(false)]
        public virtual Calf_GraphTable Calf_GraphTable {
            get {
if (_Calf_GraphTable == null){
_Calf_GraphTable = new Calf_GraphTable();
if (this.DataState != DataStateType.Add){
_Calf_GraphTable.LoadByCALMODELID(this.EID);}}
return _Calf_GraphTable;

            }
        }
        [Browsable(false)]
        public virtual Calf_CaltagTable Calf_CaltagTable {
            get {
if (_Calf_CaltagTable == null){
_Calf_CaltagTable = new Calf_CaltagTable();
if (this.DataState != DataStateType.Add){
_Calf_CaltagTable.LoadByCALMODELID(this.EID);}}
return _Calf_CaltagTable;

            }
        }
        public virtual void SaveOther(OracleTransaction trans) {
if (_Calf_TagorganizationTable!= null){
foreach(Calf_Tagorganization item in _Calf_TagorganizationTable){
item.BeginInit();
item.CALMODELID=this.EID;
item.EndInit();}
_Calf_TagorganizationTable.Save(trans);}
if (_Calf_GraphTable!= null){
foreach(Calf_Graph item in _Calf_GraphTable){
item.BeginInit();
item.CALMODELID=this.EID;
item.EndInit();}
_Calf_GraphTable.Save(trans);}
if (_Calf_CaltagTable!= null){
foreach(Calf_Caltag item in _Calf_CaltagTable){
item.BeginInit();
item.CALMODELID=this.EID;
item.EndInit();}
_Calf_CaltagTable.Save(trans);}

        }
        public void DbInsert(OracleTransaction trans) {
  //InsertSql,InsertPara,AutoSql
  if (DataState == DataStateType.Add)
  {
     OracleConnection con = trans.Connection;
     OracleCommand insertCmd = new OracleCommand();
     insertCmd.Connection = con;
     insertCmd.Transaction = trans;
     insertCmd.CommandText = "INSERT INTO CALF_CALMODEL(EID,MODELNAME) VALUES(:EID,:MODELNAME)";
     insertCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
insertCmd.Parameters.Add(":MODELNAME",OracleType.VarChar,200).Value=this.MODELNAME;

     insertCmd.ExecuteNonQuery();
     
   }
          

        
        }
        public void DbDelete(OracleTransaction trans) {
  //DelSql,DelPara
  if (DataState == DataStateType.Delete)
  {
     OracleConnection con = trans.Connection;
     OracleCommand deleteCmd = new OracleCommand();
     deleteCmd.Connection = con;
     deleteCmd.Transaction = trans;
     deleteCmd.CommandText = "DELETE FROM CALF_CALMODEL WHERE EID=:Ori_EID";
     deleteCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     deleteCmd.ExecuteNonQuery();
  }
         
        }
        public void DbUpdate(OracleTransaction trans) {
  //UpdateSql,UpdatePara
  if (DataState == DataStateType.Update)
  {
     OracleConnection con = trans.Connection;
     OracleCommand updateCmd = new OracleCommand();
     updateCmd.Connection = con;
     updateCmd.Transaction=trans;
     updateCmd.CommandText = "UPDATE CALF_CALMODEL SET EID=:EID,MODELNAME=:MODELNAME WHERE EID=:Ori_EID";
     updateCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
updateCmd.Parameters.Add(":MODELNAME",OracleType.VarChar,200).Value=this.MODELNAME;
updateCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     updateCmd.ExecuteNonQuery();
  }
          
        
        }
        public static Calf_Calmodel LoadByPk(string EID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal      
   Calf_Calmodel item=null;
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,MODELNAME FROM CALF_CALMODEL WHERE EID=:EID";
   selectCmd.Parameters.Add(":EID",OracleType.Char,32).Value=EID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   if (dr.Read())
   {
      item = new Calf_Calmodel();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.MODELNAME="";  else item.MODELNAME=dr.GetString(1); 

      item.EndInit();
      item.ClearDataState();
   }
   dr.Close();
   con.Close();
   return item;
        }
    }
    public partial class Calf_CalmodelTable : BindingList<Calf_Calmodel>, IFilter {
       //Calf_Calmodel,ltznConnectionString

       private List<Calf_Calmodel> hideList = new List<Calf_Calmodel>();

        public  void Save()
        {
            OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleTransaction trans = con.BeginTransaction();
            Save(trans);
            trans.Commit();
            con.Close();
        }

        public  void Save(OracleTransaction trans)
        {
            List<Calf_Calmodel> deleteList = new List<Calf_Calmodel>();
            OracleConnection con = trans.Connection;
            foreach (Calf_Calmodel item in hideList)
            {
                if (item.DataState == DataStateType.Delete)
                    deleteList.Add(item);
                item.Save(trans);
            }
            foreach (Calf_Calmodel item in deleteList)
            {
                hideList.Remove(item);
            }
        }

        protected override void InsertItem(int index, Calf_Calmodel item)
        {
          base.InsertItem(index, item);
          if(!beginAdjustData)
          {
            hideList.Add(item);
          }
        }

        protected override void ClearItems()
        {
           if(!beginAdjustData)
           {
             foreach (Calf_Calmodel delObj in this)
             {
               if (delObj.DataState == DataStateType.Add)
               {
                  hideList.Remove(delObj);
               }
               delObj.Delete();
             }
           }
            base.ClearItems();
        }

        protected override void RemoveItem(int index)
        {
          if(!beginAdjustData)
          {
             Calf_Calmodel delObj = this[index];
             if (delObj.DataState == DataStateType.Add)
             {
                hideList.Remove(delObj);
             }
             delObj.Delete();
           }
           base.RemoveItem(index);
        }

        protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)
        {
            propertyDescriptor = prop;
            sortDirection = direction; 
            _IsSortedCore = true;
            List<Calf_Calmodel> list = this.Items as List<Calf_Calmodel>;
            list.Sort(Compare); 
            _IsSortedCore = true;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, propertyDescriptor);
            this.OnListChanged(arg);
           
        }
      
        private PropertyDescriptor propertyDescriptor = null;
        protected override PropertyDescriptor SortPropertyCore
        {
            get
            {
                return propertyDescriptor;
            }
        }
       
        private ListSortDirection sortDirection = ListSortDirection.Ascending;
        protected override ListSortDirection SortDirectionCore
        {
            get
            {
                return sortDirection;
            }
        }

        private int Compare(Calf_Calmodel x, Calf_Calmodel y)
        {
            if (sortDirection == ListSortDirection.Descending)
                return CompareValue(propertyDescriptor.GetValue(y), propertyDescriptor.GetValue(x));
            else
                return CompareValue(propertyDescriptor.GetValue(x), propertyDescriptor.GetValue(y));
        }

        private int Compare2(Calf_Calmodel x, Calf_Calmodel y)
        {
            return hideList.IndexOf(x).CompareTo(hideList.IndexOf(y));
        }

        static int CompareValue(object o1, object o2)
        {
            if (o1 == null) return o2 == null ? 0 : -1;
            else if (o2 == null) return 1;
            else if (o1 is IComparable) return ((IComparable)o1).CompareTo(o2);
            else if (o2 is IComparable) return ((IComparable)o2).CompareTo(o1);
            else return o1.ToString().CompareTo(o2.ToString());
        }

        protected override bool SupportsSortingCore
        {
            get
            {
                return true;
            }
        }
       
        private bool _IsSortedCore = false;
        protected override bool IsSortedCore
        {
            get
            {
                return _IsSortedCore;
            }
        }
    
        protected  override void RemoveSortCore()
        {
            _IsSortedCore = false;
            List<Calf_Calmodel> list = this.Items as List<Calf_Calmodel>;
            list.Sort(Compare2); 
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public void RemoveSort()
        {
            RemoveSortCore();
        }

        private bool beginAdjustData = false;
       
       

        public void CancelFilter()
        {
            beginAdjustData =true;
            this.Clear();
            foreach (Calf_Calmodel item in hideList)
            {
                if(item.DataState != DataStateType.Delete)
                {
                    this.Add(item);
                }
            }
            beginAdjustData =false;

            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset,-1);
            this.OnListChanged(arg);
        }

        protected override void OnListChanged(ListChangedEventArgs e)
        {
            if (!beginAdjustData)
                base.OnListChanged(e);
        }

        #region IFilter 成员

        public void Filter(Dictionary<string, string> para)
        {
            beginAdjustData= true;
            this.Clear();
            foreach (Calf_Calmodel hideItem in hideList)
            {
                bool shouldAdd = true;
                shouldAdd &= (hideItem.DataState != DataStateType.Delete);

                foreach (KeyValuePair<string, string> item in para)
                {
                    PropertyInfo p = typeof(Calf_Calmodel).GetProperty(item.Key);
                    if (p == null) continue;
                    if (p.PropertyType == typeof(string))
                    {
                        string val = Convert.ToString(p.GetValue(hideItem, null));
                        shouldAdd &= val.StartsWith(item.Value);
                    }
                    if (p.PropertyType == typeof(double))
                    {
                        double val = Convert.ToDouble(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToDouble(item.Value));
                    }
                    if (p.PropertyType == typeof(int))
                    {
                        int val = Convert.ToInt32(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt32(item.Value));
                    }
                    if (p.PropertyType == typeof(long))
                    {
                        long val = Convert.ToInt64(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt64(item.Value));
                    }
                }
                if (shouldAdd)
                    this.Add(hideItem);
            }
            List<Calf_Calmodel> list = this.Items as List<Calf_Calmodel>;
            if (IsSortedCore)
                list.Sort(Compare);
            else
                list.Sort(Compare2);

            beginAdjustData= false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        #endregion
        public void Load() {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,MODELNAME FROM CALF_CALMODEL";
   
   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Calmodel item = new Calf_Calmodel();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
item.Ori_EID=item.EID;
if(dr.IsDBNull(1)) item.MODELNAME="";  else item.MODELNAME=dr.GetString(1); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
    }
    public partial class Calf_Caltag : INotifyPropertyChanged {
        private string _EID = "";
        private string _Ori_EID = "";
        private string _CALMODELID = "";
        private string _TAGNAME = "";
        private string _FORMA = "";
        private string _TAGORGANIZATIONID = "";
        private string _TAGGROUPID = "";
        private string _GRAPHID = "";
        private double _DEC;
        private double _DOSUM;
        private double _DODEC;
        private double _DOBALANCE;
  //ConStr 
  public DataStateType DataState = DataStateType.Add;

   public event PropertyChangedEventHandler PropertyChanged;

   private void RaisePropertyChanged(string propertyName,bool induceChanged)
   {
      if (PropertyChanged != null)
      {
         PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
         if(induceChanged)
         {
            if (this.DataState == DataStateType.UnChanged)
               this.DataState = DataStateType.Update;
         }
      }
   }

   public void ClearDataState()
   {
     this.DataState = DataStateType.UnChanged;
   }
         
   private bool Initing=false;        

   public void BeginInit()
   {
     Initing=true;
   }
 
   public void EndInit()
   {
      Initing=false;
   }

   public void Save()
   {
     OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
     con.Open();
     OracleTransaction trans = con.BeginTransaction();
     Save(trans);
     trans.Commit();
     con.Close();
   }

   public void Save(OracleTransaction trans)
   {
      OracleConnection con = trans.Connection;
      DbDelete(trans);
      DbInsert(trans);
      DbUpdate(trans);
      ClearDataState();
      SaveOther(trans);
   }
  
   public void Delete()
   {
      if (this.DataState == DataStateType.Add)
           this.DataState = DataStateType.UnChanged;
      else
           this.DataState = DataStateType.Delete;
   }

        
        public string EID {
            get {
                return this._EID;
            }
            set {
if (Initing) Ori_EID= value;
 if (!_EID.Equals(value)){
_EID= value;
 RaisePropertyChanged("EID",true);}

            }
        }
        [Browsable(false)]
        public string Ori_EID {
            get {
                return this._Ori_EID;
            }
            set {
 if (!_Ori_EID.Equals(value)){
_Ori_EID= value;
}

            }
        }
        public string CALMODELID {
            get {
                return this._CALMODELID;
            }
            set {
 if (!_CALMODELID.Equals(value)){
_CALMODELID= value;
 RaisePropertyChanged("CALMODELID",true);}

            }
        }
        public string TAGNAME {
            get {
                return this._TAGNAME;
            }
            set {
 if (!_TAGNAME.Equals(value)){
_TAGNAME= value;
 RaisePropertyChanged("TAGNAME",true);}

            }
        }
        public string FORMA {
            get {
                return this._FORMA;
            }
            set {
 if (!_FORMA.Equals(value)){
_FORMA= value;
 RaisePropertyChanged("FORMA",true);}

            }
        }
        public string TAGORGANIZATIONID {
            get {
                return this._TAGORGANIZATIONID;
            }
            set {
 if (!_TAGORGANIZATIONID.Equals(value)){
_TAGORGANIZATIONID= value;
 RaisePropertyChanged("TAGORGANIZATIONID",true);}

            }
        }
        public string TAGGROUPID {
            get {
                return this._TAGGROUPID;
            }
            set {
 if (!_TAGGROUPID.Equals(value)){
_TAGGROUPID= value;
 RaisePropertyChanged("TAGGROUPID",true);}

            }
        }
        public string GRAPHID {
            get {
                return this._GRAPHID;
            }
            set {
 if (!_GRAPHID.Equals(value)){
_GRAPHID= value;
 RaisePropertyChanged("GRAPHID",true);}

            }
        }
        public double DEC {
            get {
                return this._DEC;
            }
            set {
 if (!_DEC.Equals(value)){
_DEC= value;
 RaisePropertyChanged("DEC",true);}

            }
        }
        public double DOSUM {
            get {
                return this._DOSUM;
            }
            set {
 if (!_DOSUM.Equals(value)){
_DOSUM= value;
 RaisePropertyChanged("DOSUM",true);}

            }
        }
        public double DODEC {
            get {
                return this._DODEC;
            }
            set {
 if (!_DODEC.Equals(value)){
_DODEC= value;
 RaisePropertyChanged("DODEC",true);}

            }
        }
        public double DOBALANCE {
            get {
                return this._DOBALANCE;
            }
            set {
 if (!_DOBALANCE.Equals(value)){
_DOBALANCE= value;
 RaisePropertyChanged("DOBALANCE",true);}

            }
        }
        public virtual void SaveOther(OracleTransaction trans) {

        }
        public void DbInsert(OracleTransaction trans) {
  //InsertSql,InsertPara,AutoSql
  if (DataState == DataStateType.Add)
  {
     OracleConnection con = trans.Connection;
     OracleCommand insertCmd = new OracleCommand();
     insertCmd.Connection = con;
     insertCmd.Transaction = trans;
     insertCmd.CommandText = "INSERT INTO CALF_CALTAG(EID,CALMODELID,TAGNAME,FORMA,TAGORGANIZATIONID,TAGGROUPID,GRAPHID,DEC,DOSUM,DODEC,DOBALANCE) VALUES(:EID,:CALMODELID,:TAGNAME,:FORMA,:TAGORGANIZATIONID,:TAGGROUPID,:GRAPHID,:DEC,:DOSUM,:DODEC,:DOBALANCE)";
     insertCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
insertCmd.Parameters.Add(":CALMODELID",OracleType.Char,32).Value=this.CALMODELID;
insertCmd.Parameters.Add(":TAGNAME",OracleType.VarChar,200).Value=this.TAGNAME;
insertCmd.Parameters.Add(":FORMA",OracleType.VarChar,200).Value=this.FORMA;
insertCmd.Parameters.Add(":TAGORGANIZATIONID",OracleType.Char,32).Value=this.TAGORGANIZATIONID;
insertCmd.Parameters.Add(":TAGGROUPID",OracleType.Char,32).Value=this.TAGGROUPID;
insertCmd.Parameters.Add(":GRAPHID",OracleType.Char,32).Value=this.GRAPHID;
if(this.DEC==-1)
insertCmd.Parameters.Add(":DEC", OracleType.Double,22).Value=DBNull.Value;
else
insertCmd.Parameters.Add(":DEC", OracleType.Double,22).Value=this.DEC;
if(this.DOSUM==-1)
insertCmd.Parameters.Add(":DOSUM", OracleType.Double,22).Value=DBNull.Value;
else
insertCmd.Parameters.Add(":DOSUM", OracleType.Double,22).Value=this.DOSUM;
if(this.DODEC==-1)
insertCmd.Parameters.Add(":DODEC", OracleType.Double,22).Value=DBNull.Value;
else
insertCmd.Parameters.Add(":DODEC", OracleType.Double,22).Value=this.DODEC;
if(this.DOBALANCE==-1)
insertCmd.Parameters.Add(":DOBALANCE", OracleType.Double,22).Value=DBNull.Value;
else
insertCmd.Parameters.Add(":DOBALANCE", OracleType.Double,22).Value=this.DOBALANCE;

     insertCmd.ExecuteNonQuery();
     
   }
          

        
        }
        public void DbDelete(OracleTransaction trans) {
  //DelSql,DelPara
  if (DataState == DataStateType.Delete)
  {
     OracleConnection con = trans.Connection;
     OracleCommand deleteCmd = new OracleCommand();
     deleteCmd.Connection = con;
     deleteCmd.Transaction = trans;
     deleteCmd.CommandText = "DELETE FROM CALF_CALTAG WHERE EID=:Ori_EID";
     deleteCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     deleteCmd.ExecuteNonQuery();
  }
         
        }
        public void DbUpdate(OracleTransaction trans) {
  //UpdateSql,UpdatePara
  if (DataState == DataStateType.Update)
  {
     OracleConnection con = trans.Connection;
     OracleCommand updateCmd = new OracleCommand();
     updateCmd.Connection = con;
     updateCmd.Transaction=trans;
     updateCmd.CommandText = "UPDATE CALF_CALTAG SET EID=:EID,CALMODELID=:CALMODELID,TAGNAME=:TAGNAME,FORMA=:FORMA,TAGORGANIZATIONID=:TAGORGANIZATIONID,TAGGROUPID=:TAGGROUPID,GRAPHID=:GRAPHID,DEC=:DEC,DOSUM=:DOSUM,DODEC=:DODEC,DOBALANCE=:DOBALANCE WHERE EID=:Ori_EID";
     updateCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
updateCmd.Parameters.Add(":CALMODELID",OracleType.Char,32).Value=this.CALMODELID;
updateCmd.Parameters.Add(":TAGNAME",OracleType.VarChar,200).Value=this.TAGNAME;
updateCmd.Parameters.Add(":FORMA",OracleType.VarChar,200).Value=this.FORMA;
updateCmd.Parameters.Add(":TAGORGANIZATIONID",OracleType.Char,32).Value=this.TAGORGANIZATIONID;
updateCmd.Parameters.Add(":TAGGROUPID",OracleType.Char,32).Value=this.TAGGROUPID;
updateCmd.Parameters.Add(":GRAPHID",OracleType.Char,32).Value=this.GRAPHID;
updateCmd.Parameters.Add(":DEC", OracleType.Double,22).Value=this.DEC;
updateCmd.Parameters.Add(":DOSUM", OracleType.Double,22).Value=this.DOSUM;
updateCmd.Parameters.Add(":DODEC", OracleType.Double,22).Value=this.DODEC;
updateCmd.Parameters.Add(":DOBALANCE", OracleType.Double,22).Value=this.DOBALANCE;
updateCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     updateCmd.ExecuteNonQuery();
  }
          
        
        }
        public static Calf_Caltag LoadByPk(string EID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal      
   Calf_Caltag item=null;
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,TAGNAME,FORMA,TAGORGANIZATIONID,TAGGROUPID,GRAPHID,DEC,DOSUM,DODEC,DOBALANCE FROM CALF_CALTAG WHERE EID=:EID";
   selectCmd.Parameters.Add(":EID",OracleType.Char,32).Value=EID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   if (dr.Read())
   {
      item = new Calf_Caltag();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.TAGNAME="";  else item.TAGNAME=dr.GetString(2); 
if(dr.IsDBNull(3)) item.FORMA="";  else item.FORMA=dr.GetString(3); 
if(dr.IsDBNull(4)) item.TAGORGANIZATIONID="";  else item.TAGORGANIZATIONID=dr.GetString(4); 
if(dr.IsDBNull(5)) item.TAGGROUPID="";  else item.TAGGROUPID=dr.GetString(5); 
if(dr.IsDBNull(6)) item.GRAPHID="";  else item.GRAPHID=dr.GetString(6); 
if(dr.IsDBNull(7)) item.DEC=0;  else item.DEC=dr.GetDouble(7); 
if(dr.IsDBNull(8)) item.DOSUM=0;  else item.DOSUM=dr.GetDouble(8); 
if(dr.IsDBNull(9)) item.DODEC=0;  else item.DODEC=dr.GetDouble(9); 
if(dr.IsDBNull(10)) item.DOBALANCE=0;  else item.DOBALANCE=dr.GetDouble(10); 

      item.EndInit();
      item.ClearDataState();
   }
   dr.Close();
   con.Close();
   return item;
        }
    }
    public partial class Calf_CaltagTable : BindingList<Calf_Caltag>, IFilter {
       //Calf_Caltag,ltznConnectionString

       private List<Calf_Caltag> hideList = new List<Calf_Caltag>();

        public  void Save()
        {
            OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleTransaction trans = con.BeginTransaction();
            Save(trans);
            trans.Commit();
            con.Close();
        }

        public  void Save(OracleTransaction trans)
        {
            List<Calf_Caltag> deleteList = new List<Calf_Caltag>();
            OracleConnection con = trans.Connection;
            foreach (Calf_Caltag item in hideList)
            {
                if (item.DataState == DataStateType.Delete)
                    deleteList.Add(item);
                item.Save(trans);
            }
            foreach (Calf_Caltag item in deleteList)
            {
                hideList.Remove(item);
            }
        }

        protected override void InsertItem(int index, Calf_Caltag item)
        {
          base.InsertItem(index, item);
          if(!beginAdjustData)
          {
            hideList.Add(item);
          }
        }

        protected override void ClearItems()
        {
           if(!beginAdjustData)
           {
             foreach (Calf_Caltag delObj in this)
             {
               if (delObj.DataState == DataStateType.Add)
               {
                  hideList.Remove(delObj);
               }
               delObj.Delete();
             }
           }
            base.ClearItems();
        }

        protected override void RemoveItem(int index)
        {
          if(!beginAdjustData)
          {
             Calf_Caltag delObj = this[index];
             if (delObj.DataState == DataStateType.Add)
             {
                hideList.Remove(delObj);
             }
             delObj.Delete();
           }
           base.RemoveItem(index);
        }

        protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)
        {
            propertyDescriptor = prop;
            sortDirection = direction; 
            _IsSortedCore = true;
            List<Calf_Caltag> list = this.Items as List<Calf_Caltag>;
            list.Sort(Compare); 
            _IsSortedCore = true;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, propertyDescriptor);
            this.OnListChanged(arg);
           
        }
      
        private PropertyDescriptor propertyDescriptor = null;
        protected override PropertyDescriptor SortPropertyCore
        {
            get
            {
                return propertyDescriptor;
            }
        }
       
        private ListSortDirection sortDirection = ListSortDirection.Ascending;
        protected override ListSortDirection SortDirectionCore
        {
            get
            {
                return sortDirection;
            }
        }

        private int Compare(Calf_Caltag x, Calf_Caltag y)
        {
            if (sortDirection == ListSortDirection.Descending)
                return CompareValue(propertyDescriptor.GetValue(y), propertyDescriptor.GetValue(x));
            else
                return CompareValue(propertyDescriptor.GetValue(x), propertyDescriptor.GetValue(y));
        }

        private int Compare2(Calf_Caltag x, Calf_Caltag y)
        {
            return hideList.IndexOf(x).CompareTo(hideList.IndexOf(y));
        }

        static int CompareValue(object o1, object o2)
        {
            if (o1 == null) return o2 == null ? 0 : -1;
            else if (o2 == null) return 1;
            else if (o1 is IComparable) return ((IComparable)o1).CompareTo(o2);
            else if (o2 is IComparable) return ((IComparable)o2).CompareTo(o1);
            else return o1.ToString().CompareTo(o2.ToString());
        }

        protected override bool SupportsSortingCore
        {
            get
            {
                return true;
            }
        }
       
        private bool _IsSortedCore = false;
        protected override bool IsSortedCore
        {
            get
            {
                return _IsSortedCore;
            }
        }
    
        protected  override void RemoveSortCore()
        {
            _IsSortedCore = false;
            List<Calf_Caltag> list = this.Items as List<Calf_Caltag>;
            list.Sort(Compare2); 
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public void RemoveSort()
        {
            RemoveSortCore();
        }

        private bool beginAdjustData = false;
       
       

        public void CancelFilter()
        {
            beginAdjustData =true;
            this.Clear();
            foreach (Calf_Caltag item in hideList)
            {
                if(item.DataState != DataStateType.Delete)
                {
                    this.Add(item);
                }
            }
            beginAdjustData =false;

            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset,-1);
            this.OnListChanged(arg);
        }

        protected override void OnListChanged(ListChangedEventArgs e)
        {
            if (!beginAdjustData)
                base.OnListChanged(e);
        }

        #region IFilter 成员

        public void Filter(Dictionary<string, string> para)
        {
            beginAdjustData= true;
            this.Clear();
            foreach (Calf_Caltag hideItem in hideList)
            {
                bool shouldAdd = true;
                shouldAdd &= (hideItem.DataState != DataStateType.Delete);

                foreach (KeyValuePair<string, string> item in para)
                {
                    PropertyInfo p = typeof(Calf_Caltag).GetProperty(item.Key);
                    if (p == null) continue;
                    if (p.PropertyType == typeof(string))
                    {
                        string val = Convert.ToString(p.GetValue(hideItem, null));
                        shouldAdd &= val.StartsWith(item.Value);
                    }
                    if (p.PropertyType == typeof(double))
                    {
                        double val = Convert.ToDouble(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToDouble(item.Value));
                    }
                    if (p.PropertyType == typeof(int))
                    {
                        int val = Convert.ToInt32(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt32(item.Value));
                    }
                    if (p.PropertyType == typeof(long))
                    {
                        long val = Convert.ToInt64(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt64(item.Value));
                    }
                }
                if (shouldAdd)
                    this.Add(hideItem);
            }
            List<Calf_Caltag> list = this.Items as List<Calf_Caltag>;
            if (IsSortedCore)
                list.Sort(Compare);
            else
                list.Sort(Compare2);

            beginAdjustData= false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        #endregion
        public void LoadByCALMODELID(string CALMODELID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,TAGNAME,FORMA,TAGORGANIZATIONID,TAGGROUPID,GRAPHID,DEC,DOSUM,DODEC,DOBALANCE FROM CALF_CALTAG WHERE (TAGORGANIZATIONID IS NULL OR TAGORGANIZATIONID='') AND (GRAPHID IS NULL OR GRAPHID='') AND CALMODELID=:CALMODELID";
   selectCmd.Parameters.Add(":CALMODELID",OracleType.Char,32).Value=CALMODELID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Caltag item = new Calf_Caltag();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.TAGNAME="";  else item.TAGNAME=dr.GetString(2); 
if(dr.IsDBNull(3)) item.FORMA="";  else item.FORMA=dr.GetString(3); 
if(dr.IsDBNull(4)) item.TAGORGANIZATIONID="";  else item.TAGORGANIZATIONID=dr.GetString(4); 
if(dr.IsDBNull(5)) item.TAGGROUPID="";  else item.TAGGROUPID=dr.GetString(5); 
if(dr.IsDBNull(6)) item.GRAPHID="";  else item.GRAPHID=dr.GetString(6); 
if(dr.IsDBNull(7)) item.DEC=0;  else item.DEC=dr.GetDouble(7); 
if(dr.IsDBNull(8)) item.DOSUM=0;  else item.DOSUM=dr.GetDouble(8); 
if(dr.IsDBNull(9)) item.DODEC=0;  else item.DODEC=dr.GetDouble(9); 
if(dr.IsDBNull(10)) item.DOBALANCE=0;  else item.DOBALANCE=dr.GetDouble(10); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
        public void LoadByTAGORGANIZATIONID(string TAGORGANIZATIONID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,TAGNAME,FORMA,TAGORGANIZATIONID,TAGGROUPID,GRAPHID,DEC,DOSUM,DODEC,DOBALANCE FROM CALF_CALTAG WHERE TAGORGANIZATIONID=:TAGORGANIZATIONID";
   selectCmd.Parameters.Add(":TAGORGANIZATIONID",OracleType.Char,32).Value=TAGORGANIZATIONID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Caltag item = new Calf_Caltag();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.TAGNAME="";  else item.TAGNAME=dr.GetString(2); 
if(dr.IsDBNull(3)) item.FORMA="";  else item.FORMA=dr.GetString(3); 
if(dr.IsDBNull(4)) item.TAGORGANIZATIONID="";  else item.TAGORGANIZATIONID=dr.GetString(4); 
if(dr.IsDBNull(5)) item.TAGGROUPID="";  else item.TAGGROUPID=dr.GetString(5); 
if(dr.IsDBNull(6)) item.GRAPHID="";  else item.GRAPHID=dr.GetString(6); 
if(dr.IsDBNull(7)) item.DEC=0;  else item.DEC=dr.GetDouble(7); 
if(dr.IsDBNull(8)) item.DOSUM=0;  else item.DOSUM=dr.GetDouble(8); 
if(dr.IsDBNull(9)) item.DODEC=0;  else item.DODEC=dr.GetDouble(9); 
if(dr.IsDBNull(10)) item.DOBALANCE=0;  else item.DOBALANCE=dr.GetDouble(10); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
        public void Load() {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,TAGNAME,FORMA,TAGORGANIZATIONID,TAGGROUPID,GRAPHID,DEC,DOSUM,DODEC,DOBALANCE FROM CALF_CALTAG";
   
   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Caltag item = new Calf_Caltag();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
item.Ori_EID=item.EID;
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.TAGNAME="";  else item.TAGNAME=dr.GetString(2); 
if(dr.IsDBNull(3)) item.FORMA="";  else item.FORMA=dr.GetString(3); 
if(dr.IsDBNull(4)) item.TAGORGANIZATIONID="";  else item.TAGORGANIZATIONID=dr.GetString(4); 
if(dr.IsDBNull(5)) item.TAGGROUPID="";  else item.TAGGROUPID=dr.GetString(5); 
if(dr.IsDBNull(6)) item.GRAPHID="";  else item.GRAPHID=dr.GetString(6); 
if(dr.IsDBNull(7)) item.DEC=0;  else item.DEC=dr.GetDouble(7); 
if(dr.IsDBNull(8)) item.DOSUM=0;  else item.DOSUM=dr.GetDouble(8); 
if(dr.IsDBNull(9)) item.DODEC=0;  else item.DODEC=dr.GetDouble(9); 
if(dr.IsDBNull(10)) item.DOBALANCE=0;  else item.DOBALANCE=dr.GetDouble(10); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
    }
    public partial class Calf_Graph : INotifyPropertyChanged {
        private string _EID = "";
        private string _Ori_EID = "";
        private string _CALMODELID = "";
        private string _GRAPHNAME = "";
  //ConStr 
  public DataStateType DataState = DataStateType.Add;

   public event PropertyChangedEventHandler PropertyChanged;

   private void RaisePropertyChanged(string propertyName,bool induceChanged)
   {
      if (PropertyChanged != null)
      {
         PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
         if(induceChanged)
         {
            if (this.DataState == DataStateType.UnChanged)
               this.DataState = DataStateType.Update;
         }
      }
   }

   public void ClearDataState()
   {
     this.DataState = DataStateType.UnChanged;
   }
         
   private bool Initing=false;        

   public void BeginInit()
   {
     Initing=true;
   }
 
   public void EndInit()
   {
      Initing=false;
   }

   public void Save()
   {
     OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
     con.Open();
     OracleTransaction trans = con.BeginTransaction();
     Save(trans);
     trans.Commit();
     con.Close();
   }

   public void Save(OracleTransaction trans)
   {
      OracleConnection con = trans.Connection;
      DbDelete(trans);
      DbInsert(trans);
      DbUpdate(trans);
      ClearDataState();
      SaveOther(trans);
   }
  
   public void Delete()
   {
      if (this.DataState == DataStateType.Add)
           this.DataState = DataStateType.UnChanged;
      else
           this.DataState = DataStateType.Delete;
   }

        
        public string EID {
            get {
                return this._EID;
            }
            set {
if (Initing) Ori_EID= value;
 if (!_EID.Equals(value)){
_EID= value;
 RaisePropertyChanged("EID",true);}

            }
        }
        [Browsable(false)]
        public string Ori_EID {
            get {
                return this._Ori_EID;
            }
            set {
 if (!_Ori_EID.Equals(value)){
_Ori_EID= value;
}

            }
        }
        public string CALMODELID {
            get {
                return this._CALMODELID;
            }
            set {
 if (!_CALMODELID.Equals(value)){
_CALMODELID= value;
 RaisePropertyChanged("CALMODELID",true);}

            }
        }
        public string GRAPHNAME {
            get {
                return this._GRAPHNAME;
            }
            set {
 if (!_GRAPHNAME.Equals(value)){
_GRAPHNAME= value;
 RaisePropertyChanged("GRAPHNAME",true);}

            }
        }
        public virtual void SaveOther(OracleTransaction trans) {

        }
        public void DbInsert(OracleTransaction trans) {
  //InsertSql,InsertPara,AutoSql
  if (DataState == DataStateType.Add)
  {
     OracleConnection con = trans.Connection;
     OracleCommand insertCmd = new OracleCommand();
     insertCmd.Connection = con;
     insertCmd.Transaction = trans;
     insertCmd.CommandText = "INSERT INTO CALF_GRAPH(EID,CALMODELID,GRAPHNAME) VALUES(:EID,:CALMODELID,:GRAPHNAME)";
     insertCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
insertCmd.Parameters.Add(":CALMODELID",OracleType.Char,32).Value=this.CALMODELID;
insertCmd.Parameters.Add(":GRAPHNAME",OracleType.VarChar,200).Value=this.GRAPHNAME;

     insertCmd.ExecuteNonQuery();
     
   }
          

        
        }
        public void DbDelete(OracleTransaction trans) {
  //DelSql,DelPara
  if (DataState == DataStateType.Delete)
  {
     OracleConnection con = trans.Connection;
     OracleCommand deleteCmd = new OracleCommand();
     deleteCmd.Connection = con;
     deleteCmd.Transaction = trans;
     deleteCmd.CommandText = "DELETE FROM CALF_GRAPH WHERE EID=:Ori_EID";
     deleteCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     deleteCmd.ExecuteNonQuery();
  }
         
        }
        public void DbUpdate(OracleTransaction trans) {
  //UpdateSql,UpdatePara
  if (DataState == DataStateType.Update)
  {
     OracleConnection con = trans.Connection;
     OracleCommand updateCmd = new OracleCommand();
     updateCmd.Connection = con;
     updateCmd.Transaction=trans;
     updateCmd.CommandText = "UPDATE CALF_GRAPH SET EID=:EID,CALMODELID=:CALMODELID,GRAPHNAME=:GRAPHNAME WHERE EID=:Ori_EID";
     updateCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
updateCmd.Parameters.Add(":CALMODELID",OracleType.Char,32).Value=this.CALMODELID;
updateCmd.Parameters.Add(":GRAPHNAME",OracleType.VarChar,200).Value=this.GRAPHNAME;
updateCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     updateCmd.ExecuteNonQuery();
  }
          
        
        }
        public static Calf_Graph LoadByPk(string EID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal      
   Calf_Graph item=null;
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,GRAPHNAME FROM CALF_GRAPH WHERE EID=:EID";
   selectCmd.Parameters.Add(":EID",OracleType.Char,32).Value=EID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   if (dr.Read())
   {
      item = new Calf_Graph();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.GRAPHNAME="";  else item.GRAPHNAME=dr.GetString(2); 

      item.EndInit();
      item.ClearDataState();
   }
   dr.Close();
   con.Close();
   return item;
        }
    }
    public partial class Calf_GraphTable : BindingList<Calf_Graph>, IFilter {
       //Calf_Graph,ltznConnectionString

       private List<Calf_Graph> hideList = new List<Calf_Graph>();

        public  void Save()
        {
            OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleTransaction trans = con.BeginTransaction();
            Save(trans);
            trans.Commit();
            con.Close();
        }

        public  void Save(OracleTransaction trans)
        {
            List<Calf_Graph> deleteList = new List<Calf_Graph>();
            OracleConnection con = trans.Connection;
            foreach (Calf_Graph item in hideList)
            {
                if (item.DataState == DataStateType.Delete)
                    deleteList.Add(item);
                item.Save(trans);
            }
            foreach (Calf_Graph item in deleteList)
            {
                hideList.Remove(item);
            }
        }

        protected override void InsertItem(int index, Calf_Graph item)
        {
          base.InsertItem(index, item);
          if(!beginAdjustData)
          {
            hideList.Add(item);
          }
        }

        protected override void ClearItems()
        {
           if(!beginAdjustData)
           {
             foreach (Calf_Graph delObj in this)
             {
               if (delObj.DataState == DataStateType.Add)
               {
                  hideList.Remove(delObj);
               }
               delObj.Delete();
             }
           }
            base.ClearItems();
        }

        protected override void RemoveItem(int index)
        {
          if(!beginAdjustData)
          {
             Calf_Graph delObj = this[index];
             if (delObj.DataState == DataStateType.Add)
             {
                hideList.Remove(delObj);
             }
             delObj.Delete();
           }
           base.RemoveItem(index);
        }

        protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)
        {
            propertyDescriptor = prop;
            sortDirection = direction; 
            _IsSortedCore = true;
            List<Calf_Graph> list = this.Items as List<Calf_Graph>;
            list.Sort(Compare); 
            _IsSortedCore = true;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, propertyDescriptor);
            this.OnListChanged(arg);
           
        }
      
        private PropertyDescriptor propertyDescriptor = null;
        protected override PropertyDescriptor SortPropertyCore
        {
            get
            {
                return propertyDescriptor;
            }
        }
       
        private ListSortDirection sortDirection = ListSortDirection.Ascending;
        protected override ListSortDirection SortDirectionCore
        {
            get
            {
                return sortDirection;
            }
        }

        private int Compare(Calf_Graph x, Calf_Graph y)
        {
            if (sortDirection == ListSortDirection.Descending)
                return CompareValue(propertyDescriptor.GetValue(y), propertyDescriptor.GetValue(x));
            else
                return CompareValue(propertyDescriptor.GetValue(x), propertyDescriptor.GetValue(y));
        }

        private int Compare2(Calf_Graph x, Calf_Graph y)
        {
            return hideList.IndexOf(x).CompareTo(hideList.IndexOf(y));
        }

        static int CompareValue(object o1, object o2)
        {
            if (o1 == null) return o2 == null ? 0 : -1;
            else if (o2 == null) return 1;
            else if (o1 is IComparable) return ((IComparable)o1).CompareTo(o2);
            else if (o2 is IComparable) return ((IComparable)o2).CompareTo(o1);
            else return o1.ToString().CompareTo(o2.ToString());
        }

        protected override bool SupportsSortingCore
        {
            get
            {
                return true;
            }
        }
       
        private bool _IsSortedCore = false;
        protected override bool IsSortedCore
        {
            get
            {
                return _IsSortedCore;
            }
        }
    
        protected  override void RemoveSortCore()
        {
            _IsSortedCore = false;
            List<Calf_Graph> list = this.Items as List<Calf_Graph>;
            list.Sort(Compare2); 
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public void RemoveSort()
        {
            RemoveSortCore();
        }

        private bool beginAdjustData = false;
       
       

        public void CancelFilter()
        {
            beginAdjustData =true;
            this.Clear();
            foreach (Calf_Graph item in hideList)
            {
                if(item.DataState != DataStateType.Delete)
                {
                    this.Add(item);
                }
            }
            beginAdjustData =false;

            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset,-1);
            this.OnListChanged(arg);
        }

        protected override void OnListChanged(ListChangedEventArgs e)
        {
            if (!beginAdjustData)
                base.OnListChanged(e);
        }

        #region IFilter 成员

        public void Filter(Dictionary<string, string> para)
        {
            beginAdjustData= true;
            this.Clear();
            foreach (Calf_Graph hideItem in hideList)
            {
                bool shouldAdd = true;
                shouldAdd &= (hideItem.DataState != DataStateType.Delete);

                foreach (KeyValuePair<string, string> item in para)
                {
                    PropertyInfo p = typeof(Calf_Graph).GetProperty(item.Key);
                    if (p == null) continue;
                    if (p.PropertyType == typeof(string))
                    {
                        string val = Convert.ToString(p.GetValue(hideItem, null));
                        shouldAdd &= val.StartsWith(item.Value);
                    }
                    if (p.PropertyType == typeof(double))
                    {
                        double val = Convert.ToDouble(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToDouble(item.Value));
                    }
                    if (p.PropertyType == typeof(int))
                    {
                        int val = Convert.ToInt32(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt32(item.Value));
                    }
                    if (p.PropertyType == typeof(long))
                    {
                        long val = Convert.ToInt64(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt64(item.Value));
                    }
                }
                if (shouldAdd)
                    this.Add(hideItem);
            }
            List<Calf_Graph> list = this.Items as List<Calf_Graph>;
            if (IsSortedCore)
                list.Sort(Compare);
            else
                list.Sort(Compare2);

            beginAdjustData= false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        #endregion
        public void LoadByCALMODELID(string CALMODELID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,GRAPHNAME FROM CALF_GRAPH WHERE CALMODELID=:CALMODELID";
   selectCmd.Parameters.Add(":CALMODELID",OracleType.Char,32).Value=CALMODELID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Graph item = new Calf_Graph();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.GRAPHNAME="";  else item.GRAPHNAME=dr.GetString(2); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
        public void Load() {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,GRAPHNAME FROM CALF_GRAPH";
   
   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Graph item = new Calf_Graph();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
item.Ori_EID=item.EID;
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.GRAPHNAME="";  else item.GRAPHNAME=dr.GetString(2); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
    }
    public partial class Calf_Graph_Line : INotifyPropertyChanged {
        private string _EID = "";
        private string _Ori_EID = "";
        private string _CALMODELID = "";
        private string _GRAPHID = "";
        private string _PREVTAGID = "";
        private string _NEXTTAGID = "";
  //ConStr 
  public DataStateType DataState = DataStateType.Add;

   public event PropertyChangedEventHandler PropertyChanged;

   private void RaisePropertyChanged(string propertyName,bool induceChanged)
   {
      if (PropertyChanged != null)
      {
         PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
         if(induceChanged)
         {
            if (this.DataState == DataStateType.UnChanged)
               this.DataState = DataStateType.Update;
         }
      }
   }

   public void ClearDataState()
   {
     this.DataState = DataStateType.UnChanged;
   }
         
   private bool Initing=false;        

   public void BeginInit()
   {
     Initing=true;
   }
 
   public void EndInit()
   {
      Initing=false;
   }

   public void Save()
   {
     OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
     con.Open();
     OracleTransaction trans = con.BeginTransaction();
     Save(trans);
     trans.Commit();
     con.Close();
   }

   public void Save(OracleTransaction trans)
   {
      OracleConnection con = trans.Connection;
      DbDelete(trans);
      DbInsert(trans);
      DbUpdate(trans);
      ClearDataState();
      SaveOther(trans);
   }
  
   public void Delete()
   {
      if (this.DataState == DataStateType.Add)
           this.DataState = DataStateType.UnChanged;
      else
           this.DataState = DataStateType.Delete;
   }

        
        public string EID {
            get {
                return this._EID;
            }
            set {
if (Initing) Ori_EID= value;
 if (!_EID.Equals(value)){
_EID= value;
 RaisePropertyChanged("EID",true);}

            }
        }
        [Browsable(false)]
        public string Ori_EID {
            get {
                return this._Ori_EID;
            }
            set {
 if (!_Ori_EID.Equals(value)){
_Ori_EID= value;
}

            }
        }
        public string CALMODELID {
            get {
                return this._CALMODELID;
            }
            set {
 if (!_CALMODELID.Equals(value)){
_CALMODELID= value;
 RaisePropertyChanged("CALMODELID",true);}

            }
        }
        public string GRAPHID {
            get {
                return this._GRAPHID;
            }
            set {
 if (!_GRAPHID.Equals(value)){
_GRAPHID= value;
 RaisePropertyChanged("GRAPHID",true);}

            }
        }
        public string PREVTAGID {
            get {
                return this._PREVTAGID;
            }
            set {
 if (!_PREVTAGID.Equals(value)){
_PREVTAGID= value;
 RaisePropertyChanged("PREVTAGID",true);}

            }
        }
        public string NEXTTAGID {
            get {
                return this._NEXTTAGID;
            }
            set {
 if (!_NEXTTAGID.Equals(value)){
_NEXTTAGID= value;
 RaisePropertyChanged("NEXTTAGID",true);}

            }
        }
        public virtual void SaveOther(OracleTransaction trans) {

        }
        public void DbInsert(OracleTransaction trans) {
  //InsertSql,InsertPara,AutoSql
  if (DataState == DataStateType.Add)
  {
     OracleConnection con = trans.Connection;
     OracleCommand insertCmd = new OracleCommand();
     insertCmd.Connection = con;
     insertCmd.Transaction = trans;
     insertCmd.CommandText = "INSERT INTO CALF_GRAPH_LINE(EID,CALMODELID,GRAPHID,PREVTAGID,NEXTTAGID) VALUES(:EID,:CALMODELID,:GRAPHID,:PREVTAGID,:NEXTTAGID)";
     insertCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
insertCmd.Parameters.Add(":CALMODELID",OracleType.Char,32).Value=this.CALMODELID;
insertCmd.Parameters.Add(":GRAPHID",OracleType.Char,32).Value=this.GRAPHID;
insertCmd.Parameters.Add(":PREVTAGID",OracleType.Char,32).Value=this.PREVTAGID;
insertCmd.Parameters.Add(":NEXTTAGID",OracleType.Char,32).Value=this.NEXTTAGID;

     insertCmd.ExecuteNonQuery();
     
   }
          

        
        }
        public void DbDelete(OracleTransaction trans) {
  //DelSql,DelPara
  if (DataState == DataStateType.Delete)
  {
     OracleConnection con = trans.Connection;
     OracleCommand deleteCmd = new OracleCommand();
     deleteCmd.Connection = con;
     deleteCmd.Transaction = trans;
     deleteCmd.CommandText = "DELETE FROM CALF_GRAPH_LINE WHERE EID=:Ori_EID";
     deleteCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     deleteCmd.ExecuteNonQuery();
  }
         
        }
        public void DbUpdate(OracleTransaction trans) {
  //UpdateSql,UpdatePara
  if (DataState == DataStateType.Update)
  {
     OracleConnection con = trans.Connection;
     OracleCommand updateCmd = new OracleCommand();
     updateCmd.Connection = con;
     updateCmd.Transaction=trans;
     updateCmd.CommandText = "UPDATE CALF_GRAPH_LINE SET EID=:EID,CALMODELID=:CALMODELID,GRAPHID=:GRAPHID,PREVTAGID=:PREVTAGID,NEXTTAGID=:NEXTTAGID WHERE EID=:Ori_EID";
     updateCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
updateCmd.Parameters.Add(":CALMODELID",OracleType.Char,32).Value=this.CALMODELID;
updateCmd.Parameters.Add(":GRAPHID",OracleType.Char,32).Value=this.GRAPHID;
updateCmd.Parameters.Add(":PREVTAGID",OracleType.Char,32).Value=this.PREVTAGID;
updateCmd.Parameters.Add(":NEXTTAGID",OracleType.Char,32).Value=this.NEXTTAGID;
updateCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     updateCmd.ExecuteNonQuery();
  }
          
        
        }
        public static Calf_Graph_Line LoadByPk(string EID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal      
   Calf_Graph_Line item=null;
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,GRAPHID,PREVTAGID,NEXTTAGID FROM CALF_GRAPH_LINE WHERE EID=:EID";
   selectCmd.Parameters.Add(":EID",OracleType.Char,32).Value=EID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   if (dr.Read())
   {
      item = new Calf_Graph_Line();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.GRAPHID="";  else item.GRAPHID=dr.GetString(2); 
if(dr.IsDBNull(3)) item.PREVTAGID="";  else item.PREVTAGID=dr.GetString(3); 
if(dr.IsDBNull(4)) item.NEXTTAGID="";  else item.NEXTTAGID=dr.GetString(4); 

      item.EndInit();
      item.ClearDataState();
   }
   dr.Close();
   con.Close();
   return item;
        }
    }
    public partial class Calf_Graph_LineTable : BindingList<Calf_Graph_Line>, IFilter {
       //Calf_Graph_Line,ltznConnectionString

       private List<Calf_Graph_Line> hideList = new List<Calf_Graph_Line>();

        public  void Save()
        {
            OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleTransaction trans = con.BeginTransaction();
            Save(trans);
            trans.Commit();
            con.Close();
        }

        public  void Save(OracleTransaction trans)
        {
            List<Calf_Graph_Line> deleteList = new List<Calf_Graph_Line>();
            OracleConnection con = trans.Connection;
            foreach (Calf_Graph_Line item in hideList)
            {
                if (item.DataState == DataStateType.Delete)
                    deleteList.Add(item);
                item.Save(trans);
            }
            foreach (Calf_Graph_Line item in deleteList)
            {
                hideList.Remove(item);
            }
        }

        protected override void InsertItem(int index, Calf_Graph_Line item)
        {
          base.InsertItem(index, item);
          if(!beginAdjustData)
          {
            hideList.Add(item);
          }
        }

        protected override void ClearItems()
        {
           if(!beginAdjustData)
           {
             foreach (Calf_Graph_Line delObj in this)
             {
               if (delObj.DataState == DataStateType.Add)
               {
                  hideList.Remove(delObj);
               }
               delObj.Delete();
             }
           }
            base.ClearItems();
        }

        protected override void RemoveItem(int index)
        {
          if(!beginAdjustData)
          {
             Calf_Graph_Line delObj = this[index];
             if (delObj.DataState == DataStateType.Add)
             {
                hideList.Remove(delObj);
             }
             delObj.Delete();
           }
           base.RemoveItem(index);
        }

        protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)
        {
            propertyDescriptor = prop;
            sortDirection = direction; 
            _IsSortedCore = true;
            List<Calf_Graph_Line> list = this.Items as List<Calf_Graph_Line>;
            list.Sort(Compare); 
            _IsSortedCore = true;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, propertyDescriptor);
            this.OnListChanged(arg);
           
        }
      
        private PropertyDescriptor propertyDescriptor = null;
        protected override PropertyDescriptor SortPropertyCore
        {
            get
            {
                return propertyDescriptor;
            }
        }
       
        private ListSortDirection sortDirection = ListSortDirection.Ascending;
        protected override ListSortDirection SortDirectionCore
        {
            get
            {
                return sortDirection;
            }
        }

        private int Compare(Calf_Graph_Line x, Calf_Graph_Line y)
        {
            if (sortDirection == ListSortDirection.Descending)
                return CompareValue(propertyDescriptor.GetValue(y), propertyDescriptor.GetValue(x));
            else
                return CompareValue(propertyDescriptor.GetValue(x), propertyDescriptor.GetValue(y));
        }

        private int Compare2(Calf_Graph_Line x, Calf_Graph_Line y)
        {
            return hideList.IndexOf(x).CompareTo(hideList.IndexOf(y));
        }

        static int CompareValue(object o1, object o2)
        {
            if (o1 == null) return o2 == null ? 0 : -1;
            else if (o2 == null) return 1;
            else if (o1 is IComparable) return ((IComparable)o1).CompareTo(o2);
            else if (o2 is IComparable) return ((IComparable)o2).CompareTo(o1);
            else return o1.ToString().CompareTo(o2.ToString());
        }

        protected override bool SupportsSortingCore
        {
            get
            {
                return true;
            }
        }
       
        private bool _IsSortedCore = false;
        protected override bool IsSortedCore
        {
            get
            {
                return _IsSortedCore;
            }
        }
    
        protected  override void RemoveSortCore()
        {
            _IsSortedCore = false;
            List<Calf_Graph_Line> list = this.Items as List<Calf_Graph_Line>;
            list.Sort(Compare2); 
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public void RemoveSort()
        {
            RemoveSortCore();
        }

        private bool beginAdjustData = false;
       
       

        public void CancelFilter()
        {
            beginAdjustData =true;
            this.Clear();
            foreach (Calf_Graph_Line item in hideList)
            {
                if(item.DataState != DataStateType.Delete)
                {
                    this.Add(item);
                }
            }
            beginAdjustData =false;

            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset,-1);
            this.OnListChanged(arg);
        }

        protected override void OnListChanged(ListChangedEventArgs e)
        {
            if (!beginAdjustData)
                base.OnListChanged(e);
        }

        #region IFilter 成员

        public void Filter(Dictionary<string, string> para)
        {
            beginAdjustData= true;
            this.Clear();
            foreach (Calf_Graph_Line hideItem in hideList)
            {
                bool shouldAdd = true;
                shouldAdd &= (hideItem.DataState != DataStateType.Delete);

                foreach (KeyValuePair<string, string> item in para)
                {
                    PropertyInfo p = typeof(Calf_Graph_Line).GetProperty(item.Key);
                    if (p == null) continue;
                    if (p.PropertyType == typeof(string))
                    {
                        string val = Convert.ToString(p.GetValue(hideItem, null));
                        shouldAdd &= val.StartsWith(item.Value);
                    }
                    if (p.PropertyType == typeof(double))
                    {
                        double val = Convert.ToDouble(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToDouble(item.Value));
                    }
                    if (p.PropertyType == typeof(int))
                    {
                        int val = Convert.ToInt32(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt32(item.Value));
                    }
                    if (p.PropertyType == typeof(long))
                    {
                        long val = Convert.ToInt64(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt64(item.Value));
                    }
                }
                if (shouldAdd)
                    this.Add(hideItem);
            }
            List<Calf_Graph_Line> list = this.Items as List<Calf_Graph_Line>;
            if (IsSortedCore)
                list.Sort(Compare);
            else
                list.Sort(Compare2);

            beginAdjustData= false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        #endregion
        public void Load() {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,GRAPHID,PREVTAGID,NEXTTAGID FROM CALF_GRAPH_LINE";
   
   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Graph_Line item = new Calf_Graph_Line();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
item.Ori_EID=item.EID;
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.GRAPHID="";  else item.GRAPHID=dr.GetString(2); 
if(dr.IsDBNull(3)) item.PREVTAGID="";  else item.PREVTAGID=dr.GetString(3); 
if(dr.IsDBNull(4)) item.NEXTTAGID="";  else item.NEXTTAGID=dr.GetString(4); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
    }
    public partial class Calf_Taggroup : INotifyPropertyChanged {
        private string _EID = "";
        private string _Ori_EID = "";
        private string _ENAME = "";
        private Calf_Taggroup_ItemTable _Calf_Taggroup_ItemTable = null;
  //ConStr 
  public DataStateType DataState = DataStateType.Add;

   public event PropertyChangedEventHandler PropertyChanged;

   private void RaisePropertyChanged(string propertyName,bool induceChanged)
   {
      if (PropertyChanged != null)
      {
         PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
         if(induceChanged)
         {
            if (this.DataState == DataStateType.UnChanged)
               this.DataState = DataStateType.Update;
         }
      }
   }

   public void ClearDataState()
   {
     this.DataState = DataStateType.UnChanged;
   }
         
   private bool Initing=false;        

   public void BeginInit()
   {
     Initing=true;
   }
 
   public void EndInit()
   {
      Initing=false;
   }

   public void Save()
   {
     OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
     con.Open();
     OracleTransaction trans = con.BeginTransaction();
     Save(trans);
     trans.Commit();
     con.Close();
   }

   public void Save(OracleTransaction trans)
   {
      OracleConnection con = trans.Connection;
      DbDelete(trans);
      DbInsert(trans);
      DbUpdate(trans);
      ClearDataState();
      SaveOther(trans);
   }
  
   public void Delete()
   {
      if (this.DataState == DataStateType.Add)
           this.DataState = DataStateType.UnChanged;
      else
           this.DataState = DataStateType.Delete;
   }

        
        public string EID {
            get {
                return this._EID;
            }
            set {
if (Initing) Ori_EID= value;
 if (!_EID.Equals(value)){
_EID= value;
 RaisePropertyChanged("EID",true);}

            }
        }
        [Browsable(false)]
        public string Ori_EID {
            get {
                return this._Ori_EID;
            }
            set {
 if (!_Ori_EID.Equals(value)){
_Ori_EID= value;
}

            }
        }
        public string ENAME {
            get {
                return this._ENAME;
            }
            set {
 if (!_ENAME.Equals(value)){
_ENAME= value;
 RaisePropertyChanged("ENAME",true);}

            }
        }
        [Browsable(false)]
        public virtual Calf_Taggroup_ItemTable Calf_Taggroup_ItemTable {
            get {
if (_Calf_Taggroup_ItemTable == null){
_Calf_Taggroup_ItemTable = new Calf_Taggroup_ItemTable();
if (this.DataState != DataStateType.Add){
_Calf_Taggroup_ItemTable.LoadByTAGGROUPID(this.EID);}}
return _Calf_Taggroup_ItemTable;

            }
        }
        public virtual void SaveOther(OracleTransaction trans) {
if (_Calf_Taggroup_ItemTable!= null){
foreach(Calf_Taggroup_Item item in _Calf_Taggroup_ItemTable){
item.BeginInit();
item.TAGGROUPID=this.EID;
item.EndInit();}
_Calf_Taggroup_ItemTable.Save(trans);}

        }
        public void DbInsert(OracleTransaction trans) {
  //InsertSql,InsertPara,AutoSql
  if (DataState == DataStateType.Add)
  {
     OracleConnection con = trans.Connection;
     OracleCommand insertCmd = new OracleCommand();
     insertCmd.Connection = con;
     insertCmd.Transaction = trans;
     insertCmd.CommandText = "INSERT INTO CALF_TAGGROUP(EID,ENAME) VALUES(:EID,:ENAME)";
     insertCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
insertCmd.Parameters.Add(":ENAME",OracleType.VarChar,200).Value=this.ENAME;

     insertCmd.ExecuteNonQuery();
     
   }
          

        
        }
        public void DbDelete(OracleTransaction trans) {
  //DelSql,DelPara
  if (DataState == DataStateType.Delete)
  {
     OracleConnection con = trans.Connection;
     OracleCommand deleteCmd = new OracleCommand();
     deleteCmd.Connection = con;
     deleteCmd.Transaction = trans;
     deleteCmd.CommandText = "DELETE FROM CALF_TAGGROUP WHERE EID=:Ori_EID";
     deleteCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     deleteCmd.ExecuteNonQuery();
  }
         
        }
        public void DbUpdate(OracleTransaction trans) {
  //UpdateSql,UpdatePara
  if (DataState == DataStateType.Update)
  {
     OracleConnection con = trans.Connection;
     OracleCommand updateCmd = new OracleCommand();
     updateCmd.Connection = con;
     updateCmd.Transaction=trans;
     updateCmd.CommandText = "UPDATE CALF_TAGGROUP SET EID=:EID,ENAME=:ENAME WHERE EID=:Ori_EID";
     updateCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
updateCmd.Parameters.Add(":ENAME",OracleType.VarChar,200).Value=this.ENAME;
updateCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     updateCmd.ExecuteNonQuery();
  }
          
        
        }
        public static Calf_Taggroup LoadByPk(string EID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal      
   Calf_Taggroup item=null;
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,ENAME FROM CALF_TAGGROUP WHERE EID=:EID";
   selectCmd.Parameters.Add(":EID",OracleType.Char,32).Value=EID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   if (dr.Read())
   {
      item = new Calf_Taggroup();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.ENAME="";  else item.ENAME=dr.GetString(1); 

      item.EndInit();
      item.ClearDataState();
   }
   dr.Close();
   con.Close();
   return item;
        }
    }
    public partial class Calf_TaggroupTable : BindingList<Calf_Taggroup>, IFilter {
       //Calf_Taggroup,ltznConnectionString

       private List<Calf_Taggroup> hideList = new List<Calf_Taggroup>();

        public  void Save()
        {
            OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleTransaction trans = con.BeginTransaction();
            Save(trans);
            trans.Commit();
            con.Close();
        }

        public  void Save(OracleTransaction trans)
        {
            List<Calf_Taggroup> deleteList = new List<Calf_Taggroup>();
            OracleConnection con = trans.Connection;
            foreach (Calf_Taggroup item in hideList)
            {
                if (item.DataState == DataStateType.Delete)
                    deleteList.Add(item);
                item.Save(trans);
            }
            foreach (Calf_Taggroup item in deleteList)
            {
                hideList.Remove(item);
            }
        }

        protected override void InsertItem(int index, Calf_Taggroup item)
        {
          base.InsertItem(index, item);
          if(!beginAdjustData)
          {
            hideList.Add(item);
          }
        }

        protected override void ClearItems()
        {
           if(!beginAdjustData)
           {
             foreach (Calf_Taggroup delObj in this)
             {
               if (delObj.DataState == DataStateType.Add)
               {
                  hideList.Remove(delObj);
               }
               delObj.Delete();
             }
           }
            base.ClearItems();
        }

        protected override void RemoveItem(int index)
        {
          if(!beginAdjustData)
          {
             Calf_Taggroup delObj = this[index];
             if (delObj.DataState == DataStateType.Add)
             {
                hideList.Remove(delObj);
             }
             delObj.Delete();
           }
           base.RemoveItem(index);
        }

        protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)
        {
            propertyDescriptor = prop;
            sortDirection = direction; 
            _IsSortedCore = true;
            List<Calf_Taggroup> list = this.Items as List<Calf_Taggroup>;
            list.Sort(Compare); 
            _IsSortedCore = true;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, propertyDescriptor);
            this.OnListChanged(arg);
           
        }
      
        private PropertyDescriptor propertyDescriptor = null;
        protected override PropertyDescriptor SortPropertyCore
        {
            get
            {
                return propertyDescriptor;
            }
        }
       
        private ListSortDirection sortDirection = ListSortDirection.Ascending;
        protected override ListSortDirection SortDirectionCore
        {
            get
            {
                return sortDirection;
            }
        }

        private int Compare(Calf_Taggroup x, Calf_Taggroup y)
        {
            if (sortDirection == ListSortDirection.Descending)
                return CompareValue(propertyDescriptor.GetValue(y), propertyDescriptor.GetValue(x));
            else
                return CompareValue(propertyDescriptor.GetValue(x), propertyDescriptor.GetValue(y));
        }

        private int Compare2(Calf_Taggroup x, Calf_Taggroup y)
        {
            return hideList.IndexOf(x).CompareTo(hideList.IndexOf(y));
        }

        static int CompareValue(object o1, object o2)
        {
            if (o1 == null) return o2 == null ? 0 : -1;
            else if (o2 == null) return 1;
            else if (o1 is IComparable) return ((IComparable)o1).CompareTo(o2);
            else if (o2 is IComparable) return ((IComparable)o2).CompareTo(o1);
            else return o1.ToString().CompareTo(o2.ToString());
        }

        protected override bool SupportsSortingCore
        {
            get
            {
                return true;
            }
        }
       
        private bool _IsSortedCore = false;
        protected override bool IsSortedCore
        {
            get
            {
                return _IsSortedCore;
            }
        }
    
        protected  override void RemoveSortCore()
        {
            _IsSortedCore = false;
            List<Calf_Taggroup> list = this.Items as List<Calf_Taggroup>;
            list.Sort(Compare2); 
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public void RemoveSort()
        {
            RemoveSortCore();
        }

        private bool beginAdjustData = false;
       
       

        public void CancelFilter()
        {
            beginAdjustData =true;
            this.Clear();
            foreach (Calf_Taggroup item in hideList)
            {
                if(item.DataState != DataStateType.Delete)
                {
                    this.Add(item);
                }
            }
            beginAdjustData =false;

            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset,-1);
            this.OnListChanged(arg);
        }

        protected override void OnListChanged(ListChangedEventArgs e)
        {
            if (!beginAdjustData)
                base.OnListChanged(e);
        }

        #region IFilter 成员

        public void Filter(Dictionary<string, string> para)
        {
            beginAdjustData= true;
            this.Clear();
            foreach (Calf_Taggroup hideItem in hideList)
            {
                bool shouldAdd = true;
                shouldAdd &= (hideItem.DataState != DataStateType.Delete);

                foreach (KeyValuePair<string, string> item in para)
                {
                    PropertyInfo p = typeof(Calf_Taggroup).GetProperty(item.Key);
                    if (p == null) continue;
                    if (p.PropertyType == typeof(string))
                    {
                        string val = Convert.ToString(p.GetValue(hideItem, null));
                        shouldAdd &= val.StartsWith(item.Value);
                    }
                    if (p.PropertyType == typeof(double))
                    {
                        double val = Convert.ToDouble(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToDouble(item.Value));
                    }
                    if (p.PropertyType == typeof(int))
                    {
                        int val = Convert.ToInt32(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt32(item.Value));
                    }
                    if (p.PropertyType == typeof(long))
                    {
                        long val = Convert.ToInt64(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt64(item.Value));
                    }
                }
                if (shouldAdd)
                    this.Add(hideItem);
            }
            List<Calf_Taggroup> list = this.Items as List<Calf_Taggroup>;
            if (IsSortedCore)
                list.Sort(Compare);
            else
                list.Sort(Compare2);

            beginAdjustData= false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        #endregion
        public void Load() {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,ENAME FROM CALF_TAGGROUP";
   
   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Taggroup item = new Calf_Taggroup();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
item.Ori_EID=item.EID;
if(dr.IsDBNull(1)) item.ENAME="";  else item.ENAME=dr.GetString(1); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
    }
    public partial class Calf_Taggroup_Item : INotifyPropertyChanged {
        private string _EID = "";
        private string _Ori_EID = "";
        private string _TAGGROUPID = "";
        private string _TAGNAME = "";
  //ConStr 
  public DataStateType DataState = DataStateType.Add;

   public event PropertyChangedEventHandler PropertyChanged;

   private void RaisePropertyChanged(string propertyName,bool induceChanged)
   {
      if (PropertyChanged != null)
      {
         PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
         if(induceChanged)
         {
            if (this.DataState == DataStateType.UnChanged)
               this.DataState = DataStateType.Update;
         }
      }
   }

   public void ClearDataState()
   {
     this.DataState = DataStateType.UnChanged;
   }
         
   private bool Initing=false;        

   public void BeginInit()
   {
     Initing=true;
   }
 
   public void EndInit()
   {
      Initing=false;
   }

   public void Save()
   {
     OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
     con.Open();
     OracleTransaction trans = con.BeginTransaction();
     Save(trans);
     trans.Commit();
     con.Close();
   }

   public void Save(OracleTransaction trans)
   {
      OracleConnection con = trans.Connection;
      DbDelete(trans);
      DbInsert(trans);
      DbUpdate(trans);
      ClearDataState();
      SaveOther(trans);
   }
  
   public void Delete()
   {
      if (this.DataState == DataStateType.Add)
           this.DataState = DataStateType.UnChanged;
      else
           this.DataState = DataStateType.Delete;
   }

        
        public string EID {
            get {
                return this._EID;
            }
            set {
if (Initing) Ori_EID= value;
 if (!_EID.Equals(value)){
_EID= value;
 RaisePropertyChanged("EID",true);}

            }
        }
        [Browsable(false)]
        public string Ori_EID {
            get {
                return this._Ori_EID;
            }
            set {
 if (!_Ori_EID.Equals(value)){
_Ori_EID= value;
}

            }
        }
        public string TAGGROUPID {
            get {
                return this._TAGGROUPID;
            }
            set {
 if (!_TAGGROUPID.Equals(value)){
_TAGGROUPID= value;
 RaisePropertyChanged("TAGGROUPID",true);}

            }
        }
        public string TAGNAME {
            get {
                return this._TAGNAME;
            }
            set {
 if (!_TAGNAME.Equals(value)){
_TAGNAME= value;
 RaisePropertyChanged("TAGNAME",true);}

            }
        }
        public virtual void SaveOther(OracleTransaction trans) {

        }
        public void DbInsert(OracleTransaction trans) {
  //InsertSql,InsertPara,AutoSql
  if (DataState == DataStateType.Add)
  {
     OracleConnection con = trans.Connection;
     OracleCommand insertCmd = new OracleCommand();
     insertCmd.Connection = con;
     insertCmd.Transaction = trans;
     insertCmd.CommandText = "INSERT INTO CALF_TAGGROUP_ITEM(EID,TAGGROUPID,TAGNAME) VALUES(:EID,:TAGGROUPID,:TAGNAME)";
     insertCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
insertCmd.Parameters.Add(":TAGGROUPID",OracleType.Char,32).Value=this.TAGGROUPID;
insertCmd.Parameters.Add(":TAGNAME",OracleType.VarChar,200).Value=this.TAGNAME;

     insertCmd.ExecuteNonQuery();
     
   }
          

        
        }
        public void DbDelete(OracleTransaction trans) {
  //DelSql,DelPara
  if (DataState == DataStateType.Delete)
  {
     OracleConnection con = trans.Connection;
     OracleCommand deleteCmd = new OracleCommand();
     deleteCmd.Connection = con;
     deleteCmd.Transaction = trans;
     deleteCmd.CommandText = "DELETE FROM CALF_TAGGROUP_ITEM WHERE EID=:Ori_EID";
     deleteCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     deleteCmd.ExecuteNonQuery();
  }
         
        }
        public void DbUpdate(OracleTransaction trans) {
  //UpdateSql,UpdatePara
  if (DataState == DataStateType.Update)
  {
     OracleConnection con = trans.Connection;
     OracleCommand updateCmd = new OracleCommand();
     updateCmd.Connection = con;
     updateCmd.Transaction=trans;
     updateCmd.CommandText = "UPDATE CALF_TAGGROUP_ITEM SET EID=:EID,TAGGROUPID=:TAGGROUPID,TAGNAME=:TAGNAME WHERE EID=:Ori_EID";
     updateCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
updateCmd.Parameters.Add(":TAGGROUPID",OracleType.Char,32).Value=this.TAGGROUPID;
updateCmd.Parameters.Add(":TAGNAME",OracleType.VarChar,200).Value=this.TAGNAME;
updateCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     updateCmd.ExecuteNonQuery();
  }
          
        
        }
        public static Calf_Taggroup_Item LoadByPk(string EID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal      
   Calf_Taggroup_Item item=null;
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,TAGGROUPID,TAGNAME FROM CALF_TAGGROUP_ITEM WHERE EID=:EID";
   selectCmd.Parameters.Add(":EID",OracleType.Char,32).Value=EID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   if (dr.Read())
   {
      item = new Calf_Taggroup_Item();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.TAGGROUPID="";  else item.TAGGROUPID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.TAGNAME="";  else item.TAGNAME=dr.GetString(2); 

      item.EndInit();
      item.ClearDataState();
   }
   dr.Close();
   con.Close();
   return item;
        }
    }
    public partial class Calf_Taggroup_ItemTable : BindingList<Calf_Taggroup_Item>, IFilter {
       //Calf_Taggroup_Item,ltznConnectionString

       private List<Calf_Taggroup_Item> hideList = new List<Calf_Taggroup_Item>();

        public  void Save()
        {
            OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleTransaction trans = con.BeginTransaction();
            Save(trans);
            trans.Commit();
            con.Close();
        }

        public  void Save(OracleTransaction trans)
        {
            List<Calf_Taggroup_Item> deleteList = new List<Calf_Taggroup_Item>();
            OracleConnection con = trans.Connection;
            foreach (Calf_Taggroup_Item item in hideList)
            {
                if (item.DataState == DataStateType.Delete)
                    deleteList.Add(item);
                item.Save(trans);
            }
            foreach (Calf_Taggroup_Item item in deleteList)
            {
                hideList.Remove(item);
            }
        }

        protected override void InsertItem(int index, Calf_Taggroup_Item item)
        {
          base.InsertItem(index, item);
          if(!beginAdjustData)
          {
            hideList.Add(item);
          }
        }

        protected override void ClearItems()
        {
           if(!beginAdjustData)
           {
             foreach (Calf_Taggroup_Item delObj in this)
             {
               if (delObj.DataState == DataStateType.Add)
               {
                  hideList.Remove(delObj);
               }
               delObj.Delete();
             }
           }
            base.ClearItems();
        }

        protected override void RemoveItem(int index)
        {
          if(!beginAdjustData)
          {
             Calf_Taggroup_Item delObj = this[index];
             if (delObj.DataState == DataStateType.Add)
             {
                hideList.Remove(delObj);
             }
             delObj.Delete();
           }
           base.RemoveItem(index);
        }

        protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)
        {
            propertyDescriptor = prop;
            sortDirection = direction; 
            _IsSortedCore = true;
            List<Calf_Taggroup_Item> list = this.Items as List<Calf_Taggroup_Item>;
            list.Sort(Compare); 
            _IsSortedCore = true;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, propertyDescriptor);
            this.OnListChanged(arg);
           
        }
      
        private PropertyDescriptor propertyDescriptor = null;
        protected override PropertyDescriptor SortPropertyCore
        {
            get
            {
                return propertyDescriptor;
            }
        }
       
        private ListSortDirection sortDirection = ListSortDirection.Ascending;
        protected override ListSortDirection SortDirectionCore
        {
            get
            {
                return sortDirection;
            }
        }

        private int Compare(Calf_Taggroup_Item x, Calf_Taggroup_Item y)
        {
            if (sortDirection == ListSortDirection.Descending)
                return CompareValue(propertyDescriptor.GetValue(y), propertyDescriptor.GetValue(x));
            else
                return CompareValue(propertyDescriptor.GetValue(x), propertyDescriptor.GetValue(y));
        }

        private int Compare2(Calf_Taggroup_Item x, Calf_Taggroup_Item y)
        {
            return hideList.IndexOf(x).CompareTo(hideList.IndexOf(y));
        }

        static int CompareValue(object o1, object o2)
        {
            if (o1 == null) return o2 == null ? 0 : -1;
            else if (o2 == null) return 1;
            else if (o1 is IComparable) return ((IComparable)o1).CompareTo(o2);
            else if (o2 is IComparable) return ((IComparable)o2).CompareTo(o1);
            else return o1.ToString().CompareTo(o2.ToString());
        }

        protected override bool SupportsSortingCore
        {
            get
            {
                return true;
            }
        }
       
        private bool _IsSortedCore = false;
        protected override bool IsSortedCore
        {
            get
            {
                return _IsSortedCore;
            }
        }
    
        protected  override void RemoveSortCore()
        {
            _IsSortedCore = false;
            List<Calf_Taggroup_Item> list = this.Items as List<Calf_Taggroup_Item>;
            list.Sort(Compare2); 
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public void RemoveSort()
        {
            RemoveSortCore();
        }

        private bool beginAdjustData = false;
       
       

        public void CancelFilter()
        {
            beginAdjustData =true;
            this.Clear();
            foreach (Calf_Taggroup_Item item in hideList)
            {
                if(item.DataState != DataStateType.Delete)
                {
                    this.Add(item);
                }
            }
            beginAdjustData =false;

            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset,-1);
            this.OnListChanged(arg);
        }

        protected override void OnListChanged(ListChangedEventArgs e)
        {
            if (!beginAdjustData)
                base.OnListChanged(e);
        }

        #region IFilter 成员

        public void Filter(Dictionary<string, string> para)
        {
            beginAdjustData= true;
            this.Clear();
            foreach (Calf_Taggroup_Item hideItem in hideList)
            {
                bool shouldAdd = true;
                shouldAdd &= (hideItem.DataState != DataStateType.Delete);

                foreach (KeyValuePair<string, string> item in para)
                {
                    PropertyInfo p = typeof(Calf_Taggroup_Item).GetProperty(item.Key);
                    if (p == null) continue;
                    if (p.PropertyType == typeof(string))
                    {
                        string val = Convert.ToString(p.GetValue(hideItem, null));
                        shouldAdd &= val.StartsWith(item.Value);
                    }
                    if (p.PropertyType == typeof(double))
                    {
                        double val = Convert.ToDouble(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToDouble(item.Value));
                    }
                    if (p.PropertyType == typeof(int))
                    {
                        int val = Convert.ToInt32(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt32(item.Value));
                    }
                    if (p.PropertyType == typeof(long))
                    {
                        long val = Convert.ToInt64(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt64(item.Value));
                    }
                }
                if (shouldAdd)
                    this.Add(hideItem);
            }
            List<Calf_Taggroup_Item> list = this.Items as List<Calf_Taggroup_Item>;
            if (IsSortedCore)
                list.Sort(Compare);
            else
                list.Sort(Compare2);

            beginAdjustData= false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        #endregion
        public void LoadByTAGGROUPID(string TAGGROUPID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,TAGGROUPID,TAGNAME FROM CALF_TAGGROUP_ITEM WHERE TAGGROUPID=:TAGGROUPID";
   selectCmd.Parameters.Add(":TAGGROUPID",OracleType.Char,32).Value=TAGGROUPID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Taggroup_Item item = new Calf_Taggroup_Item();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.TAGGROUPID="";  else item.TAGGROUPID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.TAGNAME="";  else item.TAGNAME=dr.GetString(2); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
        public void Load() {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,TAGGROUPID,TAGNAME FROM CALF_TAGGROUP_ITEM";
   
   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Taggroup_Item item = new Calf_Taggroup_Item();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
item.Ori_EID=item.EID;
if(dr.IsDBNull(1)) item.TAGGROUPID="";  else item.TAGGROUPID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.TAGNAME="";  else item.TAGNAME=dr.GetString(2); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
    }
    public partial class Calf_Tagorganization : INotifyPropertyChanged {
        private string _EID = "";
        private string _Ori_EID = "";
        private string _CALMODELID = "";
        private string _PARENTID = "";
        private string _ORGNAME = "";
        private string _TAGGROUPID = "";
        private Calf_TagorganizationTable _Calf_TagorganizationTable = null;
        private Calf_CaltagTable _Calf_CaltagTable = null;
  //ConStr 
  public DataStateType DataState = DataStateType.Add;

   public event PropertyChangedEventHandler PropertyChanged;

   private void RaisePropertyChanged(string propertyName,bool induceChanged)
   {
      if (PropertyChanged != null)
      {
         PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
         if(induceChanged)
         {
            if (this.DataState == DataStateType.UnChanged)
               this.DataState = DataStateType.Update;
         }
      }
   }

   public void ClearDataState()
   {
     this.DataState = DataStateType.UnChanged;
   }
         
   private bool Initing=false;        

   public void BeginInit()
   {
     Initing=true;
   }
 
   public void EndInit()
   {
      Initing=false;
   }

   public void Save()
   {
     OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
     con.Open();
     OracleTransaction trans = con.BeginTransaction();
     Save(trans);
     trans.Commit();
     con.Close();
   }

   public void Save(OracleTransaction trans)
   {
      OracleConnection con = trans.Connection;
      DbDelete(trans);
      DbInsert(trans);
      DbUpdate(trans);
      ClearDataState();
      SaveOther(trans);
   }
  
   public void Delete()
   {
      if (this.DataState == DataStateType.Add)
           this.DataState = DataStateType.UnChanged;
      else
           this.DataState = DataStateType.Delete;
   }

        
        public string EID {
            get {
                return this._EID;
            }
            set {
if (Initing) Ori_EID= value;
 if (!_EID.Equals(value)){
_EID= value;
 RaisePropertyChanged("EID",true);}

            }
        }
        [Browsable(false)]
        public string Ori_EID {
            get {
                return this._Ori_EID;
            }
            set {
 if (!_Ori_EID.Equals(value)){
_Ori_EID= value;
}

            }
        }
        public string CALMODELID {
            get {
                return this._CALMODELID;
            }
            set {
 if (!_CALMODELID.Equals(value)){
_CALMODELID= value;
 RaisePropertyChanged("CALMODELID",true);}

            }
        }
        public string PARENTID {
            get {
                return this._PARENTID;
            }
            set {
 if (!_PARENTID.Equals(value)){
_PARENTID= value;
 RaisePropertyChanged("PARENTID",true);}

            }
        }
        public string ORGNAME {
            get {
                return this._ORGNAME;
            }
            set {
 if (!_ORGNAME.Equals(value)){
_ORGNAME= value;
 RaisePropertyChanged("ORGNAME",true);}

            }
        }
        public string TAGGROUPID {
            get {
                return this._TAGGROUPID;
            }
            set {
 if (!_TAGGROUPID.Equals(value)){
_TAGGROUPID= value;
 RaisePropertyChanged("TAGGROUPID",true);}

            }
        }
        [Browsable(false)]
        public virtual Calf_TagorganizationTable Calf_TagorganizationTable {
            get {
if (_Calf_TagorganizationTable == null){
_Calf_TagorganizationTable = new Calf_TagorganizationTable();
if (this.DataState != DataStateType.Add){
_Calf_TagorganizationTable.LoadByPARENTID(this.EID);}}
return _Calf_TagorganizationTable;

            }
        }
        [Browsable(false)]
        public virtual Calf_CaltagTable Calf_CaltagTable {
            get {
if (_Calf_CaltagTable == null){
_Calf_CaltagTable = new Calf_CaltagTable();
if (this.DataState != DataStateType.Add){
_Calf_CaltagTable.LoadByTAGORGANIZATIONID(this.EID);}}
return _Calf_CaltagTable;

            }
        }
        public virtual void SaveOther(OracleTransaction trans) {
if (_Calf_TagorganizationTable!= null){
foreach(Calf_Tagorganization item in _Calf_TagorganizationTable){
item.BeginInit();
item.PARENTID=this.EID;
item.EndInit();}
_Calf_TagorganizationTable.Save(trans);}
if (_Calf_CaltagTable!= null){
foreach(Calf_Caltag item in _Calf_CaltagTable){
item.BeginInit();
item.TAGORGANIZATIONID=this.EID;
item.EndInit();}
_Calf_CaltagTable.Save(trans);}

        }
        public void DbInsert(OracleTransaction trans) {
  //InsertSql,InsertPara,AutoSql
  if (DataState == DataStateType.Add)
  {
     OracleConnection con = trans.Connection;
     OracleCommand insertCmd = new OracleCommand();
     insertCmd.Connection = con;
     insertCmd.Transaction = trans;
     insertCmd.CommandText = "INSERT INTO CALF_TAGORGANIZATION(EID,CALMODELID,PARENTID,ORGNAME,TAGGROUPID) VALUES(:EID,:CALMODELID,:PARENTID,:ORGNAME,:TAGGROUPID)";
     insertCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
insertCmd.Parameters.Add(":CALMODELID",OracleType.Char,32).Value=this.CALMODELID;
insertCmd.Parameters.Add(":PARENTID",OracleType.Char,32).Value=this.PARENTID;
insertCmd.Parameters.Add(":ORGNAME",OracleType.VarChar,200).Value=this.ORGNAME;
insertCmd.Parameters.Add(":TAGGROUPID",OracleType.Char,32).Value=this.TAGGROUPID;

     insertCmd.ExecuteNonQuery();
     
   }
          

        
        }
        public void DbDelete(OracleTransaction trans) {
  //DelSql,DelPara
  if (DataState == DataStateType.Delete)
  {
     OracleConnection con = trans.Connection;
     OracleCommand deleteCmd = new OracleCommand();
     deleteCmd.Connection = con;
     deleteCmd.Transaction = trans;
     deleteCmd.CommandText = "DELETE FROM CALF_TAGORGANIZATION WHERE EID=:Ori_EID";
     deleteCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     deleteCmd.ExecuteNonQuery();
  }
         
        }
        public void DbUpdate(OracleTransaction trans) {
  //UpdateSql,UpdatePara
  if (DataState == DataStateType.Update)
  {
     OracleConnection con = trans.Connection;
     OracleCommand updateCmd = new OracleCommand();
     updateCmd.Connection = con;
     updateCmd.Transaction=trans;
     updateCmd.CommandText = "UPDATE CALF_TAGORGANIZATION SET EID=:EID,CALMODELID=:CALMODELID,PARENTID=:PARENTID,ORGNAME=:ORGNAME,TAGGROUPID=:TAGGROUPID WHERE EID=:Ori_EID";
     updateCmd.Parameters.Add(":EID",OracleType.Char,32).Value=this.EID;
updateCmd.Parameters.Add(":CALMODELID",OracleType.Char,32).Value=this.CALMODELID;
updateCmd.Parameters.Add(":PARENTID",OracleType.Char,32).Value=this.PARENTID;
updateCmd.Parameters.Add(":ORGNAME",OracleType.VarChar,200).Value=this.ORGNAME;
updateCmd.Parameters.Add(":TAGGROUPID",OracleType.Char,32).Value=this.TAGGROUPID;
updateCmd.Parameters.Add(":Ori_EID",OracleType.Char,32).Value=this.Ori_EID;

     updateCmd.ExecuteNonQuery();
  }
          
        
        }
        public static Calf_Tagorganization LoadByPk(string EID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal      
   Calf_Tagorganization item=null;
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,PARENTID,ORGNAME,TAGGROUPID FROM CALF_TAGORGANIZATION WHERE EID=:EID";
   selectCmd.Parameters.Add(":EID",OracleType.Char,32).Value=EID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   if (dr.Read())
   {
      item = new Calf_Tagorganization();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.PARENTID="";  else item.PARENTID=dr.GetString(2); 
if(dr.IsDBNull(3)) item.ORGNAME="";  else item.ORGNAME=dr.GetString(3); 
if(dr.IsDBNull(4)) item.TAGGROUPID="";  else item.TAGGROUPID=dr.GetString(4); 

      item.EndInit();
      item.ClearDataState();
   }
   dr.Close();
   con.Close();
   return item;
        }
    }
    public partial class Calf_TagorganizationTable : BindingList<Calf_Tagorganization>, IFilter {
       //Calf_Tagorganization,ltznConnectionString

       private List<Calf_Tagorganization> hideList = new List<Calf_Tagorganization>();

        public  void Save()
        {
            OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleTransaction trans = con.BeginTransaction();
            Save(trans);
            trans.Commit();
            con.Close();
        }

        public  void Save(OracleTransaction trans)
        {
            List<Calf_Tagorganization> deleteList = new List<Calf_Tagorganization>();
            OracleConnection con = trans.Connection;
            foreach (Calf_Tagorganization item in hideList)
            {
                if (item.DataState == DataStateType.Delete)
                    deleteList.Add(item);
                item.Save(trans);
            }
            foreach (Calf_Tagorganization item in deleteList)
            {
                hideList.Remove(item);
            }
        }

        protected override void InsertItem(int index, Calf_Tagorganization item)
        {
          base.InsertItem(index, item);
          if(!beginAdjustData)
          {
            hideList.Add(item);
          }
        }

        protected override void ClearItems()
        {
           if(!beginAdjustData)
           {
             foreach (Calf_Tagorganization delObj in this)
             {
               if (delObj.DataState == DataStateType.Add)
               {
                  hideList.Remove(delObj);
               }
               delObj.Delete();
             }
           }
            base.ClearItems();
        }

        protected override void RemoveItem(int index)
        {
          if(!beginAdjustData)
          {
             Calf_Tagorganization delObj = this[index];
             if (delObj.DataState == DataStateType.Add)
             {
                hideList.Remove(delObj);
             }
             delObj.Delete();
           }
           base.RemoveItem(index);
        }

        protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)
        {
            propertyDescriptor = prop;
            sortDirection = direction; 
            _IsSortedCore = true;
            List<Calf_Tagorganization> list = this.Items as List<Calf_Tagorganization>;
            list.Sort(Compare); 
            _IsSortedCore = true;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, propertyDescriptor);
            this.OnListChanged(arg);
           
        }
      
        private PropertyDescriptor propertyDescriptor = null;
        protected override PropertyDescriptor SortPropertyCore
        {
            get
            {
                return propertyDescriptor;
            }
        }
       
        private ListSortDirection sortDirection = ListSortDirection.Ascending;
        protected override ListSortDirection SortDirectionCore
        {
            get
            {
                return sortDirection;
            }
        }

        private int Compare(Calf_Tagorganization x, Calf_Tagorganization y)
        {
            if (sortDirection == ListSortDirection.Descending)
                return CompareValue(propertyDescriptor.GetValue(y), propertyDescriptor.GetValue(x));
            else
                return CompareValue(propertyDescriptor.GetValue(x), propertyDescriptor.GetValue(y));
        }

        private int Compare2(Calf_Tagorganization x, Calf_Tagorganization y)
        {
            return hideList.IndexOf(x).CompareTo(hideList.IndexOf(y));
        }

        static int CompareValue(object o1, object o2)
        {
            if (o1 == null) return o2 == null ? 0 : -1;
            else if (o2 == null) return 1;
            else if (o1 is IComparable) return ((IComparable)o1).CompareTo(o2);
            else if (o2 is IComparable) return ((IComparable)o2).CompareTo(o1);
            else return o1.ToString().CompareTo(o2.ToString());
        }

        protected override bool SupportsSortingCore
        {
            get
            {
                return true;
            }
        }
       
        private bool _IsSortedCore = false;
        protected override bool IsSortedCore
        {
            get
            {
                return _IsSortedCore;
            }
        }
    
        protected  override void RemoveSortCore()
        {
            _IsSortedCore = false;
            List<Calf_Tagorganization> list = this.Items as List<Calf_Tagorganization>;
            list.Sort(Compare2); 
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public void RemoveSort()
        {
            RemoveSortCore();
        }

        private bool beginAdjustData = false;
       
       

        public void CancelFilter()
        {
            beginAdjustData =true;
            this.Clear();
            foreach (Calf_Tagorganization item in hideList)
            {
                if(item.DataState != DataStateType.Delete)
                {
                    this.Add(item);
                }
            }
            beginAdjustData =false;

            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset,-1);
            this.OnListChanged(arg);
        }

        protected override void OnListChanged(ListChangedEventArgs e)
        {
            if (!beginAdjustData)
                base.OnListChanged(e);
        }

        #region IFilter 成员

        public void Filter(Dictionary<string, string> para)
        {
            beginAdjustData= true;
            this.Clear();
            foreach (Calf_Tagorganization hideItem in hideList)
            {
                bool shouldAdd = true;
                shouldAdd &= (hideItem.DataState != DataStateType.Delete);

                foreach (KeyValuePair<string, string> item in para)
                {
                    PropertyInfo p = typeof(Calf_Tagorganization).GetProperty(item.Key);
                    if (p == null) continue;
                    if (p.PropertyType == typeof(string))
                    {
                        string val = Convert.ToString(p.GetValue(hideItem, null));
                        shouldAdd &= val.StartsWith(item.Value);
                    }
                    if (p.PropertyType == typeof(double))
                    {
                        double val = Convert.ToDouble(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToDouble(item.Value));
                    }
                    if (p.PropertyType == typeof(int))
                    {
                        int val = Convert.ToInt32(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt32(item.Value));
                    }
                    if (p.PropertyType == typeof(long))
                    {
                        long val = Convert.ToInt64(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt64(item.Value));
                    }
                }
                if (shouldAdd)
                    this.Add(hideItem);
            }
            List<Calf_Tagorganization> list = this.Items as List<Calf_Tagorganization>;
            if (IsSortedCore)
                list.Sort(Compare);
            else
                list.Sort(Compare2);

            beginAdjustData= false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        #endregion
        public void LoadByCALMODELID(string CALMODELID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,PARENTID,ORGNAME,TAGGROUPID FROM CALF_TAGORGANIZATION WHERE (PARENTID IS NULL OR PARENTID='') AND CALMODELID=:CALMODELID";
   selectCmd.Parameters.Add(":CALMODELID",OracleType.Char,32).Value=CALMODELID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Tagorganization item = new Calf_Tagorganization();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.PARENTID="";  else item.PARENTID=dr.GetString(2); 
if(dr.IsDBNull(3)) item.ORGNAME="";  else item.ORGNAME=dr.GetString(3); 
if(dr.IsDBNull(4)) item.TAGGROUPID="";  else item.TAGGROUPID=dr.GetString(4); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
        public void LoadByPARENTID(string PARENTID) {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,PARENTID,ORGNAME,TAGGROUPID FROM CALF_TAGORGANIZATION WHERE PARENTID=:PARENTID";
   selectCmd.Parameters.Add(":PARENTID",OracleType.Char,32).Value=PARENTID;

   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Tagorganization item = new Calf_Tagorganization();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.PARENTID="";  else item.PARENTID=dr.GetString(2); 
if(dr.IsDBNull(3)) item.ORGNAME="";  else item.ORGNAME=dr.GetString(3); 
if(dr.IsDBNull(4)) item.TAGGROUPID="";  else item.TAGGROUPID=dr.GetString(4); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
        public void Load() {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT EID,CALMODELID,PARENTID,ORGNAME,TAGGROUPID FROM CALF_TAGORGANIZATION";
   
   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Calf_Tagorganization item = new Calf_Tagorganization();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.EID="";  else item.EID=dr.GetString(0); 
item.Ori_EID=item.EID;
if(dr.IsDBNull(1)) item.CALMODELID="";  else item.CALMODELID=dr.GetString(1); 
if(dr.IsDBNull(2)) item.PARENTID="";  else item.PARENTID=dr.GetString(2); 
if(dr.IsDBNull(3)) item.ORGNAME="";  else item.ORGNAME=dr.GetString(3); 
if(dr.IsDBNull(4)) item.TAGGROUPID="";  else item.TAGGROUPID=dr.GetString(4); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }
    }
}
