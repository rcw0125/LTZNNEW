//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace LTZN
{
    using System;
    using System.Data;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Reflection;
    using System.Data.OracleClient;
    
    public enum DataStateType {
UnChanged,Add,Update,Delete
    }
    public interface IFilter {
void Filter(Dictionary<string, string> para);
    }
    public partial class Ltzn_Para : INotifyPropertyChanged {
        private string _NAME = "";
        private double _VAL;
        private string _STRVAL = "";
  //ConStr 
  public DataStateType DataState = DataStateType.Add;

   public event PropertyChangedEventHandler PropertyChanged;

   private void RaisePropertyChanged(string propertyName,bool induceChanged)
   {
      if (PropertyChanged != null)
      {
         PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
         if(induceChanged)
         {
            if (this.DataState == DataStateType.UnChanged)
               this.DataState = DataStateType.Update;
         }
      }
   }

   public void ClearDataState()
   {
     this.DataState = DataStateType.UnChanged;
   }
         
   private bool Initing=false;        

   public void BeginInit()
   {
     Initing=true;
   }
 
   public void EndInit()
   {
      Initing=false;
   }

   public void Save()
   {
     OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
     con.Open();
     OracleTransaction trans = con.BeginTransaction();
     Save(trans);
     trans.Commit();
     con.Close();
   }

   public void Save(OracleTransaction trans)
   {
      OracleConnection con = trans.Connection;
      DbDelete(trans);
      DbInsert(trans);
      DbUpdate(trans);
      ClearDataState();
      SaveOther(trans);
   }
  
   public void Delete()
   {
      if (this.DataState == DataStateType.Add)
           this.DataState = DataStateType.UnChanged;
      else
           this.DataState = DataStateType.Delete;
   }

        
        public string NAME {
            get {
                return this._NAME;
            }
            set {
 if (!_NAME.Equals(value)){
_NAME= value;
 RaisePropertyChanged("NAME",true);}

            }
        }
        public double VAL {
            get {
                return this._VAL;
            }
            set {
 if (!_VAL.Equals(value)){
_VAL= value;
 RaisePropertyChanged("VAL",true);}

            }
        }
        public string STRVAL {
            get {
                return this._STRVAL;
            }
            set {
 if (!_STRVAL.Equals(value)){
_STRVAL= value;
 RaisePropertyChanged("STRVAL",true);}

            }
        }
        public virtual void SaveOther(OracleTransaction trans) {

        }
        public void DbInsert(OracleTransaction trans) {
  //InsertSql,InsertPara,AutoSql
  if (DataState == DataStateType.Add)
  {
     OracleConnection con = trans.Connection;
     OracleCommand insertCmd = new OracleCommand();
     insertCmd.Connection = con;
     insertCmd.Transaction = trans;
     insertCmd.CommandText = "INSERT INTO LTZN_PARA(NAME,VAL,STRVAL) VALUES(:NAME,:VAL,:STRVAL)";
     insertCmd.Parameters.Add(":NAME",OracleType.VarChar,1000).Value=this.NAME;
if(this.VAL==-1)
insertCmd.Parameters.Add(":VAL", OracleType.Double,22).Value=DBNull.Value;
else
insertCmd.Parameters.Add(":VAL", OracleType.Double,22).Value=this.VAL;
insertCmd.Parameters.Add(":STRVAL",OracleType.VarChar,1000).Value=this.STRVAL;

     insertCmd.ExecuteNonQuery();
     
   }
          

        
        }
        public void DbDelete(OracleTransaction trans) {
  //DelSql,DelPara
  if (DataState == DataStateType.Delete)
  {
     OracleConnection con = trans.Connection;
     OracleCommand deleteCmd = new OracleCommand();
     deleteCmd.Connection = con;
     deleteCmd.Transaction = trans;
     deleteCmd.CommandText = "DELETE FROM LTZN_PARA WHERE ";
     
     deleteCmd.ExecuteNonQuery();
  }
         
        }
        public void DbUpdate(OracleTransaction trans) {
  //UpdateSql,UpdatePara
  if (DataState == DataStateType.Update)
  {
     OracleConnection con = trans.Connection;
     OracleCommand updateCmd = new OracleCommand();
     updateCmd.Connection = con;
     updateCmd.Transaction=trans;
     updateCmd.CommandText = "UPDATE LTZN_PARA SET NAME=:NAME,VAL=:VAL,STRVAL=:STRVAL WHERE ";
     updateCmd.Parameters.Add(":NAME",OracleType.VarChar,1000).Value=this.NAME;
updateCmd.Parameters.Add(":VAL", OracleType.Double,22).Value=this.VAL;
updateCmd.Parameters.Add(":STRVAL",OracleType.VarChar,1000).Value=this.STRVAL;

     updateCmd.ExecuteNonQuery();
  }
          
        
        }
    }
    public partial class Ltzn_ParaTable : BindingList<Ltzn_Para>, IFilter {
       //Ltzn_Para,ConnectionString

       private List<Ltzn_Para> hideList = new List<Ltzn_Para>();

        public  void Save()
        {
            OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleTransaction trans = con.BeginTransaction();
            Save(trans);
            trans.Commit();
            con.Close();
        }

        public  void Save(OracleTransaction trans)
        {
            List<Ltzn_Para> deleteList = new List<Ltzn_Para>();
            OracleConnection con = trans.Connection;
            foreach (Ltzn_Para item in hideList)
            {
                if (item.DataState == DataStateType.Delete)
                    deleteList.Add(item);
                item.Save(trans);
            }
            foreach (Ltzn_Para item in deleteList)
            {
                hideList.Remove(item);
            }
        }

        protected override void InsertItem(int index, Ltzn_Para item)
        {
          base.InsertItem(index, item);
          if(!beginAdjustData)
          {
            hideList.Add(item);
          }
        }

        protected override void ClearItems()
        {
           if(!beginAdjustData)
           {
             foreach (Ltzn_Para delObj in this)
             {
               if (delObj.DataState == DataStateType.Add)
               {
                  hideList.Remove(delObj);
               }
               delObj.Delete();
             }
           }
            base.ClearItems();
        }

        protected override void RemoveItem(int index)
        {
          if(!beginAdjustData)
          {
             Ltzn_Para delObj = this[index];
             if (delObj.DataState == DataStateType.Add)
             {
                hideList.Remove(delObj);
             }
             delObj.Delete();
           }
           base.RemoveItem(index);
        }

        protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)
        {
            propertyDescriptor = prop;
            sortDirection = direction; 
            _IsSortedCore = true;
            List<Ltzn_Para> list = this.Items as List<Ltzn_Para>;
            list.Sort(Compare); 
            _IsSortedCore = true;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, propertyDescriptor);
            this.OnListChanged(arg);
           
        }
      
        private PropertyDescriptor propertyDescriptor = null;
        protected override PropertyDescriptor SortPropertyCore
        {
            get
            {
                return propertyDescriptor;
            }
        }
       
        private ListSortDirection sortDirection = ListSortDirection.Ascending;
        protected override ListSortDirection SortDirectionCore
        {
            get
            {
                return sortDirection;
            }
        }

        private int Compare(Ltzn_Para x, Ltzn_Para y)
        {
            if (sortDirection == ListSortDirection.Descending)
                return CompareValue(propertyDescriptor.GetValue(y), propertyDescriptor.GetValue(x));
            else
                return CompareValue(propertyDescriptor.GetValue(x), propertyDescriptor.GetValue(y));
        }

        private int Compare2(Ltzn_Para x, Ltzn_Para y)
        {
            return hideList.IndexOf(x).CompareTo(hideList.IndexOf(y));
        }

        static int CompareValue(object o1, object o2)
        {
            if (o1 == null) return o2 == null ? 0 : -1;
            else if (o2 == null) return 1;
            else if (o1 is IComparable) return ((IComparable)o1).CompareTo(o2);
            else if (o2 is IComparable) return ((IComparable)o2).CompareTo(o1);
            else return o1.ToString().CompareTo(o2.ToString());
        }

        protected override bool SupportsSortingCore
        {
            get
            {
                return true;
            }
        }
       
        private bool _IsSortedCore = false;
        protected override bool IsSortedCore
        {
            get
            {
                return _IsSortedCore;
            }
        }
    
        protected  override void RemoveSortCore()
        {
            _IsSortedCore = false;
            List<Ltzn_Para> list = this.Items as List<Ltzn_Para>;
            list.Sort(Compare2); 
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public void RemoveSort()
        {
            RemoveSortCore();
        }

        private bool beginAdjustData = false;
       
       

        public void CancelFilter()
        {
            beginAdjustData =true;
            this.Clear();
            foreach (Ltzn_Para item in hideList)
            {
                if(item.DataState != DataStateType.Delete)
                {
                    this.Add(item);
                }
            }
            beginAdjustData =false;

            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset,-1);
            this.OnListChanged(arg);
        }

        protected override void OnListChanged(ListChangedEventArgs e)
        {
            if (!beginAdjustData)
                base.OnListChanged(e);
        }

        #region IFilter 成员

        public void Filter(Dictionary<string, string> para)
        {
            beginAdjustData= true;
            this.Clear();
            foreach (Ltzn_Para hideItem in hideList)
            {
                bool shouldAdd = true;
                shouldAdd &= (hideItem.DataState != DataStateType.Delete);

                foreach (KeyValuePair<string, string> item in para)
                {
                    PropertyInfo p = typeof(Ltzn_Para).GetProperty(item.Key);
                    if (p == null) continue;
                    if (p.PropertyType == typeof(string))
                    {
                        string val = Convert.ToString(p.GetValue(hideItem, null));
                        shouldAdd &= val.StartsWith(item.Value);
                    }
                    if (p.PropertyType == typeof(double))
                    {
                        double val = Convert.ToDouble(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToDouble(item.Value));
                    }
                    if (p.PropertyType == typeof(int))
                    {
                        int val = Convert.ToInt32(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt32(item.Value));
                    }
                    if (p.PropertyType == typeof(long))
                    {
                        long val = Convert.ToInt64(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt64(item.Value));
                    }
                }
                if (shouldAdd)
                    this.Add(hideItem);
            }
            List<Ltzn_Para> list = this.Items as List<Ltzn_Para>;
            if (IsSortedCore)
                list.Sort(Compare);
            else
                list.Sort(Compare2);

            beginAdjustData= false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        #endregion
        public void Load() {
   //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
   beginAdjustData= true;            
   this.Clear();
   hideList.Clear();
   OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
   con.Open();
   OracleCommand selectCmd = new OracleCommand();
   selectCmd.Connection = con;
   selectCmd.CommandText = "SELECT NAME,VAL,STRVAL FROM LTZN_PARA";
   
   OracleDataReader dr = selectCmd.ExecuteReader();
   while (dr.Read())
   {
      Ltzn_Para item = new Ltzn_Para();
      item.BeginInit();
      if(dr.IsDBNull(0)) item.NAME="";  else item.NAME=dr.GetString(0); 
if(dr.IsDBNull(1)) item.VAL=0;  else item.VAL=dr.GetDouble(1); 
if(dr.IsDBNull(2)) item.STRVAL="";  else item.STRVAL=dr.GetString(2); 

      item.EndInit();
      item.ClearDataState();
      this.Add(item);
      hideList.Add(item);
   }
   dr.Close();
   con.Close();
   beginAdjustData= false;
   ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
   this.OnListChanged(arg);
        }

        public void LoadLikeName(string name)
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT NAME,VAL,STRVAL FROM LTZN_PARA WHERE NAME Like '" + name+"'";

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Ltzn_Para item = new Ltzn_Para();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.NAME = ""; else item.NAME = dr.GetString(0);
                if (dr.IsDBNull(1)) item.VAL = 0; else item.VAL = dr.GetDouble(1);
                if (dr.IsDBNull(2)) item.STRVAL = ""; else item.STRVAL = dr.GetString(2);

                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }
  
    
        public static void  ClearTableLikeName(string name)
        {
            OracleConnection con = new OracleConnection(Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "DELETE FROM LTZN_PARA WHERE NAME Like '" + name + "'";
            selectCmd.ExecuteNonQuery();
            con.Close();
        }
    }
}
