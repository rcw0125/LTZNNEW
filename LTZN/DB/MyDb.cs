//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3625
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZHCDB
{
    using System;
    using System.Data;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Reflection;
    using System.Data.OracleClient;
    using LTZN;

    public enum DataStateType
    {
        UnChanged, Add, Update, Delete
    }

    public interface IFilter
    {
        void Filter(Dictionary<string, string> para);
    }

    public class DbEntity : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName, bool induceChanged)
        {
            if (!Initing)
            {
                if (PropertyChanged != null)
                {
                    PropertyChanged(this, new PropertyChangedEventArgs(propertyName));

                }
                if (induceChanged)
                {
                    if (this.DataState == DataStateType.UnChanged)
                        this.DataState = DataStateType.Update;
                }
            }
        }

        protected void RaisePropertyChanged(string propertyName)
        {
            if (!Initing)
            {
                if (PropertyChanged != null)
                {
                    PropertyChanged(this, new PropertyChangedEventArgs(propertyName));

                }
            }
        }

        public DataStateType DataState = DataStateType.Add;

        public void ClearDataState()
        {
            this.DataState = DataStateType.UnChanged;
        }

        private bool Initing = false;

        public void BeginInit()
        {
            Initing = true;
            DataState = DataStateType.UnChanged;
        }

        public void EndInit()
        {
            Initing = false;
        }

        public void Save()
        {
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleTransaction trans = con.BeginTransaction();
            Save(trans);
            trans.Commit();
            con.Close();
        }

        public void Save(OracleTransaction trans)
        {
            OracleConnection con = trans.Connection;
            DbDelete(trans);
            DbInsert(trans);
            DbUpdate(trans);
            ClearDataState();
            SaveOther(trans);
        }

        public void Delete()
        {
            if (this.DataState == DataStateType.Add)
                this.DataState = DataStateType.UnChanged;
            else
                this.DataState = DataStateType.Delete;
        }

        public virtual void DbInsert(OracleTransaction trans)
        {
        }

        public virtual void DbUpdate(OracleTransaction trans)
        {
        }

        public virtual void DbDelete(OracleTransaction trans)
        {

        }

        public virtual void SaveOther(OracleTransaction trans)
        {
        }

        internal OracleString RowId = "";
    }

    public class DbEntityTable<T> : BindingList<T>, IFilter, INotifyPropertyChanged where T : DbEntity
    {
        protected List<T> hideList = new List<T>();

        protected bool beginAdjustData = false;

        public void BeginInit()
        {
            beginAdjustData = true;
        }

        public void EndInit()
        {
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public virtual void Save()
        {
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleTransaction trans = con.BeginTransaction();
            Save(trans);
            SaveOther(trans);
            trans.Commit();
            con.Close();
            ExeOther(con);
        }

        public virtual void SaveOther(OracleTransaction trans)
        {

        }
        public virtual void ExeOther(OracleConnection con)
        {

        }

        public void Save(OracleTransaction trans)
        {
            List<T> deleteList = new List<T>();
            OracleConnection con = trans.Connection;
            foreach (T item in hideList)
            {
                if (item.DataState == DataStateType.Delete)
                    deleteList.Add(item);
                item.Save(trans);
            }
            foreach (T item in deleteList)
            {
                hideList.Remove(item);
            }
        }

        protected override void InsertItem(int index, T item)
        {
            base.InsertItem(index, item);
            if (!beginAdjustData)
            {
                hideList.Add(item);
            }
        }

        protected override void ClearItems()
        {
            if (!beginAdjustData)
            {
                foreach (T delObj in this)
                {
                    if (delObj.DataState == DataStateType.Add)
                    {
                        hideList.Remove(delObj);
                    }
                    delObj.Delete();
                }
            }
            base.ClearItems();
        }

        protected override void RemoveItem(int index)
        {
            if (!beginAdjustData)
            {
                T delObj = this[index];
                if (delObj.DataState == DataStateType.Add)
                {
                    hideList.Remove(delObj);
                }
                delObj.Delete();
            }
            base.RemoveItem(index);
        }


        protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)
        {
            propertyDescriptor = prop;
            sortDirection = direction;
            _IsSortedCore = true;
            List<T> list = this.Items as List<T>;
            list.Sort(Compare);
            _IsSortedCore = true;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, propertyDescriptor);
            this.OnListChanged(arg);

        }

        private PropertyDescriptor propertyDescriptor = null;
        protected override PropertyDescriptor SortPropertyCore
        {
            get
            {
                return propertyDescriptor;
            }
        }

        private ListSortDirection sortDirection = ListSortDirection.Ascending;
        protected override ListSortDirection SortDirectionCore
        {
            get
            {
                return sortDirection;
            }
        }

        private int Compare(T x, T y)
        {
            if (sortDirection == ListSortDirection.Descending)
                return CompareValue(propertyDescriptor.GetValue(y), propertyDescriptor.GetValue(x));
            else
                return CompareValue(propertyDescriptor.GetValue(x), propertyDescriptor.GetValue(y));
        }

        private int Compare2(T x, T y)
        {
            return hideList.IndexOf(x).CompareTo(hideList.IndexOf(y));
        }

        static int CompareValue(object o1, object o2)
        {
            if (o1 == null) return o2 == null ? 0 : -1;
            else if (o2 == null) return 1;
            else if (o1 is IComparable) return ((IComparable)o1).CompareTo(o2);
            else if (o2 is IComparable) return ((IComparable)o2).CompareTo(o1);
            else return o1.ToString().CompareTo(o2.ToString());
        }

        protected override bool SupportsSortingCore
        {
            get
            {
                return true;
            }
        }

        private bool _IsSortedCore = false;
        protected override bool IsSortedCore
        {
            get
            {
                return _IsSortedCore;
            }
        }

        protected override void RemoveSortCore()
        {
            _IsSortedCore = false;
            List<T> list = this.Items as List<T>;
            list.Sort(Compare2);
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public void RemoveSort()
        {
            RemoveSortCore();
        }

        public void CancelFilter()
        {
            beginAdjustData = true;
            this.Clear();
            foreach (T item in hideList)
            {
                if (item.DataState != DataStateType.Delete)
                {
                    this.Add(item);
                }
            }
            beginAdjustData = false;

            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        protected override void OnListChanged(ListChangedEventArgs e)
        {
            if (!beginAdjustData)
                base.OnListChanged(e);
        }

        #region IFilter 成员

        public void Filter(Dictionary<string, string> para)
        {
            beginAdjustData = true;
            this.Clear();
            foreach (T hideItem in hideList)
            {
                bool shouldAdd = true;
                shouldAdd &= (hideItem.DataState != DataStateType.Delete);

                foreach (KeyValuePair<string, string> item in para)
                {
                    PropertyInfo p = typeof(T).GetProperty(item.Key);
                    if (p == null) continue;
                    if (p.PropertyType == typeof(string))
                    {
                        string val = Convert.ToString(p.GetValue(hideItem, null));
                        shouldAdd &= val.StartsWith(item.Value);
                    }
                    if (p.PropertyType == typeof(double))
                    {
                        double? val = Convert.ToDouble(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToDouble(item.Value));
                    }
                    if (p.PropertyType == typeof(int))
                    {
                        int val = Convert.ToInt32(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt32(item.Value));
                    }
                    if (p.PropertyType == typeof(long))
                    {
                        long val = Convert.ToInt64(p.GetValue(hideItem, null));
                        shouldAdd &= (val == Convert.ToInt64(item.Value));
                    }
                }
                if (shouldAdd)
                    this.Add(hideItem);
            }
            List<T> list = this.Items as List<T>;
            if (IsSortedCore)
                list.Sort(Compare);
            else
                list.Sort(Compare2);

            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        #endregion

        public event PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }


        public static LTZN.Query.QueryEntity QueryEntity()
        {
            LTZN.Query.QueryEntity queryEntity = new LTZN.Query.QueryEntity(typeof(T).Name);

            foreach (var item in typeof(T).GetProperties())
            {

                QueryAttribute[] query = (QueryAttribute[])item.GetCustomAttributes(typeof(QueryAttribute), true);
                if (query.Length > 0)
                {
                    LTZN.Query.EntityField a = new LTZN.Query.EntityField();

                    a.FieldName = item.Name;
                    a.FieldDispaly = item.Name;
                    if (item.PropertyType == typeof(string))
                    {
                        a.FieldType = "string";
                    }
                    else if (item.PropertyType == typeof(DateTime) || item.PropertyType == typeof(DateTime?))
                    {
                        a.FieldType = "DateTime";
                    }
                    else if (item.PropertyType == typeof(int) || item.PropertyType == typeof(int?))
                    {
                        a.FieldType = "int";
                    }
                    else if (item.PropertyType == typeof(bool) || item.PropertyType == typeof(bool?))
                    {
                        a.FieldType = "bool";
                    }
                    else
                    {
                        a.FieldType = "double";
                    }

                    DisplayNameAttribute[] display = (DisplayNameAttribute[])item.GetCustomAttributes(typeof(DisplayNameAttribute), true);
                    if (display.Length > 0)
                    {
                        a.FieldDispaly = display[0].DisplayName;
                    }
                    queryEntity.Add(a);
                }
            }

            return queryEntity;
        }

    }

    public class QueryAttribute : Attribute
    {
    }

    public partial class Rd_Ri : DbEntity
    {
        private DateTime _RQ = DateTime.Today;
        private string _TAGNAME = "";
        private double? _VAL;
        private string _STRVAL = "";
        private bool _ISLOCK = false;

        public DateTime RQ
        {
            get
            {
                return this._RQ;
            }
            set
            {
                if (!_RQ.Equals(value))
                {
                    _RQ = value;
                    RaisePropertyChanged("RQ", true);
                }

            }
        }
        public string TAGNAME
        {
            get
            {
                return this._TAGNAME;
            }
            set
            {
                if (!_TAGNAME.Equals(value))
                {
                    _TAGNAME = value;
                    RaisePropertyChanged("TAGNAME", true);
                }

            }
        }
        public double? VAL
        {
            get
            {
                return this._VAL;
            }
            set
            {
                if (!_VAL.Equals(value))
                {
                    _VAL = value;
                    RaisePropertyChanged("VAL", true);
                }

            }
        }
        public string STRVAL
        {
            get
            {
                return this._STRVAL;
            }
            set
            {
                if (!_STRVAL.Equals(value))
                {
                    _STRVAL = value;
                    RaisePropertyChanged("STRVAL", true);
                }

            }
        }
        public bool ISLOCK
        {
            get
            {
                return this._ISLOCK;
            }
            set
            {
                if (!_ISLOCK.Equals(value))
                {
                    _ISLOCK = value;
                    RaisePropertyChanged("ISLOCK", true);
                }

            }
        }

        public bool CheckPk(OracleTransaction trans)
        {
            OracleConnection con = trans.Connection;
            OracleCommand checkCmd = new OracleCommand();
            checkCmd.Connection = con;
            checkCmd.Transaction = trans;
            checkCmd.CommandText = "SELECT ROWID FROM RD_RI WHERE RQ=:RQ AND TAGNAME=:TAGNAME";
            checkCmd.Parameters.Add(":RQ", OracleType.DateTime).Value = this.RQ;
            checkCmd.Parameters.Add(":TAGNAME", OracleType.VarChar, 200).Value = this.TAGNAME;
            OracleDataReader dr = checkCmd.ExecuteReader();
            bool result = false;
            if (dr.Read())
            {
                OracleString rowid = dr.GetOracleString(0);
                if (!rowid.IsNull)
                {
                    this.RowId = rowid;
                    result = true;
                }
            }
            dr.Close();
            return result;
        }

        public override void DbInsert(OracleTransaction trans)
        {
            //InsertSql,InsertPara,AutoSql
            if (DataState == DataStateType.Add)
            {
                if (CheckPk(trans))
                {
                    DataState = DataStateType.Update;
                    DbUpdate(trans);
                    return;
                }
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO RD_RI(RQ,TAGNAME,VAL,STRVAL,ISLOCK) VALUES(:RQ,:TAGNAME,:VAL,:STRVAL,:ISLOCK)";
                insertCmd.Parameters.Add(":RQ", OracleType.DateTime).Value = this.RQ;
                insertCmd.Parameters.Add(":TAGNAME", OracleType.VarChar, 200).Value = this.TAGNAME;
                insertCmd.Parameters.Add(":VAL", OracleType.Double).Value = (object)this.VAL ?? DBNull.Value;
                insertCmd.Parameters.Add(":STRVAL", OracleType.VarChar, 500).Value = this.STRVAL;
                insertCmd.Parameters.Add(":ISLOCK", OracleType.Byte).Value = this.ISLOCK;
                insertCmd.ExecuteOracleNonQuery(out RowId);
            }
        }

        public override void DbUpdate(OracleTransaction trans)
        {
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE RD_RI SET RQ=:RQ,TAGNAME=:TAGNAME,VAL=:VAL,STRVAL=:STRVAL,ISLOCK=:ISLOCK WHERE ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":RQ", OracleType.DateTime).Value = this.RQ;
                updateCmd.Parameters.Add(":TAGNAME", OracleType.VarChar, 200).Value = this.TAGNAME;
                updateCmd.Parameters.Add(":VAL", OracleType.Double).Value = (object)this.VAL ?? DBNull.Value;
                updateCmd.Parameters.Add(":STRVAL", OracleType.VarChar, 500).Value = this.STRVAL;
                updateCmd.Parameters.Add(":ISLOCK", OracleType.Double).Value = this.ISLOCK;

                updateCmd.ExecuteNonQuery();
            }


        }

        public override void DbDelete(OracleTransaction trans)
        {
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM RD_RI WHERE ROWID='" + RowId.Value + "'";
                deleteCmd.ExecuteNonQuery();
            }
        }

        public override bool Equals(object obj)
        {
            Rd_Ri other = obj as Rd_Ri;
            if (other != null)
            {
                if (this.RQ == other.RQ && this.TAGNAME == other.TAGNAME)
                    return true;
            }
            return false;
        }

        public override int GetHashCode()
        {
            return this.TAGNAME.GetHashCode();
        }

        public override string ToString()
        {
            if (VAL != null)
                return VAL.Value.ToString();
            else
                return "";
        }
    }

    public partial class Rd_RiTable : DbEntityTable<Rd_Ri>, ITagSource
    {
        public DateTime? Riqi { get; set; }

        public void LoadByRq(DateTime rq)
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT RQ,TAGNAME,VAL,STRVAL,ISLOCK,ROWID FROM RD_RI WHERE RQ=:RQ";
            selectCmd.Parameters.Add(":RQ", OracleType.DateTime).Value = rq;

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Rd_Ri item = new Rd_Ri();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.RQ = DateTime.Today; else item.RQ = dr.GetDateTime(0);
                if (dr.IsDBNull(1)) item.TAGNAME = ""; else item.TAGNAME = dr.GetString(1);
                if (dr.IsDBNull(2)) item.VAL = null; else item.VAL = dr.GetDouble(2);
                if (dr.IsDBNull(3)) item.STRVAL = ""; else item.STRVAL = dr.GetString(3);
                if (dr.IsDBNull(4)) item.ISLOCK = false; else item.ISLOCK = (dr.GetInt32(4) == 1);
                item.RowId = dr.GetString(5);

                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            Riqi = rq;
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public Rd_Ri Find(DateTime rq, string tagName)
        {
            foreach (var item in this)
            {
                if (item.RQ == rq && item.TAGNAME == tagName)
                    return item;
            }
            return null;
        }

        public void SetTagValue(string tagName, double? val)
        {
            if (this.Riqi != null)
            {
                Rd_Ri yItem = Find(this.Riqi.Value, tagName);
                if (yItem != null)
                    yItem.VAL = val;
                else
                {
                    yItem = new Rd_Ri();
                    yItem.RQ = this.Riqi.Value;
                    yItem.TAGNAME = tagName;
                    yItem.VAL = val;
                    this.Add(yItem);
                }
            }
        }

        #region ITagSource 成员

        public double? GetDoubleValue(string TagName)
        {
            foreach (var item in this)
            {
                if (item.TAGNAME == TagName)
                {
                    return item.VAL;
                }
            }
            return -1;
        }

        public string GetStringValue(string TagName)
        {
            foreach (var item in this)
            {
                if (item.TAGNAME == TagName)
                {
                    return item.STRVAL;
                }
            }
            return "找不到标签";
        }

        #endregion
    }

    public partial class Rd_Ban : DbEntity
    {
        private DateTime _RQ = DateTime.Today;
        private string _BANCI = "";
        private string _TAGNAME = "";
        private double? _VAL;
        private string _STRVAL = "";
        private bool _ISLOCK;

        public DateTime RQ
        {
            get
            {
                return this._RQ;
            }
            set
            {
                if (!_RQ.Equals(value))
                {
                    _RQ = value;
                    RaisePropertyChanged("RQ", true);
                }

            }
        }
        public string BANCI
        {
            get
            {
                return this._BANCI;
            }
            set
            {
                if (!_BANCI.Equals(value))
                {
                    _BANCI = value;
                    RaisePropertyChanged("BANCI", true);
                }

            }
        }
        public string TAGNAME
        {
            get
            {
                return this._TAGNAME;
            }
            set
            {
                if (!_TAGNAME.Equals(value))
                {
                    _TAGNAME = value;
                    RaisePropertyChanged("TAGNAME", true);
                }

            }
        }
        public double? VAL
        {
            get
            {
                return this._VAL;
            }
            set
            {
                if (!_VAL.Equals(value))
                {
                    _VAL = value;
                    RaisePropertyChanged("VAL", true);
                }

            }
        }
        public string STRVAL
        {
            get
            {
                return this._STRVAL;
            }
            set
            {
                if (!_STRVAL.Equals(value))
                {
                    _STRVAL = value;
                    RaisePropertyChanged("STRVAL", true);
                }

            }
        }
        public bool ISLOCK
        {
            get
            {
                return this._ISLOCK;
            }
            set
            {
                if (!_ISLOCK.Equals(value))
                {
                    _ISLOCK = value;
                    RaisePropertyChanged("ISLOCK", true);
                }

            }
        }

        public bool CheckPk(OracleTransaction trans)
        {
            OracleConnection con = trans.Connection;
            OracleCommand checkCmd = new OracleCommand();
            checkCmd.Connection = con;
            checkCmd.Transaction = trans;
            checkCmd.CommandText = "SELECT ROWID FROM RD_RI WHERE RQ=:RQ AND BANCI=:BANCI AND TAGNAME=:TAGNAME";
            checkCmd.Parameters.Add(":RQ", OracleType.DateTime).Value = this.RQ;
            checkCmd.Parameters.Add(":BANCI", OracleType.VarChar, 50).Value = this.BANCI;
            checkCmd.Parameters.Add(":TAGNAME", OracleType.VarChar, 200).Value = this.TAGNAME;
            OracleDataReader dr = checkCmd.ExecuteReader();
            bool result = false;
            if (dr.Read())
            {
                OracleString rowid = dr.GetOracleString(0);
                if (!rowid.IsNull)
                {
                    this.RowId = rowid;
                    result = true;
                }
            }
            dr.Close();
            return result;
        }

        public override void DbInsert(OracleTransaction trans)
        {
            //InsertSql,InsertPara,AutoSql
            if (DataState == DataStateType.Add)
            {
                if (CheckPk(trans))
                {
                    DataState = DataStateType.Update;
                    DbUpdate(trans);
                    return;
                }
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO RD_BAN(RQ,BANCI,TAGNAME,VAL,STRVAL,ISLOCK) VALUES(:RQ,:BANCI,:TAGNAME,:VAL,:STRVAL,:ISLOCK)";
                insertCmd.Parameters.Add(":RQ", OracleType.DateTime).Value = this.RQ;
                insertCmd.Parameters.Add(":BANCI", OracleType.VarChar, 50).Value = this.BANCI;
                insertCmd.Parameters.Add(":TAGNAME", OracleType.VarChar, 200).Value = this.TAGNAME;
                insertCmd.Parameters.Add(":VAL", OracleType.Double).Value = (object)this.VAL ?? DBNull.Value;
                insertCmd.Parameters.Add(":STRVAL", OracleType.VarChar, 500).Value = this.STRVAL;
                insertCmd.Parameters.Add(":ISLOCK", OracleType.Byte).Value = this.ISLOCK;
                insertCmd.ExecuteOracleNonQuery(out RowId);

            }



        }
        public override void DbDelete(OracleTransaction trans)
        {
            //DelSql,DelPara
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM RD_BAN WHERE ROWID='" + RowId.Value + "'";

                deleteCmd.ExecuteNonQuery();
            }

        }
        public override void DbUpdate(OracleTransaction trans)
        {
            //UpdateSql,UpdatePara
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE RD_BAN SET RQ=:RQ,BANCI=:BANCI,TAGNAME=:TAGNAME,VAL=:VAL,STRVAL=:STRVAL,ISLOCK=:ISLOCK WHERE ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":RQ", OracleType.DateTime).Value = this.RQ;
                updateCmd.Parameters.Add(":BANCI", OracleType.VarChar, 50).Value = this.BANCI;
                updateCmd.Parameters.Add(":TAGNAME", OracleType.VarChar, 200).Value = this.TAGNAME;
                updateCmd.Parameters.Add(":VAL", OracleType.Double).Value = (object)this.VAL ?? DBNull.Value;
                updateCmd.Parameters.Add(":STRVAL", OracleType.VarChar, 500).Value = this.STRVAL;
                updateCmd.Parameters.Add(":ISLOCK", OracleType.Double).Value = this.ISLOCK;

                updateCmd.ExecuteNonQuery();
            }


        }
    }

    public partial class Rd_BanTable : DbEntityTable<Rd_Ban>
    {
        public void LoadByBan(DateTime rq, string banci)
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT RQ,BANCI,TAGNAME,VAL,STRVAL,ISLOCK,ROWID FROM RD_BAN WHERE RQ=:RQ AND BANCI=:BANCI";
            selectCmd.Parameters.Add(":RQ", OracleType.DateTime).Value = rq;
            selectCmd.Parameters.Add(":BANCI", OracleType.VarChar, 50).Value = banci;
            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Rd_Ban item = new Rd_Ban();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.RQ = DateTime.Today; else item.RQ = dr.GetDateTime(0);
                if (dr.IsDBNull(1)) item.BANCI = ""; else item.BANCI = dr.GetString(1);
                if (dr.IsDBNull(2)) item.TAGNAME = ""; else item.TAGNAME = dr.GetString(2);
                if (dr.IsDBNull(3)) item.VAL = null; else item.VAL = dr.GetDouble(3);
                if (dr.IsDBNull(4)) item.STRVAL = ""; else item.STRVAL = dr.GetString(4);
                if (dr.IsDBNull(5)) item.ISLOCK = false; else item.ISLOCK = (dr.GetInt32(5) == 1); ;
                item.RowId = dr.GetString(6);
                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

    }

    public partial class Rd_Yue : DbEntity
    {
        private double _NIAN;
        private double _YUE;
        private string _TAGNAME = "";
        private double? _VAL;
        private string _STRVAL = "";
        private bool _ISLOCK;

        public double NIAN
        {
            get
            {
                return this._NIAN;
            }
            set
            {
                if (!_NIAN.Equals(value))
                {
                    _NIAN = value;
                    RaisePropertyChanged("NIAN", true);
                }

            }
        }
        public double YUE
        {
            get
            {
                return this._YUE;
            }
            set
            {
                if (!_YUE.Equals(value))
                {
                    _YUE = value;
                    RaisePropertyChanged("YUE", true);
                }

            }
        }
        public string TAGNAME
        {
            get
            {
                return this._TAGNAME;
            }
            set
            {
                if (!_TAGNAME.Equals(value))
                {
                    _TAGNAME = value;
                    RaisePropertyChanged("TAGNAME", true);
                }

            }
        }
        public double? VAL
        {
            get
            {
                return this._VAL;
            }
            set
            {
                if (!_VAL.Equals(value))
                {
                    _VAL = value;
                    RaisePropertyChanged("VAL", true);
                }

            }
        }
        public string STRVAL
        {
            get
            {
                return this._STRVAL;
            }
            set
            {
                if (!_STRVAL.Equals(value))
                {
                    _STRVAL = value;
                    RaisePropertyChanged("STRVAL", true);
                }

            }
        }
        public bool ISLOCK
        {
            get
            {
                return this._ISLOCK;
            }
            set
            {
                if (!_ISLOCK.Equals(value))
                {
                    _ISLOCK = value;
                    RaisePropertyChanged("ISLOCK", true);
                }

            }
        }

        public bool CheckPk(OracleTransaction trans)
        {
            OracleConnection con = trans.Connection;
            OracleCommand checkCmd = new OracleCommand();
            checkCmd.Connection = con;
            checkCmd.Transaction = trans;
            checkCmd.CommandText = "SELECT ROWID FROM RD_RI WHERE NIAN=:NIAN AND YUE=:YUE AND TAGNAME=:TAGNAME";
            checkCmd.Parameters.Add(":NIAN", OracleType.Double).Value = this.NIAN;
            checkCmd.Parameters.Add(":YUE", OracleType.Double).Value = this.YUE;
            checkCmd.Parameters.Add(":TAGNAME", OracleType.VarChar, 200).Value = this.TAGNAME;
            OracleDataReader dr = checkCmd.ExecuteReader();
            bool result = false;
            if (dr.Read())
            {
                OracleString rowid = dr.GetOracleString(0);
                if (!rowid.IsNull)
                {
                    this.RowId = rowid;
                    result = true;
                }
            }
            dr.Close();
            return result;
        }

        public override void DbInsert(OracleTransaction trans)
        {
            //InsertSql,InsertPara,AutoSql
            if (DataState == DataStateType.Add)
            {
                if (CheckPk(trans))
                {
                    DataState = DataStateType.Update;
                    DbUpdate(trans);
                    return;
                }
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO RD_YUE(NIAN,YUE,TAGNAME,VAL,STRVAL,ISLOCK) VALUES(:NIAN,:YUE,:TAGNAME,:VAL,:STRVAL,:ISLOCK)";
                insertCmd.Parameters.Add(":NIAN", OracleType.Double).Value = this.NIAN;
                insertCmd.Parameters.Add(":YUE", OracleType.Double).Value = this.YUE;
                insertCmd.Parameters.Add(":TAGNAME", OracleType.VarChar, 200).Value = this.TAGNAME;
                insertCmd.Parameters.Add(":VAL", OracleType.Double).Value = (object)this.VAL ?? DBNull.Value;
                insertCmd.Parameters.Add(":STRVAL", OracleType.VarChar, 500).Value = this.STRVAL;
                insertCmd.Parameters.Add(":ISLOCK", OracleType.Byte).Value = this.ISLOCK;

                insertCmd.ExecuteOracleNonQuery(out RowId);

            }



        }
        public override void DbDelete(OracleTransaction trans)
        {
            //DelSql,DelPara
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM RD_YUE WHERE  ROWID='" + RowId.Value + "'";

                deleteCmd.ExecuteNonQuery();
            }

        }
        public override void DbUpdate(OracleTransaction trans)
        {
            //UpdateSql,UpdatePara
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE RD_YUE SET NIAN=:NIAN,YUE=:YUE,TAGNAME=:TAGNAME,VAL=:VAL,STRVAL=:STRVAL,ISLOCK=:ISLOCK WHERE  ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":NIAN", OracleType.Double).Value = this.NIAN;
                updateCmd.Parameters.Add(":YUE", OracleType.Double).Value = this.YUE;
                updateCmd.Parameters.Add(":TAGNAME", OracleType.VarChar, 200).Value = this.TAGNAME;
                updateCmd.Parameters.Add(":VAL", OracleType.Double).Value = (object)this.VAL ?? DBNull.Value;
                updateCmd.Parameters.Add(":STRVAL", OracleType.VarChar, 500).Value = this.STRVAL;
                updateCmd.Parameters.Add(":ISLOCK", OracleType.Double).Value = this.ISLOCK;

                updateCmd.ExecuteNonQuery();
            }


        }

        public override int GetHashCode()
        {
            return this.TAGNAME.GetHashCode();
        }

        public override string ToString()
        {
            if (VAL != null)
                return VAL.Value.ToString();
            else
                return "";
        }
    }

    public partial class Rd_YueTable : DbEntityTable<Rd_Yue>, ITagSource
    {

        private int? nian;
        private int? yue;
        public void LoadByYue(int nian, int yue)
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            this.nian = nian;
            this.yue = yue;
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT NIAN,YUE,TAGNAME,VAL,STRVAL,ISLOCK,ROWID FROM RD_YUE WHERE NIAN=:NIAN AND YUE=:YUE";
            selectCmd.Parameters.Add(":NIAN", OracleType.Double).Value = nian;
            selectCmd.Parameters.Add(":YUE", OracleType.Double).Value = yue;
            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Rd_Yue item = new Rd_Yue();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.NIAN = 0; else item.NIAN = dr.GetDouble(0);
                if (dr.IsDBNull(1)) item.YUE = 0; else item.YUE = dr.GetDouble(1);
                if (dr.IsDBNull(2)) item.TAGNAME = ""; else item.TAGNAME = dr.GetString(2);
                if (dr.IsDBNull(3)) item.VAL = null; else item.VAL = dr.GetDouble(3);
                if (dr.IsDBNull(4)) item.STRVAL = ""; else item.STRVAL = dr.GetString(4);
                if (dr.IsDBNull(5)) item.ISLOCK = false; else item.ISLOCK = (dr.GetInt32(5) == 1); ;
                item.RowId = dr.GetString(6);

                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public Rd_Yue FindBy(int nian, int yue, string tagName)
        {
            foreach (var item in this)
            {
                if (item.NIAN == nian && item.YUE == yue && item.TAGNAME == tagName)
                    return item;
            }
            return null;
        }

        public void SetTagValue(string tagName, double? val)
        {
            if (this.nian != null && this.yue != null)
            {
                Rd_Yue yItem = FindBy(this.nian.Value, this.yue.Value, tagName);
                if (yItem != null)
                    yItem.VAL = val;
                else
                {
                    yItem = new Rd_Yue();
                    yItem.NIAN = this.nian.Value;
                    yItem.YUE = this.yue.Value;
                    yItem.TAGNAME = tagName;
                    yItem.VAL = val;
                    this.Add(yItem);
                }
            }
        }

        #region ITagSource 成员

        public double? GetDoubleValue(string TagName)
        {
            foreach (var item in this)
            {
                if (item.TAGNAME == TagName)
                {
                    return item.VAL;
                }
            }
            return -1;
        }

        public string GetStringValue(string TagName)
        {
            foreach (var item in this)
            {
                if (item.TAGNAME == TagName)
                {
                    return item.STRVAL;
                }
            }
            return "找不到标签";
        }

        #endregion
    }

    public partial class Rd_Nian : DbEntity
    {
        private double _NIAN;
        private string _TAGNAME = "";
        private double? _VAL;
        private string _STRVAL = "";
        private bool _ISLOCK;

        public double NIAN
        {
            get
            {
                return this._NIAN;
            }
            set
            {
                if (!_NIAN.Equals(value))
                {
                    _NIAN = value;
                    RaisePropertyChanged("NIAN", true);
                }

            }
        }
        public string TAGNAME
        {
            get
            {
                return this._TAGNAME;
            }
            set
            {
                if (!_TAGNAME.Equals(value))
                {
                    _TAGNAME = value;
                    RaisePropertyChanged("TAGNAME", true);
                }

            }
        }
        public double? VAL
        {
            get
            {
                return this._VAL;
            }
            set
            {
                if (!_VAL.Equals(value))
                {
                    _VAL = value;
                    RaisePropertyChanged("VAL", true);
                }

            }
        }
        public string STRVAL
        {
            get
            {
                return this._STRVAL;
            }
            set
            {
                if (!_STRVAL.Equals(value))
                {
                    _STRVAL = value;
                    RaisePropertyChanged("STRVAL", true);
                }

            }
        }
        public bool ISLOCK
        {
            get
            {
                return this._ISLOCK;
            }
            set
            {
                if (!_ISLOCK.Equals(value))
                {
                    _ISLOCK = value;
                    RaisePropertyChanged("ISLOCK", true);
                }

            }
        }
        public bool CheckPk(OracleTransaction trans)
        {
            OracleConnection con = trans.Connection;
            OracleCommand checkCmd = new OracleCommand();
            checkCmd.Connection = con;
            checkCmd.Transaction = trans;
            checkCmd.CommandText = "SELECT ROWID FROM RD_RI WHERE NIAN=:NIAN AND TAGNAME=:TAGNAME";
            checkCmd.Parameters.Add(":NIAN", OracleType.Double).Value = this.NIAN;
            checkCmd.Parameters.Add(":TAGNAME", OracleType.VarChar, 200).Value = this.TAGNAME;
            OracleDataReader dr = checkCmd.ExecuteReader();
            bool result = false;
            if (dr.Read())
            {
                OracleString rowid = dr.GetOracleString(0);
                if (!rowid.IsNull)
                {
                    this.RowId = rowid;
                    result = true;
                }
            }
            dr.Close();
            return result;
        }
        public override void DbInsert(OracleTransaction trans)
        {
            //InsertSql,InsertPara,AutoSql
            if (DataState == DataStateType.Add)
            {
                if (CheckPk(trans))
                {
                    DataState = DataStateType.Update;
                    DbUpdate(trans);
                    return;
                }
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO RD_NIAN(NIAN,TAGNAME,VAL,STRVAL,ISLOCK) VALUES(:NIAN,:TAGNAME,:VAL,:STRVAL,:ISLOCK)";
                insertCmd.Parameters.Add(":NIAN", OracleType.Double).Value = this.NIAN;
                insertCmd.Parameters.Add(":TAGNAME", OracleType.VarChar, 200).Value = this.TAGNAME;
                insertCmd.Parameters.Add(":VAL", OracleType.Double).Value = (object)this.VAL ?? DBNull.Value;
                insertCmd.Parameters.Add(":STRVAL", OracleType.VarChar, 500).Value = this.STRVAL;
                insertCmd.Parameters.Add(":ISLOCK", OracleType.Byte).Value = this.ISLOCK;
                insertCmd.ExecuteOracleNonQuery(out RowId);

            }



        }
        public override void DbDelete(OracleTransaction trans)
        {
            //DelSql,DelPara
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM RD_NIAN WHERE  ROWID='" + RowId.Value + "'";

                deleteCmd.ExecuteNonQuery();
            }

        }
        public override void DbUpdate(OracleTransaction trans)
        {
            //UpdateSql,UpdatePara
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE RD_NIAN SET NIAN=:NIAN,TAGNAME=:TAGNAME,VAL=:VAL,STRVAL=:STRVAL,ISLOCK=:ISLOCK WHERE  ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":NIAN", OracleType.Double).Value = this.NIAN;
                updateCmd.Parameters.Add(":TAGNAME", OracleType.VarChar, 200).Value = this.TAGNAME;
                updateCmd.Parameters.Add(":VAL", OracleType.Double).Value = (object)this.VAL ?? DBNull.Value;
                updateCmd.Parameters.Add(":STRVAL", OracleType.VarChar, 500).Value = this.STRVAL;
                updateCmd.Parameters.Add(":ISLOCK", OracleType.Double).Value = this.ISLOCK;

                updateCmd.ExecuteNonQuery();
            }


        }
    }

    public partial class Rd_NianTable : DbEntityTable<Rd_Nian>
    {
        public void LoadByNian(int nian)
        {
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT NIAN,TAGNAME,VAL,STRVAL,ISLOCK,ROWID FROM RD_NIAN WHERE NIAN=:NIAN";
            selectCmd.Parameters.Add(":NIAN", OracleType.Double).Value = nian;

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Rd_Nian item = new Rd_Nian();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.NIAN = 0; else item.NIAN = dr.GetDouble(0);
                if (dr.IsDBNull(1)) item.TAGNAME = ""; else item.TAGNAME = dr.GetString(1);
                if (dr.IsDBNull(2)) item.VAL = null; else item.VAL = dr.GetDouble(2);
                if (dr.IsDBNull(3)) item.STRVAL = ""; else item.STRVAL = dr.GetString(3);
                if (dr.IsDBNull(4)) item.ISLOCK = false; else item.ISLOCK = (dr.GetInt32(4) == 1); ;
                item.RowId = dr.GetString(5);

                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }
    }


    //基本数据部分

    //班组
    public partial class Bd_Banzu : DbEntity
    {
        private int _GONGXUID;
        private string _BANZU = "";
        private string _LEADER = "";

        [DisplayName("工序编号")]
        public int GONGXUID
        {
            get
            {
                return this._GONGXUID;
            }
            set
            {
                if (!_GONGXUID.Equals(value))
                {
                    _GONGXUID = value;
                    RaisePropertyChanged("GONGXUID", true);
                }

            }
        }
        [DisplayName("班组")]
        public string BANZU
        {
            get
            {
                return this._BANZU;
            }
            set
            {
                if (!_BANZU.Equals(value))
                {
                    _BANZU = value;
                    RaisePropertyChanged("BANZU", true);
                }

            }
        }
        [DisplayName("工长")]
        public string LEADER
        {
            get
            {
                return this._LEADER;
            }
            set
            {
                if (!_LEADER.Equals(value))
                {
                    _LEADER = value;
                    RaisePropertyChanged("LEADER", true);
                }

            }
        }

        public override void DbInsert(OracleTransaction trans)
        {
            //InsertSql,InsertPara,AutoSql
            if (DataState == DataStateType.Add)
            {
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO BD_BANZU(GONGXUID,BANZU,LEADER) VALUES(:GONGXUID,:BANZU,:LEADER)";
                insertCmd.Parameters.Add(":GONGXUID", OracleType.Int32).Value = this.GONGXUID;
                insertCmd.Parameters.Add(":BANZU", OracleType.VarChar, 50).Value = this.BANZU;
                insertCmd.Parameters.Add(":LEADER", OracleType.VarChar, 200).Value = this.LEADER;

                insertCmd.ExecuteOracleNonQuery(out RowId);

            }
        }
        public override void DbDelete(OracleTransaction trans)
        {
            //DelSql,DelPara
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM BD_BANZU WHERE ROWID='" + RowId.Value + "'";

                deleteCmd.ExecuteNonQuery();
            }

        }
        public override void DbUpdate(OracleTransaction trans)
        {
            //UpdateSql,UpdatePara
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE BD_BANZU SET GONGXUID=:GONGXUID,BANZU=:BANZU,LEADER=:LEADER WHERE ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":GONGXUID", OracleType.Int32).Value = this.GONGXUID;
                updateCmd.Parameters.Add(":BANZU", OracleType.VarChar, 50).Value = this.BANZU;
                updateCmd.Parameters.Add(":LEADER", OracleType.VarChar, 200).Value = this.LEADER;

                updateCmd.ExecuteNonQuery();
            }


        }

        public static Bd_Banzu GetBanZu(int gongxu, DateTime riqi, string banci)
        {
            Bd_Banzu banzu = null; //班组 -返回值
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = string.Format("SELECT KSRQ,PATTERN FROM (SELECT KSRQ, PATTERN FROM BD_PAIBAN  WHERE GONGXUID ={0} and KSRQ <= TO_DATE('{1}','YYYY-MM-DD') ORDER BY KSRQ DESC) WHERE ROWNUM = 1",gongxu,riqi.ToString("yyyy-MM-dd"));
            OracleDataReader dr = selectCmd.ExecuteReader();
            DateTime? KsRq = null; //开始日期
            string Pattern = "";//排班方案

            if (dr.Read())
            {
                if (!dr.IsDBNull(0)) KsRq = dr.GetDateTime(0);
                if (!dr.IsDBNull(0)) Pattern = dr.GetString(1);
            }
            dr.Close();
            if (Pattern != "" && KsRq != null)
            {
                int tianshu = 0;
                OracleCommand selectCmd2 = new OracleCommand();
                selectCmd2.Connection = con;
                selectCmd2.CommandText = "SELECT TIANSHU FROM BD_PBPATTERN WHERE NAME=:NAME";
                selectCmd2.Parameters.Add(":NAME", OracleType.VarChar, 50).Value = Pattern;
                OracleDataReader dr2 = selectCmd2.ExecuteReader();
                if (dr2.Read())
                {
                    if (!dr2.IsDBNull(0)) tianshu = dr2.GetInt32(0);
                }
                dr2.Close();

                if (tianshu > 0)
                {
                    int tian = Convert.ToInt32((riqi - KsRq.Value).TotalDays % tianshu + 1);
                    OracleCommand selectCmd3 = new OracleCommand();
                    selectCmd3.Connection = con;
                    selectCmd3.CommandText = "SELECT BANZU FROM BD_PBPCONTENT WHERE NAME=:NAME AND TIAN=:TIAN AND BANCI=:BANCI";
                    selectCmd3.Parameters.Add(":NAME", OracleType.VarChar, 50).Value = Pattern;
                    selectCmd3.Parameters.Add(":TIAN", OracleType.Int32).Value = tian;
                    selectCmd3.Parameters.Add(":BANCI", OracleType.VarChar, 50).Value = banci;

                    string banzuName = "";
                    OracleDataReader dr3 = selectCmd3.ExecuteReader();
                    if (dr3.Read())
                    {
                        if (!dr3.IsDBNull(0))
                        {
                           banzuName= dr3.GetString(0);
                        }
                    }
                    dr3.Close();
                    if (banzuName != "")
                    {
                        OracleCommand selectCmd4 = new OracleCommand();
                        selectCmd4.Connection = con;
                        selectCmd4.CommandText = "SELECT GONGXUID,BANZU,LEADER,ROWID FROM BD_BANZU WHERE GONGXUID=:GONGXUID AND BANZU=:BANZU";
                        selectCmd4.Parameters.Add(":GONGXUID", OracleType.Int32).Value = gongxu;
                        selectCmd4.Parameters.Add(":BANZU", OracleType.VarChar, 50).Value = banzuName;
                        OracleDataReader dr4 = selectCmd4.ExecuteReader();
                        if (dr4.Read())
                        {
                            banzu = new Bd_Banzu();
                            banzu.BeginInit();
                            if (dr4.IsDBNull(0)) banzu.GONGXUID = 0; else banzu.GONGXUID = dr4.GetInt32(0);
                            if (dr4.IsDBNull(1)) banzu.BANZU = ""; else banzu.BANZU = dr4.GetString(1);
                            if (dr4.IsDBNull(2)) banzu.LEADER = ""; else banzu.LEADER = dr4.GetString(2);
                            banzu.RowId = dr4.GetString(3);
                            banzu.EndInit();
                        }
                        dr4.Close();
                    }
                }
            }
            con.Close();
            return banzu;
        }
    
    }
    public partial class Bd_BanzuTable : DbEntityTable<Bd_Banzu>
    {
        public void Load()
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT GONGXUID,BANZU,LEADER,ROWID FROM BD_BANZU";

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Bd_Banzu item = new Bd_Banzu();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.GONGXUID = 0; else item.GONGXUID = dr.GetInt32(0);
                if (dr.IsDBNull(1)) item.BANZU = ""; else item.BANZU = dr.GetString(1);
                if (dr.IsDBNull(2)) item.LEADER = ""; else item.LEADER = dr.GetString(2);
                item.RowId = dr.GetString(3);

                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }
    }

    //工序
    public partial class Bd_Gongxu : DbEntity
    {
        private int _ID;
        private string _NAME = "";
        private string _TYP = "";

        [DisplayName("工序编号")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (!_ID.Equals(value))
                {
                    _ID = value;
                    RaisePropertyChanged("ID", true);
                }

            }
        }

        [DisplayName("工序名称")]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (!_NAME.Equals(value))
                {
                    _NAME = value;
                    RaisePropertyChanged("NAME", true);
                }

            }
        }

        [DisplayName("工序类型")]
        public string TYP
        {
            get
            {
                return this._TYP;
            }
            set
            {
                if (!_TYP.Equals(value))
                {
                    _TYP = value;
                    RaisePropertyChanged("TYP", true);
                }

            }
        }

        public override void DbInsert(OracleTransaction trans)
        {
            //InsertSql,InsertPara,AutoSql
            if (DataState == DataStateType.Add)
            {
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO BD_GONGXU(ID,NAME,TYP) VALUES(:ID,:NAME,:TYP)";
                insertCmd.Parameters.Add(":ID", OracleType.Int32).Value = this.ID;
                insertCmd.Parameters.Add(":NAME", OracleType.VarChar, 50).Value = this.NAME;
                insertCmd.Parameters.Add(":TYP", OracleType.VarChar, 50).Value = this.TYP;

                insertCmd.ExecuteOracleNonQuery(out RowId);
            }
        }
        public override void DbDelete(OracleTransaction trans)
        {
            //DelSql,DelPara
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM BD_GONGXU WHERE ROWID='" + RowId.Value + "'";

                deleteCmd.ExecuteNonQuery();
            }

        }
        public override void DbUpdate(OracleTransaction trans)
        {
            //UpdateSql,UpdatePara
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE BD_GONGXU SET ID=:ID,NAME=:NAME,TYP=:TYP WHERE ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":ID", OracleType.Int32).Value = this.ID;
                updateCmd.Parameters.Add(":NAME", OracleType.VarChar, 50).Value = this.NAME;
                updateCmd.Parameters.Add(":TYP", OracleType.VarChar, 50).Value = this.TYP;

                updateCmd.ExecuteNonQuery();
            }


        }
    }
    public partial class Bd_GongxuTable : DbEntityTable<Bd_Gongxu>
    {
        public Bd_GongxuTable()
        {
            Bd_Gongxu item1 = new Bd_Gongxu();
            item1.ID = 1;
            item1.NAME = "1高炉";
            item1.TYP = "高炉";
            item1.ClearDataState();
            this.Add(item1);

            Bd_Gongxu item4 = new Bd_Gongxu();
            item4.ID = 4;
            item4.NAME = "4高炉";
            item4.TYP = "高炉";
            item4.ClearDataState();
            this.Add(item4);

            Bd_Gongxu item5 = new Bd_Gongxu();
            item5.ID = 5;
            item5.NAME = "5高炉";
            item5.TYP = "高炉";
            item5.ClearDataState();
            this.Add(item5);

            Bd_Gongxu item6 = new Bd_Gongxu();
            item6.ID = 6;
            item6.NAME = "6高炉";
            item6.TYP = "高炉";
            item6.ClearDataState();
            this.Add(item6);

            Bd_Gongxu item7 = new Bd_Gongxu();
            item7.ID = 7;
            item7.NAME = "7高炉";
            item7.TYP = "高炉";
            item7.ClearDataState();
            this.Add(item7);

            Bd_Gongxu item8 = new Bd_Gongxu();
            item8.ID = 8;
            item8.NAME = "8高炉";
            item8.TYP = "高炉";
            item8.ClearDataState();
            this.Add(item8);

        }

        public override void Save()
        {

        }
        public void Load()
        {

        }

        //public void Load()
        //{
        //    //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
        //    beginAdjustData = true;
        //    this.Clear();
        //    hideList.Clear();
        //    OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
        //    con.Open();
        //    OracleCommand selectCmd = new OracleCommand();
        //    selectCmd.Connection = con;
        //    selectCmd.CommandText = "SELECT ID,NAME,TYP,ROWID FROM BD_GONGXU";

        //    OracleDataReader dr = selectCmd.ExecuteReader();
        //    while (dr.Read())
        //    {
        //        Bd_Gongxu item = new Bd_Gongxu();
        //        item.BeginInit();
        //        if (dr.IsDBNull(0)) item.ID = 0; else item.ID = dr.GetInt32(0);
        //        if (dr.IsDBNull(1)) item.NAME = ""; else item.NAME = dr.GetString(1);
        //        if (dr.IsDBNull(2)) item.TYP = ""; else item.TYP = dr.GetString(2);
        //        item.RowId = dr.GetString(3);

        //        item.EndInit();
        //        item.ClearDataState();
        //        this.Add(item);
        //        hideList.Add(item);
        //    }
        //    dr.Close();
        //    con.Close();
        //    beginAdjustData = false;
        //    ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
        //    this.OnListChanged(arg);
        //}

        private void LoadByTyp(string TYP)
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT ID,NAME,TYP,ROWID FROM BD_GONGXU WHERE TYP=:TYP";
            selectCmd.Parameters.Add(":TYP", OracleType.VarChar, 50).Value = TYP;

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Bd_Gongxu item = new Bd_Gongxu();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.ID = 0; else item.ID = dr.GetInt32(0);
                if (dr.IsDBNull(1)) item.NAME = ""; else item.NAME = dr.GetString(1);
                if (dr.IsDBNull(2)) item.TYP = ""; else item.TYP = dr.GetString(2);
                item.RowId = dr.GetString(3);

                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

        public void LoadGaolu()
        {
           // LoadByTyp("高炉");

        }
        //高炉
        public ListDictionary ToDict()
        {
            ListDictionary result = new ListDictionary();
            foreach (var item in this)
            {
                result.Add(item.ID, item.NAME);
            }
            return result;
        }

        public int GetGongXuByName(string gxname)
        {
            int id = 0;
            foreach (var item in this)
            {
                if (item.NAME == gxname)
                {
                    id = item.ID;
                    break;
                }
            }
            return id;
        }
    }

    //排班方案
    public partial class Bd_Pbpattern : DbEntity
    {
        private string _NAME = "";
        private int _TIANSHU;
        //ConStr 

        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (!_NAME.Equals(value))
                {
                    _NAME = value;
                    RaisePropertyChanged("NAME", true);
                }

            }
        }
        public int TIANSHU
        {
            get
            {
                return this._TIANSHU;
            }
            set
            {
                if (!_TIANSHU.Equals(value))
                {
                    _TIANSHU = value;
                    RaisePropertyChanged("TIANSHU", true);
                }

            }
        }

        public override void DbInsert(OracleTransaction trans)
        {
            //InsertSql,InsertPara,AutoSql
            if (DataState == DataStateType.Add)
            {
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO BD_PBPATTERN(NAME,TIANSHU) VALUES(:NAME,:TIANSHU)";
                insertCmd.Parameters.Add(":NAME", OracleType.VarChar, 50).Value = this.NAME;
                insertCmd.Parameters.Add(":TIANSHU", OracleType.Int32).Value = this.TIANSHU;

                insertCmd.ExecuteOracleNonQuery(out RowId);
            }



        }
        public override void DbDelete(OracleTransaction trans)
        {
            //DelSql,DelPara
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM BD_PBPATTERN WHERE ROWID='" + RowId.Value + "'";

                deleteCmd.ExecuteNonQuery();
            }

        }
        public override void DbUpdate(OracleTransaction trans)
        {
            //UpdateSql,UpdatePara
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE BD_PBPATTERN SET NAME=:NAME,TIANSHU=:TIANSHU WHERE ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":NAME", OracleType.VarChar, 50).Value = this.NAME;
                updateCmd.Parameters.Add(":TIANSHU", OracleType.Int32).Value = this.TIANSHU;

                updateCmd.ExecuteNonQuery();
            }


        }

        public override string ToString()
        {
            return NAME;
        }
    }
    public partial class Bd_PbpatternTable : DbEntityTable<Bd_Pbpattern>
    {
        //Bd_Pbpattern,ltznConnectionString
        public void Load()
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT NAME,TIANSHU,ROWID FROM BD_PBPATTERN";

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Bd_Pbpattern item = new Bd_Pbpattern();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.NAME = ""; else item.NAME = dr.GetString(0);
                if (dr.IsDBNull(1)) item.TIANSHU = 0; else item.TIANSHU = dr.GetInt32(1);
                item.RowId = dr.GetString(2);
                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }
    }

    //排班方案内容
    public partial class Bd_Pbpcontent : DbEntity
    {
        private string _NAME = "";
        private int _TIAN;
        private string _BANCI = "";
        private string _BANZU = "";

        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (!_NAME.Equals(value))
                {
                    _NAME = value;
                    RaisePropertyChanged("NAME", true);
                }

            }
        }
        public int TIAN
        {
            get
            {
                return this._TIAN;
            }
            set
            {
                if (!_TIAN.Equals(value))
                {
                    _TIAN = value;
                    RaisePropertyChanged("TIAN", true);
                }

            }
        }
        public string BANCI
        {
            get
            {
                return this._BANCI;
            }
            set
            {
                if (!_BANCI.Equals(value))
                {
                    _BANCI = value;
                    RaisePropertyChanged("BANCI", true);
                }

            }
        }
        public string BANZU
        {
            get
            {
                return this._BANZU;
            }
            set
            {
                if (!_BANZU.Equals(value))
                {
                    _BANZU = value;
                    RaisePropertyChanged("BANZU", true);
                }

            }
        }

        public override void DbInsert(OracleTransaction trans)
        {
            //InsertSql,InsertPara,AutoSql
            if (DataState == DataStateType.Add)
            {
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO BD_PBPCONTENT(NAME,TIAN,BANCI,BANZU) VALUES(:NAME,:TIAN,:BANCI,:BANZU)";
                insertCmd.Parameters.Add(":NAME", OracleType.VarChar, 50).Value = this.NAME;
                insertCmd.Parameters.Add(":TIAN", OracleType.Int32).Value = this.TIAN;
                insertCmd.Parameters.Add(":BANCI", OracleType.VarChar, 50).Value = this.BANCI;
                insertCmd.Parameters.Add(":BANZU", OracleType.VarChar, 50).Value = this.BANZU;

                insertCmd.ExecuteOracleNonQuery(out RowId);
            }



        }
        public override void DbDelete(OracleTransaction trans)
        {
            //DelSql,DelPara
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM BD_PBPCONTENT WHERE ROWID='" + RowId.Value + "'";

                deleteCmd.ExecuteNonQuery();
            }

        }
        public override void DbUpdate(OracleTransaction trans)
        {
            //UpdateSql,UpdatePara
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE BD_PBPCONTENT SET NAME=:NAME,TIAN=:TIAN,BANCI=:BANCI,BANZU=:BANZU WHERE ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":NAME", OracleType.VarChar, 50).Value = this.NAME;
                updateCmd.Parameters.Add(":TIAN", OracleType.Int32).Value = this.TIAN;
                updateCmd.Parameters.Add(":BANCI", OracleType.VarChar, 50).Value = this.BANCI;
                updateCmd.Parameters.Add(":BANZU", OracleType.VarChar, 50).Value = this.BANZU;

                updateCmd.ExecuteNonQuery();
            }
        }
    }
    public partial class Bd_PbpcontentTable : DbEntityTable<Bd_Pbpcontent>
    {
        private string _FangAnName;

        public string FangAnName
        {
            get { return _FangAnName; }
            set
            {
                if (_FangAnName != value)
                {
                    _FangAnName = value;
                    if (!string.IsNullOrEmpty(value))
                    {
                        this.CancelFilter();
                        Dictionary<string, string> filter = new Dictionary<string, string>();
                        filter.Add("NAME", value);
                        this.Filter(filter);
                    }
                    else
                    {
                        BeginInit();
                        this.Clear();
                        EndInit();
                    }

                    RaisePropertyChanged("FangAnName");
                }
            }
        }


        protected override void InsertItem(int index, Bd_Pbpcontent item)
        {
            if (beginAdjustData)
                base.InsertItem(index, item);
            else
            {
                if (!string.IsNullOrEmpty(FangAnName))
                {
                    item.NAME = FangAnName;
                    base.InsertItem(index, item);
                }
            }
        }

        public void Load()
        {
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT NAME,TIAN,BANCI,BANZU,ROWID FROM BD_PBPCONTENT";

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Bd_Pbpcontent item = new Bd_Pbpcontent();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.NAME = ""; else item.NAME = dr.GetString(0);
                if (dr.IsDBNull(1)) item.TIAN = 0; else item.TIAN = dr.GetInt32(1);
                if (dr.IsDBNull(2)) item.BANCI = ""; else item.BANCI = dr.GetString(2);
                if (dr.IsDBNull(3)) item.BANZU = ""; else item.BANZU = dr.GetString(3);
                item.RowId = dr.GetString(4);

                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }

       
    }

    //排班计划
    public partial class Bd_Paiban : DbEntity
    {
        private int _GONGXUID;
        private DateTime _KSRQ = DateTime.Today;

        public int GONGXUID
        {
            get
            {
                return this._GONGXUID;
            }
            set
            {
                if (!_GONGXUID.Equals(value))
                {
                    _GONGXUID = value;
                    RaisePropertyChanged("GONGXUID", true);
                }

            }
        }

        public DateTime KSRQ
        {
            get
            {
                return this._KSRQ;
            }
            set
            {
                if (!_KSRQ.Equals(value))
                {
                    _KSRQ = value;
                    RaisePropertyChanged("KSRQ", true);
                }

            }
        }

        private string _PATTERN;
        //排班方案
        public string PATTERN
        {
            get { return _PATTERN; }
            set
            {
                if (_PATTERN != value)
                {
                    _PATTERN = value;
                    RaisePropertyChanged("PATTERN", true);
                }
            }
        }


        public override void DbInsert(OracleTransaction trans)
        {
            //InsertSql,InsertPara,AutoSql
            if (DataState == DataStateType.Add)
            {
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO BD_PAIBAN(GONGXUID,KSRQ,PATTERN) VALUES(:GONGXUID,:KSRQ,:PATTERN)";
                insertCmd.Parameters.Add(":GONGXUID", OracleType.Int32).Value = this.GONGXUID;
                insertCmd.Parameters.Add(":KSRQ", OracleType.DateTime).Value = this.KSRQ;
                insertCmd.Parameters.Add(":PATTERN", OracleType.VarChar, 50).Value = this.PATTERN;
                insertCmd.ExecuteOracleNonQuery(out RowId);
            }



        }
        public override void DbDelete(OracleTransaction trans)
        {
            //DelSql,DelPara
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM BD_PAIBAN WHERE ROWID='" + RowId.Value + "'";

                deleteCmd.ExecuteNonQuery();
            }

        }
        public override void DbUpdate(OracleTransaction trans)
        {
            //UpdateSql,UpdatePara
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE BD_PAIBAN SET GONGXUID=:GONGXUID,KSRQ=:KSRQ,PATTERN=:PATTERN WHERE ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":GONGXUID", OracleType.Int32).Value = this.GONGXUID;
                updateCmd.Parameters.Add(":KSRQ", OracleType.DateTime).Value = this.KSRQ;
                updateCmd.Parameters.Add(":PATTERN", OracleType.VarChar, 50).Value = this.PATTERN;

                updateCmd.ExecuteNonQuery();
            }


        }


    }
    public partial class Bd_PaibanTable : DbEntityTable<Bd_Paiban>
    {
        //Bd_Paiban,ltznConnectionString
        public void Load()
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT GONGXUID,KSRQ,PATTERN,ROWID FROM BD_PAIBAN";

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Bd_Paiban item = new Bd_Paiban();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.GONGXUID = 0; else item.GONGXUID = dr.GetInt32(0);
                if (dr.IsDBNull(1)) item.KSRQ = DateTime.Today; else item.KSRQ = dr.GetDateTime(1);
                if (dr.IsDBNull(2)) item.PATTERN = ""; else item.PATTERN = dr.GetString(2);
                item.RowId = dr.GetString(3);
                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }
    }


    //出铁方案
    public partial class Chutiefangan : DbEntity
    {
        private string _FANAME = "";
        private int _XUHAO;
        private int _SJ;
        private string _BANCI = "";
        private int _BANCIHAO;
        //ConStr 

        public string FANAME
        {
            get
            {
                return this._FANAME;
            }
            set
            {
                if (!_FANAME.Equals(value))
                {
                    _FANAME = value;
                    RaisePropertyChanged("FANAME", true);
                }

            }
        }
        public int XUHAO
        {
            get
            {
                return this._XUHAO;
            }
            set
            {
                if (!_XUHAO.Equals(value))
                {
                    _XUHAO = value;
                    RaisePropertyChanged("XUHAO", true);
                }

            }
        }
        public int SJ
        {
            get
            {
                return this._SJ;
            }
            set
            {
                if (!_SJ.Equals(value))
                {
                    _SJ = value;
                    if (_SJ > 1430)
                        _SJ = 1430;
                    if (_SJ < 0)
                        _SJ = 0;
                    RaisePropertyChanged("SJ", true);
                }

            }
        }
        public string BANCI
        {
            get
            {
                return this._BANCI;
            }
            set
            {
                if (!_BANCI.Equals(value))
                {
                    _BANCI = value;
                    RaisePropertyChanged("BANCI", true);
                }

            }
        }


        public int BANCIHAO
        {
            get
            {
                return this._BANCIHAO;
            }
            set
            {
                if (!_BANCIHAO.Equals(value))
                {
                    _BANCIHAO = value;
                    RaisePropertyChanged("BANCIHAO", true);
                }

            }
        }

        public override void DbInsert(OracleTransaction trans)
        {
            //InsertSql,InsertPara,AutoSql
            if (DataState == DataStateType.Add)
            {
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO CHUTIEFANGAN(FANAME,XUHAO,SJ,BANCI,BANCIHAO) VALUES(:FANAME,:XUHAO,:SJ,:BANCI,:BANCIHAO)";
                insertCmd.Parameters.Add(":FANAME", OracleType.VarChar, 200).Value = this.FANAME;
                insertCmd.Parameters.Add(":XUHAO", OracleType.Int32).Value = this.XUHAO;
                insertCmd.Parameters.Add(":SJ", OracleType.Int32).Value = this.SJ;
                insertCmd.Parameters.Add(":BANCI", OracleType.VarChar, 50).Value = this.BANCI;
                insertCmd.Parameters.Add(":BANCIHAO", OracleType.Int32).Value = this.BANCIHAO;
                insertCmd.ExecuteOracleNonQuery(out RowId);

            }

        }
        public override void DbDelete(OracleTransaction trans)
        {
            //DelSql,DelPara
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM CHUTIEFANGAN WHERE ROWID='" + RowId.Value + "'";
                deleteCmd.ExecuteNonQuery();
            }

        }
        public override void DbUpdate(OracleTransaction trans)
        {
            //UpdateSql,UpdatePara
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE CHUTIEFANGAN SET FANAME=:FANAME,XUHAO=:XUHAO,SJ=:SJ,BANCI=:BANCI,BANCIHAO=:BANCIHAO WHERE ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":FANAME", OracleType.VarChar, 200).Value = this.FANAME;
                updateCmd.Parameters.Add(":XUHAO", OracleType.Int32).Value = this.XUHAO;
                updateCmd.Parameters.Add(":SJ", OracleType.Int32).Value = this.SJ;
                updateCmd.Parameters.Add(":BANCI", OracleType.VarChar, 50).Value = this.BANCI;
                updateCmd.Parameters.Add(":BANCIHAO", OracleType.Int32).Value = this.BANCIHAO;

                updateCmd.ExecuteNonQuery();
            }


        }
    }
    public partial class ChutiefanganTable : DbEntityTable<Chutiefangan>
    {
        private string _FangAnName;

        public string FangAnName
        {
            get { return _FangAnName; }
            set
            {
                if (_FangAnName != value)
                {
                    _FangAnName = value;
                    if (!string.IsNullOrEmpty(value))
                    {
                        this.CancelFilter();
                        Dictionary<string, string> filter = new Dictionary<string, string>();
                        filter.Add("FANAME", value);
                        this.Filter(filter);
                    }
                    else
                    {
                        BeginInit();
                        this.Clear();
                        EndInit();
                    }

                    RaisePropertyChanged("FangAnName");
                }
            }
        }

        public List<string> AllFangAn()
        {
            List<string> lstFangAn = new List<string>();
            foreach (var item in this)
            {
                if (!lstFangAn.Contains(item.FANAME))
                {
                    lstFangAn.Add(item.FANAME);
                }
            }
            return lstFangAn;
        }

        protected override void InsertItem(int index, Chutiefangan item)
        {
            if (beginAdjustData)
                base.InsertItem(index, item);
            else
            {
                if (!string.IsNullOrEmpty(FangAnName))
                {
                    item.FANAME = FangAnName;
                    base.InsertItem(index, item);
                }
            }
        }

        //Chutiefangan,ltznConnectionString
        public void Load()
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT FANAME,XUHAO,SJ,BANCI,BANCIHAO,ROWID FROM CHUTIEFANGAN";

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Chutiefangan item = new Chutiefangan();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.FANAME = ""; else item.FANAME = dr.GetString(0);
                if (dr.IsDBNull(1)) item.XUHAO = 0; else item.XUHAO = dr.GetInt32(1);
                if (dr.IsDBNull(2)) item.SJ = 0; else item.SJ = dr.GetInt32(2);
                if (dr.IsDBNull(3)) item.BANCI = ""; else item.BANCI = dr.GetString(3);
                if (dr.IsDBNull(4)) item.BANCIHAO = 0; else item.BANCIHAO = dr.GetInt32(4);
                item.RowId = dr.GetString(5);
                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        } 
        
        public void LoadByGlRq(int gaolu,DateTime rq)
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = string.Format("SELECT FANAME,XUHAO,SJ,BANCI,BANCIHAO,ROWID FROM CHUTIEFANGAN WHERE FANAME=(SELECT FANGAN FROM (SELECT KSRQ, FANGAN FROM CHUTIEJIHUA  WHERE GAOLU ={0} and KSRQ <= TO_DATE('{1}','YYYY-MM-DD') ORDER BY KSRQ DESC) WHERE ROWNUM = 1)", gaolu, rq.ToString("yyyy-MM-dd"));

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Chutiefangan item = new Chutiefangan();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.FANAME = ""; else item.FANAME = dr.GetString(0);
                if (dr.IsDBNull(1)) item.XUHAO = 0; else item.XUHAO = dr.GetInt32(1);
                if (dr.IsDBNull(2)) item.SJ = 0; else item.SJ = dr.GetInt32(2);
                if (dr.IsDBNull(3)) item.BANCI = ""; else item.BANCI = dr.GetString(3);
                if (dr.IsDBNull(4)) item.BANCIHAO = 0; else item.BANCIHAO = dr.GetInt32(4);
                item.RowId = dr.GetString(5);
                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }
    }

    //出铁计划
    public partial class Chutiejihua : DbEntity
    {
        private int _GAOLU;
        private DateTime _KSRQ = DateTime.Today;
        private string _FANGAN = "";
        //ConStr 

        [DisplayName("工序编号")]
        public int GAOLU
        {
            get
            {
                return this._GAOLU;
            }
            set
            {
                if (!_GAOLU.Equals(value))
                {
                    _GAOLU = value;
                    RaisePropertyChanged("GAOLU", true);
                }

            }
        }

        [DisplayName("开始日期")]
        public DateTime KSRQ
        {
            get
            {
                return this._KSRQ;
            }
            set
            {
                if (!_KSRQ.Equals(value))
                {
                    _KSRQ = value;
                    RaisePropertyChanged("KSRQ", true);
                }

            }
        }

        [DisplayName("方案")]
        public string FANGAN
        {
            get
            {
                return this._FANGAN;
            }
            set
            {
                if (!_FANGAN.Equals(value))
                {
                    _FANGAN = value;
                    RaisePropertyChanged("FANGAN", true);
                }

            }
        }

        public override void DbInsert(OracleTransaction trans)
        {
            if (DataState == DataStateType.Add)
            {
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO CHUTIEJIHUA(GAOLU,KSRQ,FANGAN) VALUES(:GAOLU,:KSRQ,:FANGAN)";
                insertCmd.Parameters.Add(":GAOLU", OracleType.Double).Value = this.GAOLU;
                insertCmd.Parameters.Add(":KSRQ", OracleType.DateTime).Value = this.KSRQ;
                insertCmd.Parameters.Add(":FANGAN", OracleType.VarChar, 400).Value = this.FANGAN;

                insertCmd.ExecuteOracleNonQuery(out RowId);

            }
        }

        public override void DbDelete(OracleTransaction trans)
        {
            //DelSql,DelPara
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM CHUTIEJIHUA WHERE ROWID='" + RowId.Value + "'";

                deleteCmd.ExecuteNonQuery();
            }

        }
        public override void DbUpdate(OracleTransaction trans)
        {
            //UpdateSql,UpdatePara
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE CHUTIEJIHUA SET GAOLU=:GAOLU,KSRQ=:KSRQ,FANGAN=:FANGAN WHERE ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":GAOLU", OracleType.Double).Value = this.GAOLU;
                updateCmd.Parameters.Add(":KSRQ", OracleType.DateTime).Value = this.KSRQ;
                updateCmd.Parameters.Add(":FANGAN", OracleType.VarChar, 400).Value = this.FANGAN;

                updateCmd.ExecuteNonQuery();
            }


        }
    }
    public partial class ChutiejihuaTable : DbEntityTable<Chutiejihua>
    {
        //Chutiejihua,ltznConnectionString
        public void Load()
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT GAOLU,KSRQ,FANGAN,ROWID FROM CHUTIEJIHUA";

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Chutiejihua item = new Chutiejihua();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.GAOLU = 0; else item.GAOLU = dr.GetInt32(0);
                if (dr.IsDBNull(1)) item.KSRQ = DateTime.Today; else item.KSRQ = dr.GetDateTime(1);
                if (dr.IsDBNull(2)) item.FANGAN = ""; else item.FANGAN = dr.GetString(2);
                item.RowId = dr.GetString(3);

                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }
    }

    //物料
    public partial class Bd_Material : DbEntity
    {
        private string _CODE = "";
        private string _NAME = "";
        private string _TYP = "";

        public string CODE
        {
            get
            {
                return this._CODE;
            }
            set
            {
                if (!_CODE.Equals(value))
                {
                    _CODE = value;
                    RaisePropertyChanged("CODE", true);
                }

            }
        }
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (!_NAME.Equals(value))
                {
                    _NAME = value;
                    RaisePropertyChanged("NAME", true);
                }

            }
        }
        public string TYP
        {
            get
            {
                return this._TYP;
            }
            set
            {
                if (!_TYP.Equals(value))
                {
                    _TYP = value;
                    RaisePropertyChanged("TYP", true);
                }

            }
        }

        public override void DbInsert(OracleTransaction trans)
        {
            //InsertSql,InsertPara,AutoSql
            if (DataState == DataStateType.Add)
            {
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO BD_MATERIAL(CODE,NAME,TYP) VALUES(:CODE,:NAME,:TYP)";
                insertCmd.Parameters.Add(":CODE", OracleType.VarChar, 20).Value = this.CODE;
                insertCmd.Parameters.Add(":NAME", OracleType.VarChar, 50).Value = this.NAME;
                insertCmd.Parameters.Add(":TYP", OracleType.VarChar, 50).Value = this.TYP;

                insertCmd.ExecuteOracleNonQuery(out RowId);
            }



        }
        public override void DbDelete(OracleTransaction trans)
        {
            //DelSql,DelPara
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM BD_MATERIAL WHERE ROWID='" + RowId.Value + "'";

                deleteCmd.ExecuteNonQuery();
            }

        }
        public override void DbUpdate(OracleTransaction trans)
        {
            //UpdateSql,UpdatePara
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE BD_MATERIAL SET CODE=:CODE,NAME=:NAME,TYP=:TYP WHERE ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":CODE", OracleType.VarChar, 20).Value = this.CODE;
                updateCmd.Parameters.Add(":NAME", OracleType.VarChar, 50).Value = this.NAME;
                updateCmd.Parameters.Add(":TYP", OracleType.VarChar, 50).Value = this.TYP;

                updateCmd.ExecuteNonQuery();
            }


        }
    }
    public partial class Bd_MaterialTable : DbEntityTable<Bd_Material>
    {
        //Bd_Material,ltznConnectionString
        public void Load()
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT CODE,NAME,TYP,ROWID FROM BD_MATERIAL";

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Bd_Material item = new Bd_Material();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.CODE = ""; else item.CODE = dr.GetString(0);
                if (dr.IsDBNull(1)) item.NAME = ""; else item.NAME = dr.GetString(1);
                if (dr.IsDBNull(2)) item.TYP = ""; else item.TYP = dr.GetString(2);
                item.RowId = dr.GetString(3);
                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }
    }

    //检验位置
    public partial class Qa_Checkplace : DbEntity
    {
        private string _MATCODE = "";
        private string _PLACE = "";

        public string MATCODE
        {
            get
            {
                return this._MATCODE;
            }
            set
            {
                if (!_MATCODE.Equals(value))
                {
                    _MATCODE = value;
                    RaisePropertyChanged("MATCODE", true);
                }

            }
        }
        public string PLACE
        {
            get
            {
                return this._PLACE;
            }
            set
            {
                if (!_PLACE.Equals(value))
                {
                    _PLACE = value;
                    RaisePropertyChanged("PLACE", true);
                }

            }
        }

        public override void DbInsert(OracleTransaction trans)
        {
            //InsertSql,InsertPara,AutoSql
            if (DataState == DataStateType.Add)
            {
                OracleConnection con = trans.Connection;
                OracleCommand insertCmd = new OracleCommand();
                insertCmd.Connection = con;
                insertCmd.Transaction = trans;
                insertCmd.CommandText = "INSERT INTO QA_CHECKPLACE(MATCODE,PLACE) VALUES(:MATCODE,:PLACE)";
                insertCmd.Parameters.Add(":MATCODE", OracleType.VarChar, 20).Value = this.MATCODE;
                insertCmd.Parameters.Add(":PLACE", OracleType.VarChar, 200).Value = this.PLACE;

                insertCmd.ExecuteOracleNonQuery(out RowId);
            }



        }
        public override void DbDelete(OracleTransaction trans)
        {
            //DelSql,DelPara
            if (DataState == DataStateType.Delete)
            {
                OracleConnection con = trans.Connection;
                OracleCommand deleteCmd = new OracleCommand();
                deleteCmd.Connection = con;
                deleteCmd.Transaction = trans;
                deleteCmd.CommandText = "DELETE FROM QA_CHECKPLACE WHERE ROWID='" + RowId.Value + "'";

                deleteCmd.ExecuteNonQuery();
            }

        }
        public override void DbUpdate(OracleTransaction trans)
        {
            //UpdateSql,UpdatePara
            if (DataState == DataStateType.Update)
            {
                OracleConnection con = trans.Connection;
                OracleCommand updateCmd = new OracleCommand();
                updateCmd.Connection = con;
                updateCmd.Transaction = trans;
                updateCmd.CommandText = "UPDATE QA_CHECKPLACE SET MATCODE=:MATCODE,PLACE=:PLACE WHERE ROWID='" + RowId.Value + "'";
                updateCmd.Parameters.Add(":MATCODE", OracleType.VarChar, 20).Value = this.MATCODE;
                updateCmd.Parameters.Add(":PLACE", OracleType.VarChar, 200).Value = this.PLACE;

                updateCmd.ExecuteNonQuery();
            }


        }
    }
    public partial class Qa_CheckplaceTable : DbEntityTable<Qa_Checkplace>
    {
        //Qa_Checkplace,ltznConnectionString
        public void Load()
        {
            //ConStr, EntiyType, SelectSql, SelectPara, SelectParaVal
            beginAdjustData = true;
            this.Clear();
            hideList.Clear();
            OracleConnection con = new OracleConnection(LTZN.Properties.Settings.Default.ltznConnectionString);
            con.Open();
            OracleCommand selectCmd = new OracleCommand();
            selectCmd.Connection = con;
            selectCmd.CommandText = "SELECT MATCODE,PLACE,ROWID FROM QA_CHECKPLACE";

            OracleDataReader dr = selectCmd.ExecuteReader();
            while (dr.Read())
            {
                Qa_Checkplace item = new Qa_Checkplace();
                item.BeginInit();
                if (dr.IsDBNull(0)) item.MATCODE = ""; else item.MATCODE = dr.GetString(0);
                if (dr.IsDBNull(1)) item.PLACE = ""; else item.PLACE = dr.GetString(1);
                item.RowId = dr.GetString(2);
                item.EndInit();
                item.ClearDataState();
                this.Add(item);
                hideList.Add(item);
            }
            dr.Close();
            con.Close();
            beginAdjustData = false;
            ListChangedEventArgs arg = new ListChangedEventArgs(ListChangedType.Reset, -1);
            this.OnListChanged(arg);
        }
    }

    

   

}
